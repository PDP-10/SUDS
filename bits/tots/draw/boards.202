SUBTTL	LOCS.FAI: ROUTINES WITH KNOWLEDGE OF BOARD LOCATIONS

DEFINE CHECK(TAG,LENGTH)<
IFN .-TAG-LENGTH,<PRINTX TAG LOSES>
>;CHECK

DEFINE ALLBRDS
<	BRDNAM(DECPC,L940TV,WDECPC,W940)
	BRDNAM(W940,L940TV,W940TV,)
	BRDNAM(W941,L940TV,W941TV,)
	BRDNAM(W942,L940TV,W940TV,)
	BRDNAM(W943,L940TV,W941TV,)
NODEC,<
	BRDNAM(W946,L940TV,W946TV,)
	BRDNAM(LEBEL,LEBLTV,WEBLTV,LEBEL)
	BRDNAM(PG21,LP21TV,WP21TV,PG21)
	BRDNAM(PG21-60,LP21TV,WP21TV,)
	BRDNAM(PG21-180,LP21TV,WP21TV,)
	BRDNAM(LG411,LG411V,WLG411,LG411)
	BRDNAM(LG434,LG434V,WLG434,)		;IN LG411 FILE
	BRDNAM(MPG21,LMP21V,MP21TV,MPG21)
>;NODEC
	;BRDNAM(name,locs,wwc,insert-file)
>
MWL,<DEFINE STORAGE(A)<>>

MDPC,<	VERSION(LOCS,3)	>

COMMENT 

THIS SOURCE FILE (&WWC.FAI) CONTAINS ALL ROUTINES WITH KNOWLEDGE OF
THE EXTERNAL (PRINTED) REPRESENTATION OF LOCATIONS.

THE FOLLOWING ARE THE ONLY CONSTRAINTS ON PICKING LOCATION FORMATS

1)	A BOARD LOCATION (BAY/RACK/SLOT # FOR DEC PDP-10 LIKE STUFF)
	IS 18 BITS, NON-ZERO

2)	A DIP LOCATION IS 18 BITS, OF WHICH AT LEAST THE LOW ORDER
	12 MUST BE NON-ZERO (THE WIRE LISTER USES A DIP LOCATION
	WITH THESE 12 BITS ZERO AS A CONNECTOR BODY.  THIS HACK ASSOCIATES
	CONNECTOR PINS ON THE SAME PADDLE OR JACK)

3)	A DIP PIN # IS 6 BITS, NON-ZERO

4)	A CONNECTOR PIN LOCATION IS 6 BITS OF PADDLE/JACK, NON-ZERO

5)	A CONNECTOR PIN # IS 12 BITS, NON-ZERO (DEC SUBDIVIDES THIS INTO 2
	6-BIT FIELDS, FOR INSTANCE)

ROUTINES KNOWN TO THE OUTSIDE WORLD

FNDBRD		TAKES POINTER TO STRING IN B AND SKIP RETURN WITH BNAMES INDEX IN C
GETBRD		READS BOARD SPECIFICATION AND RETURNS BOARD TYPE IN B
SETBRD		SETS BOARD TYPE IN B (SETS UP TRANSFER VECTOR AND CALLS INITIALIZATION)
BPINPN	DPC	PRINTS PIN # AFTER BODY LOC
SLTLPN	DPC	PRINTS CARD SLOT FOLLOWED BY BODY LOC
PINPLS	DPC	PRINTS DIP PIN # IN + FORMAT
LOCPIN	WL	PRINTS DIP LOCATION AND PIN #
LOCPNP	WL	PRINTS DIP LOCATION AND PIN # IN + FORMAT
LOCPNM	WL	PRINTS DIP LOCATION AND PIN # IN - FORMAT
CSLTLT
PRBCN
QUPIN		CHECKS FOR WILD PIN NAME
SEQLOC	WL	CHECKS FOR SEQUENTIAL LOCATIONS
CONGIN
UGIN
UGINSET
SLTOUT		PRINTS CARD SPEC (BAY/RACK/SLOT)
GETSLT		READS CARD SPEC (BAY/RACK/SLOT)
RPNAM	DPC	READS DEFAULT PIN ID

ROUTINES WHICH ARE A FUNCTION OF THE BOARD TYPE

LCINIT		BOARD INITIALIZATION
LOCOUT		PRINTS DIP LOC ON CARD
CSLTLP	DPC	PRINTS CARD SPEC (IF SPECIFIED) AND CONNECTOR PIN
GTSLTL	DPC	READS CARD SPEC (IF SPECIFIED) AND DIP LOC
GTCONP	D	READS CARD SPEC (IF SPECIFIED) AND CONNECTOR PIN
CSLTLD	D	PRINTS ONLY CONNECTOR PIN (NO CARD LOC) (NOT CALLED BY OUTSIDE)
WLOCOUT	WL	PRINTS WILD/FRONT/BACK CONNECTOR (IF SPECIFIED) AND DIP LOC
LOCPNC	WL	PRINTS CONNECTOR PIN USING CONNECTOR-BODY/PIN-# FORMAT
LOCPNW	WL	  "	   "	  "    "       "       "   "    (CHECKS FOR WILD PINS)
PRCNPN	WL	PRINTS CONNECTOR PIN WITHOUT PADDLE SPEC
GETLOC	WL	READS DIP OR CONNECTOR PIN SPEC
PADPRT	WL	PRINTS PADDLE NAME
RAYDIP	WL	PRINTS DIP LOC FOR RAYTHEON OUTPUT (PADS #'S WITH LEADING ZEROES)
RAYCON	WL	PRINTS CONNECTOR LOC FOR RAYTHEON OUPUT( "     "     "       "  )

SUBTTL	DISPATCH TABLE DEFINITIONS

;HERE WE DEFINE INDICIES FOR SPECIAL BOARD TYPES

DEFINE MAKDEF(BOARD,INDEX)
<
DEFINE BRDNAM(NAME,LOCS,WWC,INSERT)
<IFIDN<BOARD><NAME><^INDEX__...TMP>
...TMP__...TMP+1
>
...TMP__0
ALLBRDS
>

MDPC,<

DEC,<	MAKDEF(DECPC,DEFBRD)
MD,<	MAKDEF(DECPC,INIBRD)	>
MPC,<	MAKDEF(DECPC,INIBRD)	>
>;DEC

NODEC,<	MAKDEF(W940,DEFBRD)
	INIBRD__-1
>;NODEC

>;MDPC

MWL,<
DEC,<MAKDEF(DECPC,INIBRD)>
NODEC,<INIBRD__-1>
>;MWL

DEFINE BRDNAM (NAME,LOCS,WWC,INSERT)
<	POINT 7,[ASCIZ \NAME\]
>

	POINT 7,[ASCIZ \BOARD NOT SPECIFIED\]
^BNAMES:ALLBRDS
NBRDS__.-BNAMES

DEFINE BRDNAM (NAME,LOCS,WWC,INSERT)
<	LOCS
>

	LNOBRD				;BOARD TYPE -1 IS "BOARD UNSPECIFIED"
LOCTVV:	ALLBRDS
CHECK LOCTVV,NBRDS

MWL,<
DEFINE BRDNAM (NAME,LOCS,WWC,INSERT)
<	WWC
>

	WNOBRD				;BOARD TYPE -1 AGAIN
WWCTVV:	ALLBRDS
CHECK WWCTVV,NBRDS
>;MWL
;THIS IS THE TRANSFER VECTOR WHICH IS SETUP BY THE BOARD TYPE SETTING COMAND
;THERE IS A SIMILAR OBJECT IN WWC

STORAGE(IMPURE)

LOCSTV__.

^LCINIT:	JRST NBOARD
^LOCOUT:	JRST NBOARD

MDPC,<
^CSLTLP:	JRST NBOARD
^GTSLTL:	JRST NBOARD

MD,<
^GTCONP:	JRST NBOARD
 CSLTLD:	JRST NBOARD	;I LEFT THE UP ARROW OUT ON PURPOSE
>;MD
>;MDPC

MWL,<
^WLOCOUT:	JRST NBOARD
^LOCPNC:	JRST NBOARD
^LOCPNW:	JRST NBOARD
^PRCNPN:	JRST NBOARD
^GETLOC:	JRST NBOARD
^PADPRT:	JRST NBOARD
^RAYDIP:	JRST NBOARD
^RAYCON:	JRST NBOARD
>;MWL
LTVLNJ__.-LOCSTV		;LENGTH OF PART WITH JRST'S
^SLTCUE:	[0]
MDPC,<
^CPCUE:		[0]
^BODCUE:	[0]
>;MDPC
MWL,<
^WBDCUE:	[0]
^CBCUE:		[0]
>;MWL

LTVLEN__.-LOCSTV

^BRDTYP:INIBRD			;INDEX INTO BNAMES
BRDTMP:	0			;FLAG USED IN BOARD NAME SEARCH

STORAGE(PURE)

^PINCUE:	[ASCIZ/#/]
^NBOARD:	OUTSTR [ASCIZ /SORRY - NO BOARD TYPE
/]
	POPJ P,

;TRANSFER VECTOR FOR UNSPECIFIED BOARD

LNOBRD:	REPEAT LTVLNJ
<	JRST NBOARD
>
	REPEAT LTVLEN-LTVLNJ
<	[0]
>
SUBTTL	L2N,N2L -- LETTER/NUMBER CONVERSION TABLES

STORAGE(IMPURE)

L2NLEN__100	;LETTER/NUMBER CONVERSION TABLE LENGTHS
N2LLEN__100

^L2N:	BLOCK L2NLEN		;LEAVE CONTIGUOUS AND IN THIS ORDER
^N2L:	BLOCK N2LLEN
^MAXN2L:	0

DEFINE L2N2L (I,J) <
	ORG L2NSUB+"I"-"A"
	MDPC,<J+>NNN
	ORG N2LSUB+NNN
	"I"
NNN__NNN+1
>
STORAGE(PURE)
DEFINE CHKBRD
<	SKIPGE BRDTYP
	JRST NBOARD
>

MWL,<
	CHRREG__TTT
	NUMREG__A
	DESTIN__SLICEL
	DEFINE GETCH <	XCT GETCHR
			 JFCL
>
	DEFINE GETNUM <	PUSHJ P,DECIN
			 JFCL
>
	DEFINE TGETNUM < PUSHJ P,TDECIN
			  JFCL
>
>;MWL

MDPC,<	CHRREG__C
	NUMREG__T
	DESTIN__LETTER

DEFINE GETCH <	XCT GTCHRX
>

DEFINE GETNUM <	PUSHJ P,GETDEC
>


GETDEC:	SETZ NUMREG,
GTDEC1:	GETCH
	CAIL CHRREG,"0"
	CAILE CHRREG,"9"
	POPJ P,
	IMULI NUMREG,=10
	ADDI NUMREG,-"0"(CHRREG)
	JRST GTDEC1

^RPNAM:	CHKBRD
	GETNUM
	JRST CPOPJ1
>;MDPC
;THESE ROUTINES SET UP THE BOARD TYPE

;TAKES POINTER TO STRING IN FREE STORAGE IN B
;AND SKIP RETURN WITH BNAMES INDEX IN C

^FNDBRD:
	PUSH P,B
	SETOM BRDTMP		;CLEAR PARTIAL MATCH STORAGE
	MOVSI C,-NBRDS		;LENGTH OF TABLE
FNDBR1:	MOVE T,BNAMES(C)	;GET BYTE POINTER
	MOVE B,(P)		;AND POINTER TO STRING
	ADD B,[POINT 7,1]
FNDBR2:	ILDB TT,T		;NEXT CHAR OF BOARD NAME
	TLNE B,760000		;END OF WORD?
	JRST FNDBR3		;NO
	HRR B,-1(B)
	TRNN B,-1
	JRST FNDBR4		;END OF SOURCE STRING
FNDBR3:	ILDB TTT,B		;NEXT CHAR OF SOURCE STRING
	JUMPE TTT,FNDBR4	;END OF SOURCE STRING?
	CAMN TTT,TT		;STILL MATCH?
	JRST FNDBR2		;YES, CONTINUE
FNDBR5:	AOBJN C,FNDBR1		;NO, TRY NEXT BOARD
	HRRE C,BRDTMP
	SKIPL C
FNDBR7:	AOS -1(P)
FNDBR6:	POP P,B
	POPJ P,

FNDBR4:	JUMPE TT,[HRRZ C,C
		JRST FNDBR7]	;EXACT MATCH
	SKIPL BRDTMP		;PREVIOUS PARTIAL MATCH?
	JRST [	SETOM BRDTMP
		HRRZS BRDTMP	;FLAG MULTIPLE PARTIAL MATCHES
		JRST FNDBR5]	;TRY FOR EXACT MATCH
	HRRZM C,BRDTMP
	JRST FNDBR5
;GETS BOARD NAME FROM TTY, LOOKS IT UP, AND SETS IT UP

^GETBRD:
MDPC,<	TLNN M,DSKACT!MACACT	>
	OUTSTR [ASCIZ /BOARD TYPE?/]
	PUSHJ P,TREADU				;DOES CASE CONVERSION
	    POPJ P,				;ALTMODE
MDPC,<	    JRST [	MOVE B,BRDTYP		;NULL
			OUTSTR @BNAMES(B)
			POPJ P,]
>;MDPC
MWL,<	    POPJ P,	>
	PUSHJ P,FNDBRD				;FIND THAT BOARD TYPE
	 JRST [	PUSHJ P,PUTFS
		OUTSTR [ASCIZ /BOARD NOT FOUND
/]
		POPJ P,]
	PUSHJ P,PUTFS
	HRRZM C,BRDTYP
MDPC,<	TLNN M,DSKACT!MACACT	>
	OUTSTR @BNAMES(C)		;TYPE THE BOARD NAME FOR THE PEOPLE
MWL,<	OUTSTR[ASCIZ/
/]
>;MWL
	JRST SETBRD

;GIVEN THE BOARD TYPE IN BRDTYP, SETS UP TRANSFER VECTORS AND CONVERSION TABLES

^CLRBRD:MOVE B,[INIBRD]
	MOVEM B,BRDTYPE
^SETBRD:MOVE B,BRDTYP
	HRL C,LOCTVV(B)		;SET UP LOCS TRANSFER VECTOR
	HRRI C,LOCSTV
	BLT C,LOCSTV+LTVLEN-1
	SKIPL BRDTYP		;NO SPECIFIC BOARD?
	PUSHJ P,LCINIT		;SET UP LETTER/NUMBER CONVERSION TABLES
MWL,<
	HRL C,WWCTVV(B)		;SET UP WWC TRANSFER VECTOR
	HRRI C,WWCTV
;;;;;ASSEMBLER BUG WANTS TO BE:	 BLT C,WWCTV+WTVLEN-1
	MOVEI B,WWCTV
	PUSHJ P,WWCBLT		;GETS AROUND ASSEMBLER BUG (WTVLEN DEFINED IN WWC)
;;;;;END ASSEMBLER BUG FIX
	MOVE B,BRDTYP
	SKIPE ISWW		;ONLY WIRE WRAP BOARDS HAVE WWINIT
	PUSHJ P,WWINIT		;WIRE WRAP INITIALIZATION
>;MWL
	POPJ P,
;PUT PIN ON END OF BODY LOCATION

MDPC,<
^BPINPN:CHKBRD
	PUTBYT "("
	MOVE T,A
	PUSHJ P,PUTDEC
	PUTBYT ")"
	POPJ P,

^SLTLPN:CHKBRD
	PUSHJ P,SLTOUT
	HLRZ A,A
	JRST LOCOUT

^PINPLS:CHKBRD
	HLRZ T,A
	PUSHJ P,PUTDEC
MD,<	TRNE A,R1416
	JRST [	CAML A,[8,,0]
		PUTSTR [ASCIZ/+2/]
		POPJ P, ]
	TRNE A,L1416
	PUTBYT "+"
>;MD
	POPJ P,
>;MDPC
SUBTTL	LOCPIN -- PRINTS LOCATION AND PIN #
MWL,<

^LOCPIN:CHKBRD
	PUSHJ P,LOCOUT
	PUTBYT "("
	HLRZ T,A
	PUSHJ P,PUTDEC
	PUTBYT ")"
	POPJ P,

;LOCPNM -- PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE

^LOCPNM:CHKBRD
	PUSH P,T
	PUSHJ P,LOCOUT
	PUTBYT "("
	HLRZ T,A
	MOVE TT,(P)
	TRNE TT,R1416
	JRST [	CAIL T,8
		ADDI T,2
		JRST LCPNM3 ]
	TRNE TT,L1416
	ADDI T,1
LCPNM3:	PUSHJ P,PUTDEC
	POP P,T
	TRNE T,R1416
	JRST [	CAML A,[8,,0]
		PUTSTR [ASCIZ/-2/]
		JRST LCPNM2 ]
	TRNE T,L1416
	PUTBYT "-"
LCPNM2:	PUTBYT ")"
	POPJ P,

^LOCPNP:CHKBRD
	PUSH P,T
	PUSHJ P,LOCOUT
	PUTBYT "("
	HLRZ T,A
	PUSHJ P,PUTDEC
	POP P,T
	TRNE T,R1416
	JRST [	CAML A,[8,,0]
		PUTSTR [ASCIZ/+2/]
		JRST LCPNP2 ]
	TRNE T,L1416
	PUTBYT "+"
LCPNP2:	PUTBYT ")"
	POPJ P,
SUBTTL	TP8LOC,NETPIN
DEC,<
;PRINTS LOCATION AND PIN # FOR TAPR-8 OUTPUT
;NUMBER OF PIN ON DIP IN T
;BODY BITS IN TT
;LOCATION (DIP,,PIN) IN A
^TP8LOC:CHKBRD
	TRNE TT,CBODY		;CONNECTOR?
	JRST TP8CON		;YES
	LDB TT,[POINT 6,A,5]
	MOVE TT,N2L(TT)		;GET LOC LETTER IN CASE NON-STANDARD
	CAIN T,=14
	MOVEI TT,"E"		;STANDARD FOR 14 PIN
	CAIN T,=16
	MOVEI TT,"F"		;16 PIN
	CAIN T,=24
	MOVEI TT,"G"		;24 PIN
	PUTBYT (TT)
	LDB T,[POINT 12,A,17]
	CAILE T,=99
	JRST TP8ERR
	MOVEI TT,2
	MOVEM TT,NDIG
	PUSHJ P,NPUTDEC
	HRRZ T,A
	CAILE T,=99
	JRST TP8ERR
	MOVEI TT,2
	MOVEM TT,NDIG
	JRST NPUTDEC

TP8CON:	LDB T,[POINT 6,A,5]
	PUTBYT @N2L(T)
	LDB T,[POINT 6,A,29]
	PUTBYT @N2L(T)
	MOVEI T,2
	MOVEM T,NDIG
	LDB T,[POINT 6,A,35]
	JRST NPUTDEC

TP8ERR:	OUTSTR[ASCIZ\ILLEGAL DIP AND/OR PIN #
\]
	POPJ P,

;PRINT PIN NUMBER FOR CS FILE
^NETPIN:
	MOVE T,A
	JRST DECOUT

;PRINT BP PIN FOR CS
^PRCSBP:
	LDB T,[POINT 5,A,26]
	LDB TT,[POINT 6,A,5]
	ADDI T,-1(TT)
	PUTBYT @N2L(T)
	LDB T,[POINT 6,A,35]
	MOVEI TT,2
	MOVEM TT,NDIG
	PUSHJ P,NDECOUT
	PUTBYT 40
	LDB T,[POINT 6,A,17]
	SUBI T,1
	IMULI T,=18
	LDB TT,[POINT 6,A,11]
	ADD T,TT
	MOVEI TT,2
	MOVEM TT,NDIG
	JRST NDECOUT
>;DEC
;MORE WL ROUTINES

;SEPARATE CONNECTOR PIN BODY LOC (PADDLE) FROM PIN # (PIN, SIDE)
^CPNSEP:CHKBRD
	MOVE TT,T
	ANDI T,770000
	ANDI TT,7777
	POPJ P,

;MERGE CONNECTOR PIN BODY LOC WITH PIN #
^CPNMER:CHKBRD
	DPB TT,[POINT 12,T,35]
	POPJ P,

;PRINT CONNECTOR PIN NAME AS SEEN FROM BACK PANEL
^BPNPIN:CHKBRD
	PUSH P,T	;SAVE OFFSET HERE
	LDB T,[POINT 4,A,3]
	SKIPE T		;CONVERT 0 TO SPACE
	ADDI T,20	;ALL THE REST TO DIGITS
	ADDI T,40
	PUTBYT (T)
	LDB T,[POINT 5,A,8]
	LDB TT,[POINT 6,A,23]
	ADDI T,-1(TT)
	CAILE T,77
	SETZ T,
	PUTBYT @N2L(T)
	MOVEI T,2
	MOVEM T,NDIG
	LDB T,[POINT 6,A,17]
	POP P,TT
	JUMPE TT,NOOFFS
	ADD T,TT
	JUMPLE T,[OUTSTR[ASCIZ/OFFSET CAUSED SLOT NUMBER TO BE ZERO OR NEGATIVE.
/]
		SETZ T,
		JRST NOOFFS]
	CAIG T,=99
	JRST NOOFFS
	OUTSTR[ASCIZ/OFFSET CAUSED SLOT NUMBER TO BE MORE THAN 2 DIGITS.
/]
	MOVEI T,=99
NOOFFS:	PUSHJ P,NDECOUT
	LDB T,[POINT 6,A,29]
	PUTBYT @N2L(T)
	LDB T,[POINT 6,A,35]
	JRST DECOUT

;OUTPUT EDGE PIN TO PARTITION FILE AS NUMBER
^CPARTP:CHKBRD
	LSH T,-14
	PUTBYT "0"(T)
	MOVEI T,2
	MOVEM T,NDIG
	MOVE T,TT
	LSH T,-5
	TRNE TT,1
	SUBI T,1
	JRST NDECOUT

DEC,<
;PRINT PIN NUMBER FOR REDAC
^RDCBPN:CHKBRD
	HLRZ T,A
	JRST DECOUT

;PRINT PIN(A-V) AS NUMBER FOR REDAC
^RDCCPN:CHKBRD
	LDB T,[POINT 6,A,11]
	HLRZ TT,B
	CAILE TT,3
	SETZ TT,
	ADD T,(TT)[	0		;CASE 0 (??)
			0		;CASE 1 (1-18)
			=18		;CASE 2 (19-36)
			2*=18]		;CASE 3 (37-54)
	JRST DECOUT

;PRINT PADDLE ("U") AND NUMBER FOR WILD PIN
^RDCUCN:CHKBRD
	LDB T,[POINT 5,A,23]
	PUTBYT @N2L(T)
	LDB T,[POINT 11,A,17]
	JRST DECOUT

;PRINT CONNECTOR PADDLE AND SIDE
^RDCCPD:CHKBRD
	LDB T,[POINT 5,A,23]
	PUTBYT @N2L(T)
	LDB T,[POINT 6,A,17]
	JRST DECOUT

;PRINT NUMBER FOR CONNECTOR IN A FOR SR FILE
^SRCPNM:CHKBRD
	LDB T,[POINT 6,A,23]
	SUBI T,1
	TLNN A,4000	;WILD PIN?
	CAILE T,5	;OR ILLEGAL PADDLE?
	JRST SRCPER
	LDB TT,[POINT 6,A,17]
	CAIL TT,1
	CAILE TT,2
	JRST SRCPER
	SUBI TT,1
	LDB TTT,[POINT 5,A,11]
	SUBI TTT,1
	TRNE TT,1		;SIDE 2?
	TRO TTT,40		;YES, LOOK THERE
	SKIPGE SRPTAB(TTT)
	JRST SRCPER
	IMULI T,=33
	ADD T,SRPTAB(TTT)
	JRST PUTDEC

SRPTAB:
FOR I_4,=18
<	I		;A1-S1
>
	-1		;T1
FOR I_=19,=20
<	I		;U1-V1
>
REPEAT 40-<.-SRPTAB>,<-1>
	-1		;A2
	=21		;B2
	-1		;C2
FOR I_=22,=36		;D2-V2
<	I
>
REPEAT 100-<.-SRPTAB>,<-1>

SRCPER:	PUTSTR[ASCIZ/***/]
	POPJ P,
>;DEC
>;MWL
SUBTTL	CSLTLT,LOCPNC,LOCPNW,PRCNPN -- CONNECTOR PIN PRINTING STUFF

^CSLTLT:
MD,<	CHKBRD
	PUSHJ P,SLTOUT
	JRST CSLTLD
>;MD

MWL,<
^PRBCN:	CHKBRD
	PUSH P,A
	TRZ A,7777
	PUSHJ P,LOCOUT
	POP P,A
	JRST PRCNPN
>;MWL
SUBTTL	DETECT IF THIS PIN NAME IS "WILD"
;CALL WITH PIN NAME IN RH(A)
^QUPIN:	CHKBRD
	PUSH P,A
	LSH A,-14
	ANDI A,77
	MOVE A,N2L(A)
	CAIE A,"U"
	JRST [	POP P,A
		POPJ P,]
	POP P,A
	ANDI A,3777
	PUSH P,B
	IDIVI A,=200
	POP P,B
	CAILE A,2
	TDZA A,A
	ADDI A,1
	JRST CPOPJ1

MWL,<
;THESE ROUTINES SHOULD BE MOVED EVENTUALLY, THEY ARE A FUNCTION OF THE BOARD TYPE

;CALL WITH LESSER OF TWO LOCS IN T
;GREATER IN TT
^SEQLOC:CHKBRD
	XOR T,TT
	TRNE T,770000		;LETTERS SHOULD BE THE SAME
	POPJ P,			;ELSE NOT IN SEQUENCE
	XOR T,TT
	SUB TT,T
	CAIN TT,1
	AOS (P)
	POPJ P,

^CONGIN:CHKBRD
	PUSH P,A
	HRRZ A,A
	JUMPE A,CONG1
	TRNN A,2
	JRST [	TRC A,3
		JRST CONG3]
	LSH A,-6
	ANDI A,77
	ADDI A,1
	CAIG A,=18
	JRST [	LSH A,6
		TRO A,1
		DPB A,[POINT 12,(P),35]
		POP P,A
		JRST CPOPJ1]
	LDB A,[POINT 6,(P),23]
	ADDI A,1
	PUSH P,T
	LDB T,[POINT 3,-1(P),11]		;GET EXTENT
	CAIG A,1(T)			;DOES THIS PADDLE EXIST?
	JRST [	POP P,T
		JRST CONG2]
	POP P,T
	POP P,A
	POPJ P,

;VARIOUS FLAVORS OF RETURN FOR CONGIN

CONG1:	HRRZ A,L2N-"A"+"A"
CONG2:	LSH A,6
	IOR A,L2N-"A"+"A"
	HRRZ A,A		;CLEAR ANY LH GARBAGE
	LSH A,6
	TRO A,1
CONG3:	HRRM A,(P)
	POP P,A
	JRST CPOPJ1

;CALL WITH C(A) POINTER TO LAST PIN GENERATED
DEC,<
^UGIN:	CHKBRD
	TRNE A,OUTLD
	JRST [	MOVEI A,UGINP2
		JRST UGIN1]
	TRNE A,TERM
	JRST [	MOVEI A,UGINP3
		JRST UGIN1]
	MOVEI A,UGINP1
UGIN1:	SKIPGE (A)
	POPJ P,			;RAN OUT
	PUSH P,T
	HLRZ T,(A)
	ADDI T,1
	CAMLE T,1(A)			;OVERFLOW?
	JRST UGINER
	HRLM T,(A)
	POP P,T
	MOVE A,(A)
	JRST CPOPJ1

UGINER:	POP P,T
	SETOM (A)
	OUTSTR[ASCIZ/RAN OUT OF GENERATED "U" PINS IN THE RANGE /]
	OUTSTR 2(A)
	OUTSTR[ASCIZ/.
NO MORE PINS WILL BE GENERATED IN THIS RANGE.
/]
	POPJ P,

^UGINSET:CHKBRD
	HRRZ T,L2N-"A"+"U"
	LSH T,14
	HRLI T,4000+0
	MOVEM T,UGINP1
	HRLI T,4000+=199
	MOVEM T,UGINP2
	HRLI T,4000+=399
	MOVEM T,UGINP3
	POPJ P,

UGINP1:	0
	4000+=199
	ASCIZ/U100-U199/

UGINP2:	0
	4000+=399
	ASCIZ/U200-U399/

UGINP3:	0
	4000+=599
	ASCIZ/U400-U599/
>;DEC
>;MWL
SUBTTL	SLTOUT -- PRINTS DIP BAY/RACK/SLOT #

COMMENT 

|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
|				   18      21        26    29          35
|                 18		    |   4   |    5    |  3  |     6     |
|___________________________________|_______|_________|_____|___________|
		  |			|	 |	 |	  |
<		  |			|	 |	 |	  |------># SLOT
		  |			|	 |	 |
<		  |			|	 |	 |--------------->L +RACK
		  |			|	 |
<		  |			|	 |----------------------->L RACK
		  |			|
<		  |			|--------------------------------># BAY
		  |
<		  |------------------------------------------------------>NOT USED

^SLTOUT:CHKBRD
	LDB T,[POINT 4,A,21]
	JUMPE T,.+2
	PUSHJ P,PUTDEC
	LDB TT,[POINT 5,A,26]
MDPC,<	JUMPE TT,CPOPJ	>
	PUTBYT @N2L(TT)
	LDB TTT,[POINT 3,A,29]
	JUMPE TTT,SLTOU1
	ADD TT,TTT
	PUTBYT @N2L(TT)
SLTOU1:	MOVEI T,2
	MOVEM T,NDIG
	LDB T,[POINT 6,A,35]
	JRST NPUTDEC
SUBTTL	CSLTOUT -- PRINTS CONNECTOR PIN BAY/RACK/SLOT #

COMMENT 

|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
|	    |			   18      21        26    29          35
|     6     |          12	    |   4   |    5    |  3  |     6     |
|___________|_______________________|_______|_________|_____|___________|
      |			|		|	 |	 |	  |
<     |			|		|	 |	 |	  |------># SLOT
      |			|		|	 |	 |
<     |			|		|	 |	 |--------------->L +RACK
      |			|		|	 |
<     |			|		|	 |----------------------->L RACK
      |			|		|
<     |			|		|--------------------------------># BAY
      |			|
<     |			|------------------------------------------------>NOT USED
      |
<     |------------------------------------------------------------------>L PADDLE

MD,<
CSLTOUT:
	JRST SLTOUT			;DO SAME AS BODY LOC.
IFN 0,<;REMOVE BY R HELLIWELL 31 MAR 75
;CONFUSING BECAUSE DISPLAYED AND PLOTTED CONNECTOR PIN DESIGNATOR
;WERE DIFFERENT FROM TYPEIN AND TYPEOUT.
	TRNN A,-1
	POPJ P,
	LDB T,[POINT 3,A,29]
	LDB TT,[POINT 6,A,5]
DEC,<	TLNN A,4000	>		;"U" PIN?
	CAILE TT,1(T)			;ON BACK PANEL?
	JRST SLTOUT			;NO, TREAT LIKE A BODY
	LDB T,[POINT 4,A,21]		;SHOW ACTUAL BACKPANEL RACK LETTER
	SKIPE T
	PUSHJ P,PUTDEC
	LDB TT,[POINT 5,A,26]
	LDB T,[POINT 6,A,5]
	ADDI TT,-1(T)
	PUTBYT @N2L(TT)
	LDB T,[POINT 6,A,35]
	JRST PUTDEC
>;IFN 0
>;MD
;CHECK TO MAKE SURE CHRREG IS A LETTER (CONVERTS LOWER CASE)

CHKLET:CAIL CHRREG,"a"		;CHECK FOR LOWER CASE
	CAILE CHRREG,"z"
	CAIA			;NOT LOWER CASE
	SUBI CHRREG,<"a"-"A">	;CONVERT TO UPPER CASE
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	JRST CPOPJ1		;ITS LEGAL

TWOLET:ROT CHRREG,-7*2	;MAKE IT ASCII
	MOVSI NUMREG,-TWOLEN
TWOLT1:	CAME CHRREG,TWOTAB(NUMREG)
	AOBJN NUMREG,TWOLT1
	JUMPGE NUMREG,CPOPJ
	MOVEI NUMREG,40(NUMREG)
	JRST CPOPJ1

TWOTAB:	ASCII/BT/
	ASCII/CB/
	ASCII/CR/
	ASCII/DL/
	ASCII/FC/
	ASCII/TP/
REPEAT 40-<.-TWOTAB>,<ASCII/??/>
TWOLEN__.-TWOTAB

MDPC,<
;THE CANONICAL DIP LOC READER WHERE DIP LOC IS OF FORM L#
;SLTLN -- READS A BAY/RACK/SLOT/DIPLOC OR JUST A DIPLOC
;CALL IS:
;	PUSHJ P,SLTLN
;	JRST ERROR
;	JRST CRLF.ONLY
;MD,<	JFCL	>	;LOC ONLY
;	(BRS,,LOC IN DESTIN)

SLTLN:	SETZM DESTIN
MPC,<	GETCH	>
MD,<	GETNUM
	CAIL NUMREG,20
	POPJ P,
	DPB NUMREG,[POINT 4,DESTIN,3]
>;MD
	CAIN CHRREG,12
	JUMPE NUMREG,CPOPJ1
	PUSHJ P,CHKLET
	POPJ P,
MD,<	PUSH P,D
	SKIPN D,L2N-"A"(CHRREG)
	JRST POPDJ
	DPB D,[POINT 5,DESTIN,8]
	GETNUM
	PUSHJ P,CHKLET
	JRST SLTLN1
	JUMPL D,SLTLN3		;GIOQ ILLEGAL FOR BRS
	POP P,D
	JUMPN NUMREG,SLTLN2
	LDB NUMREG,[POINT 5,DESTIN,8]
	SKIPN CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	JUMPL CHRREG,[SUB CHRREG,NUMREG
		JRST SLTLN4]
	SUB CHRREG,NUMREG
	JUMPLE CHRREG,SLTLN4
	CAILE CHRREG,7	
	JRST SLTLN4
	DPB CHRREG,[POINT 3,DESTIN,11]
	GETNUM
	JUMPE NUMREG,CPOPJ
	PUSHJ P,CHKLET
	JRST SLTLN8
SLTLN2:	CAILE NUMREG,77
	POPJ P,
	DPB NUMREG,[POINT 6,DESTIN,17]
>;MD
	SKIPN CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	DPB CHRREG,[POINT 6,DESTIN,23]
	GETNUM
	JUMPE NUMREG,SLTLN5
SLTLN7:	CAILE NUMREG,7777
	POPJ P,
	DPB NUMREG,[POINT 12,DESTIN,35]
MD,<	HLRZ NUMREG,DESTIN
	JUMPN NUMREG,CPOPJ3	;THIS RETURN IF BRS TYPED
>;MD
	JRST CPOPJ2		;THIS RETURN IF PC OR NO BRS

SLTLN5:	LDB NUMREG,[POINT 6,DESTIN,23]
	MOVE NUMREG,N2L(NUMREG)
	LSH NUMREG,7
	IOR CHRREG,NUMREG
	PUSHJ P,TWOLET
	POPJ P,
	DPB NUMREG,[POINT 6,DESTIN,23]
	GETNUM
	JUMPN NUMREG,SLTLN7
	POPJ P,

MD,<
SLTLN1:	POP P,D
	JUMPE NUMREG,CPOPJ
	CAILE NUMREG,7777
	POPJ P,
	DPB NUMREG,[POINT 12,DESTIN,35]
	LDB NUMREG,[POINT 9,DESTIN,8]
	CAIL NUMREG,40
	POPJ P,
	DPB NUMREG,[POINT 24,DESTIN,23]
	JRST CPOPJ2

SLTLN3:	MOVE D,N2L(D)		;GET LETTER BACK
	LSH D,7
	IOR CHRREG,D		;PUT 2 LETTERS IN CHRREG
	POP P,D			;RESTORE D
	PUSHJ P,SLTLN6
	POPJ P,
	JRST SLTLN9

SLTLN4:	PUSHJ P,SLTLN0
	POPJ P,
SLTLN9:	GETNUM
	JUMPN NUMREG,SLTLN7
	POPJ P,

SLTLN8:	PUSH P,NUMREG
	PUSH P,CHRREG
	LDB NUMREG,[POINT 5,DESTIN,8]
	LDB CHRREG,[POINT 3,DESTIN,11]
	PUSHJ P,SLTLN0
	JRST [	POP P,CHRREG
		POP P,NUMREG
		POPJ P,]
	POP P,CHRREG
	POP P,NUMREG
	JRST SLTLN7

SLTLN0:	ADD CHRREG,NUMREG	;GET NUMBER BACK
	MOVE NUMREG,N2L(NUMREG)	;GET FIRST LETTER BACK
	MOVE CHRREG,N2L(CHRREG)	;GET SECOND LETTER BACK
	LSH NUMREG,7
	IOR CHRREG,NUMREG
SLTLN6:	LDB NUMREG,[POINT 4,DESTIN,3]
	JUMPN NUMREG,CPOPJ
	PUSHJ P,TWOLET
	POPJ P,
	DPB NUMREG,[POINT 24,DESTIN,23]
	JRST CPOPJ1

POPDJ:	POP P,D
	POPJ P,
>;MD
>;MDPC

;GETSLT -- READS A BAY/RACK/SLOT #

;CALL IS:
;	PUSHJ P,GETSLT
;	JRST ERROR
;	JUMPE TT,CRLF.ONLY	;THIS IS OPTIONAL, OBVIOUSLY
;	MOVEM TT,BRS

MWL,<
^GTSLTT:
	CHKBRD
	SETZM DESTIN
	TGETNUM
	JRST GTSLT1
>;MWL

^GETSLT:CHKBRD
	SETZM DESTIN
	GETNUM
GTSLT1:	DPB NUMREG,[POINT 4,DESTIN,3]
	PUSHJ P,CHKLET
	JRST [	JUMPE NUMREG,CPOPJ1
		POPJ P,]
	SKIPG CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	DPB CHRREG,[POINT 5,DESTIN,8]
	GETNUM
	JUMPN NUMREG,GTSLT2
	PUSHJ P,CHKLET
	POPJ P,
	SKIPG CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	LDB NUMREG,[POINT 5,DESTIN,8]
	SUB CHRREG,NUMREG
	JUMPL CHRREG,CPOPJ
	CAILE CHRREG,7
	POPJ P,
	DPB CHRREG,[POINT 3,DESTIN,11]
	GETNUM
GTSLT2:	DPB NUMREG,[POINT 6,DESTIN,17]
	JRST CPOPJ1
MD,<
;	PUSHJ P,RDLLN
;	    ERROR RETURN
;	    SUCCESS RETURN

RDLLN:	PUSHJ P,CHKLET
	POPJ P,
	SKIPG CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	DPB CHRREG,[POINT 12,DESTIN,29]
	GETNUM
	JUMPN NUMREG,CKCR
	PUSHJ P,CHKLET
	POPJ P,
	LDB TT,[POINT 6,DESTIN,29]
	DPB TT,[POINT 6,DESTIN,23]
	SKIPG CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	DPB CHRREG,[POINT 6,DESTIN,29]
	GETNUM
	JUMPE NUMREG,CPOPJ
CKCR:
DEC,<	LDB TT,[POINT 12,DESTIN,29]
	XOR TT,L2N+"U"-"A"
	TRNN TT,-1			;SAME LETTER?
	JRST [	CAILE NUMREG,3777	;YES, LEGAL NUMBER?
		POPJ P,			;NO
		HRRZ TT,L2N+"U"-"A"
		DPB TT,[POINT 6,DESTIN,23]
		TRO NUMREG,4000
		DPB NUMREG,[POINT 12,DESTIN,35]
		JRST CPOPJ1]
>;DEC
	CAILE NUMREG,77
	POPJ P,
	DPB NUMREG,[POINT 6,DESTIN,35]
	JRST CPOPJ1
>;MD
SUBTTL	PUTDEC,NPUTDEC -- DECIMAL OUTPUT ROUTINES

^PUTDEC:SETZM NDIG
^NPUTDEC:
	SKIPGE T
	PUTBYT "-"
	MOVM T,T
NPUTD1:	IDIVI T,=10
	HRLM TT,(P)
	SOSG NDIG
	JUMPE T,.+2
	PUSHJ P,NPUTD1
	HLRZ TT,(P)
	MOVEI TTT,"0"(TT)
	XCT PUTCHR
	POPJ P,

MWL,<
	^DECOUT_PUTDEC
	^NDECOUT_NPUTDEC
>;MWL

MWL,<

DEFINE SETPAD(NPADS)
<	IFL MAXPAD-<NPADS>,<PRINTS /MAXPAD NOT LARGE ENOUGH.
/>
	NPADS
>

^^WIRGND:	-1		;DEFAULT WIRE GROUNDS FOR DEC BOARDS
^^LNGRID:	0		;-1 ENABLES LETTER NUMBER GRID

^WWCTV__.

^ISWW:		0		;FLAGS IF WIRE WRAP OR PC BOARD
^WWINIT:	JRST NBOARD	;THE WIRE WRAP TRANSFER VECTOR
^MAPRC:		JRST NBOARD
^MAPPAD:	JRST NBOARD
^PINMAP:	JRST NBOARD
^PINBIT:	JRST NBOARD
^VGCON:		JRST NBOARD
^DSTCLC:	JRST NBOARD
^FPWR:		JRST NBOARD
^FGND:		JRST NBOARD
^PGPRTM:	JRST NBOARD
^PGPRNT:	JRST NBOARD
^GNDCLR:	JRST NBOARD
^WAGGND:	JRST NBOARD
^GNDOUT:	JRST NBOARD
^VCCOUT:	JRST NBOARD
^RAYGEN:	JRST NBOARD	;RAYTHEON PRINT GENERATED PIN
	NWBLEN__.-WWINIT
^NROWS:		0
^NCOLS:		0
^NCLPRG:	0
DIPSLT:	0		;SHOULD NOT NEED TO BE UP ARROWED
^NPADS:		0
^PADLET:	0
^PADPIN:	0
^FRACTN: 	0		;WIRE LENGTH FRACTION
^WRAPMG:	0		;ADDITIONAL WIRE LENGTH FOR INSULATION AROUND POST
^POSTMG:	0		;ADDITIONAL WIRE LENGTH FOR BARE WIRE  AROUND POST
	NW0LEN__.-WWINIT-NWBLEN
WTVLEN__.-WWCTV

^WNOBRD:	0
		REPEAT NWBLEN
<		JRST NBOARD
>
		REPEAT NW0LEN
<		0
>
		CHECK(WNOBRD,WTVLEN)

;;;;ASSEMBLER BUG FIX
^^WWCBLT:	BLT C,WTVLEN-1(B)
		POPJ P,
;;;;END OF ASSEMBLER BUG FIX

ISPC:	OUTSTR [ASCIZ /THIS IS A PC CARD
/]
	JRST ERRET

;SOME HANDY BYTE POINTERS

DEFINE LOW12<[POINT 12,A,35]>		;LOW ORDER 12 BITS OF A
DEFINE B6AT23<[POINT 6,A,23]>
DEFINE B6AT17<[POINT 6,A,17]>
DEFINE B6AT29<[POINT 6,A,29]>

SQRT:	JFFO T,.+2		;GET LOC OF FIRST BIT
	POPJ P,
	MOVNI TTT,(TT)
	ADDI TTT,=35
	ASH TTT,-1
	MOVEI TT,1
	ASH TT,(TTT)
	MOVEI TTT,=3		;3 ITERATIONS FOR NOW
SQRTLP:	MOVE TTTT,TT
	IDIVM T,TTTT
	ADD TT,TTTT
	ASH TT,-1
	SOJG TTT,SQRTLP
	MOVE T,TT
	POPJ P,

NUMPNT:	IDIVI T,=10
	ADDI TT,60
	JUMPE T,.+3
	ADDI T,60
	OUTCHR T
	OUTCHR TT
	POPJ P,
;DISTANCE CALCULATOR FOR ROUTER STUFF
;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G

;CITY BLOCK DISTANCE FOR W940 STUFF

DISTCB:PUSHJ P,PINMAP		;MAP ONE OF THEM
	JRST DSTERR
	HRLM A,(P)
	MOVE A,C		;MOVE IN OTHER POINT
	MOVE B,D
	MOVE C,T		;SAVE X,Y
	MOVE D,TTT		;AND DIST
	PUSHJ P,PINMAP
	JRST DSTERR
	CAMLE TTT,D
	SKIPA G,D
	MOVE G,TTT
	ASH G,1			;DOUBLE IT (MUST GO TO END AND BACK!)
	HLRE TT,T
	HLRE TTT,C
	SUB TT,TTT
	MOVM TT,TT
	HRRE T,T
	HRRE C,C
	SUB T,C
	MOVM T,T		;THIS IS Y PART
	JUMPE G,DSTCLX
	CAIG T,=250		;IF BIGGER THAN THIS, THEN MIGHT NEED FUDGE
	JRST DSTCLX
	LDB C,[POINT 12,(P),17]
	LDB D,[POINT 12,A,35]
	SUB C,D
	IDIV C,NCOLS
	JUMPN D,DSTCLX		;IF REMAINDER, THEN DIF COLUMNS, AND NO FUDGE
	ADD T,G			;SAME COLUMN, BUT NOT CLOSE ENOUGH, FUDGE AROUND END OF DIP
DSTCLX:	ADD T,TT		;ADD IN X PART
	CAILE T,=8000		;LONGER THAN 8 INCHES?
	ADDI T,=250		;YES, ADD 1/4 INCH
	ADD T,POSTMG		;BARE WIRE TO WRAP AROUND POST
	ADD T,WRAPMG		;INSULATED WIRE TO WRAP AROUND POST
	IMUL T,FRACTN		;MAKE IT FRACTIONS
	IDIVI T,=1000
NOITS,<	SKIPE TT	>	;OVERFLOW?
ITS,<	CAIL TT,=500	>	;ITS LIKES THE WELL ROUNDED APPROACH
	ADDI T,1		;YES, ADD 1
	MOVE G,T
	POPJ P,

DSTERR:	SETZ G,
	POPJ P,

;CALCULATE POINT TO POINT DISTANCE

DISTPP:
	PUSHJ P,PINMAP		;MAP ONE OF THEM
	JRST DSTERR
	MOVE A,C		;GET OTHER POINT
	MOVE B,D
	MOVE C,T		;SAVE X,Y
	PUSHJ P,PINMAP
	JRST DSTERR
	HLRE TT,T
	HLRE TTT,C
	SUB TT,TTT		;GET VERTICAL DISTANCE
	IMUL TT,TT		;SQUARE IT
	HRRE T,T
	HRRE C,C
	SUB T,C			;HORIZONTAL DISTANCE
	IMUL T,T		;SQUARE IT
	ADD T,TT
	JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGH RUNS
	PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
	CAILE T,=8000		;LONGER THAN 8 INCHES?
	ADDI T,=250		;YES, ADD 1/4 INCH
	ADD T,POSTMG		;ADD 1.5" FOR WRAPPING AROUND POSTS
	ADD T,WRAPMG		;ADD SOME TO GO AROUND THE PINS
	IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
	IDIVI T,=1000		; "		"		"
	SKIPE TT		;REMAINDER?
	ADDI T,1		;YES, ROUND UP
DSTIS0:	MOVE G,T
	POPJ P,
>;MWL

;NOW INSERT ALL OF THE APPROPRIATE BOARD FILES

COMMENT   THIS CAUSES COROUTINE PDL OVERFLOW, I DON'T KNOW WHY PJ 8/28/75

DEFINE BRDNAM (NAME,LOCS,WWC,INSERT)
<IFNIDN <> <INSERT> <.INSERT INSERT
>
>;BOARDS

ALLBRDS


.INSERT W940
NODEC,<
.INSERT LEBEL
.INSERT PG21
.INSERT MPG21
.INSERT LG411
>;NODEC

PURGE ALLBRDS,CHECK
