begin "concep"

	require "baysai.sai[a709sa00]" source!file;
	source!L(strfil);

own string array message[1:100];

define linewidth=55%6;

define debug=0;

simple procedure Justify(string S);
begin "justify"
	integer CNT;
	integer ADDON;
	integer i;
	string T;

	ifc DEBUG thenc
	outstr("Justify """&S&""""&CRLF);
	endc
	for i_1 thru 100 do Message[i]_null;
	i_1;

	while length(S)>0 do
		begin "do justify"
		ifc DEBUG thenc
		outstr("i="&cvs(i)&", S="""&S&""", l(M[i])="&cvs(length(Message[i]))&CRLF);
		endc
		if S=" " then
		    begin
			ZILCH_lop(S);
			continue "do justify";
		    end;
		CNT _ index1(S," ");
		if CNT = 0 or CNT > LineWidth then
		    begin 
		    CNT _ LineWidth min length(S);
		    T _ S[1 for CNT];
		    S _ S[CNT+1 to inf];
		    end
		   else
		    begin
			T _ S[1 to CNT-1];
			S _ S[CNT+1 to inf];
		    end;
		
		ADDON _ (if length(Message[i]) then 1 else 0);
		if length(Message[i])+length(T)+ADDON > LineWidth
		    then
			begin
			i _ i+1;
			Message[i] _ T;
			end
		    else
			begin
			Message[i]_Message[i]&(if ADDON then " " else null)&T;
			end;
		end "do justify";
end "justify";

preload!with
! CHAR=0;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=1;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=2;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=3;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=4;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=5;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=6;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=7;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",

! CHAR=10;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=11;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=12;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=13;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=14;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=15;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=16;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=17;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",

! CHAR=20;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=21;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=22;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=23;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=24;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=25;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=26;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=27;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",

! CHAR=30;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=31;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=32;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=33;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=34;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=35;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=36;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=37;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",

! CHAR=40;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=41;
"011000",
"011000",
"011000",
"011000",
"000000",
"011000",
"011000",
! CHAR=42;
"010100",
"010100",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=43;
"010100",
"010100",
"111110",
"010100",
"111110",
"010100",
"010100",
! CHAR=44;
"011100",
"101010",
"101000",
"111100",
"001010",
"101010",
"011100",
! CHAR=45;
"110000",
"110010",
"000100",
"001000",
"010000",
"100110",
"000110",
! CHAR=46;
"001000",
"010100",
"010100",
"010000",
"101000",
"100100",
"011010",
! CHAR=47;
"001000",
"001000",
"000000",
"000000",
"000000",
"000000",
"000000",

! CHAR=50;
"000100",
"001000",
"010000",
"010000",
"010000",
"001000",
"000100",
! CHAR=51;
"010000",
"001000",
"000100",
"000100",
"000100",
"001000",
"010000",
! CHAR=52;
"000000",
"101010",
"011100",
"111110",
"011100",
"101010",
"000000",
! CHAR=53;
"000000",
"001000",
"001000",
"111110",
"001000",
"001000",
"000000",
! CHAR=54;
"000000",
"000000",
"000000",
"000000",
"000000",
"010000",
"100000",
! CHAR=55;
"000000",
"000000",
"000000",
"111110",
"000000",
"000000",
"000000",
! CHAR=56;
"000000",
"000000",
"000000",
"000000",
"000000",
"110000",
"110000",
! CHAR=57;
"000000",
"000010",
"000100",
"001000",
"010000",
"100000",
"000000",

! CHAR=60;
"011100",
"100010",
"100110",
"101010",
"110010",
"100010",
"011100",
! CHAR=61;
"001000",
"011000",
"001000",
"001000",
"001000",
"001000",
"011100",
! CHAR=62;
"011100",
"100010",
"000010",
"000100",
"001000",
"010000",
"111110",
! CHAR=63;
"011100",
"100010",
"000010",
"000100",
"000010",
"100010",
"011100",
! CHAR=64;
"000100",
"001100",
"010100",
"111110",
"000100",
"000100",
"000100",
! CHAR=65;
"111110",
"100000",
"100000",
"111100",
"000010",
"100010",
"011100",
! CHAR=66;
"000010",
"000100",
"001000",
"011100",
"100010",
"100010",
"011100",
! CHAR=67;
"111110",
"000010",
"000010",
"000100",
"001000",
"010000",
"100000",

! CHAR=70;
"011100",
"100010",
"100010",
"011100",
"100010",
"100010",
"011100",
! CHAR=71;
"011100",
"100010",
"100010",
"011100",
"001000",
"010000",
"100000",
! CHAR=72;
"000000",
"110000",
"110000",
"000000",
"000000",
"110000",
"110000",
! CHAR=73;
"000000",
"000000",
"110000",
"110000",
"000000",
"010000",
"100000",
! CHAR=74;
"000100",
"001000",
"010000",
"100000",
"010000",
"001000",
"000100",
! CHAR=75;
"000000",
"000000",
"111110",
"000000",
"111110",
"000000",
"000000",
! CHAR=76;
"100000",
"010000",
"001000",
"000100",
"001000",
"010000",
"100000",
! CHAR=77;
"011100",
"100010",
"000010",
"000100",
"001000",
"000000",
"001000",

! CHAR=100;
"000000",
"000000",
"111110",
"000010",
"111010",
"101010",
"111110",
! CHAR=101;
"011100",
"100010",
"100010",
"111110",
"100010",
"100010",
"100010",
! CHAR=102;
"111100",
"100010",
"100010",
"111100",
"100010",
"100010",
"111100",
! CHAR=103;
"011100",
"100010",
"100000",
"100000",
"100000",
"100010",
"011100",
! CHAR=104;
"111100",
"100010",
"100010",
"100010",
"100010",
"100010",
"111100",
! CHAR=105;
"111110",
"100000",
"100000",
"111100",
"100000",
"100000",
"111110",
! CHAR=106;
"111110",
"100000",
"100000",
"111100",
"100000",
"100000",
"100000",
! CHAR=107;
"011100",
"100010",
"100000",
"100110",
"100010",
"100010",
"011100",

! CHAR=110;
"100010",
"100010",
"100010",
"111110",
"100010",
"100010",
"100010",
! CHAR=111;
"011100",
"001000",
"001000",
"001000",
"001000",
"001000",
"011100",
! CHAR=112;
"000010",
"000010",
"000010",
"000010",
"000010",
"100010",
"011100",
! CHAR=113;
"100010",
"100100",
"101000",
"110000",
"101000",
"100100",
"100010",
! CHAR=114;
"100000",
"100000",
"100000",
"100000",
"100000",
"100000",
"111110",
! CHAR=115;
"100010",
"110110",
"101010",
"100010",
"100010",
"100010",
"100010",
! CHAR=116;
"100010",
"100010",
"110010",
"101010",
"100110",
"100010",
"100010",
! CHAR=117;
"011100",
"100010",
"100010",
"100010",
"100010",
"100010",
"011100",

! CHAR=120;
"111100",
"100010",
"100010",
"111100",
"100000",
"100000",
"100000",
! CHAR=121;
"011100",
"100010",
"100010",
"100010",
"101010",
"100100",
"011010",
! CHAR=122;
"111100",
"100010",
"100010",
"111100",
"101000",
"100100",
"100010",
! CHAR=123;
"011100",
"100010",
"100000",
"011100",
"000010",
"100010",
"011100",
! CHAR=124;
"111110",
"001000",
"001000",
"001000",
"001000",
"001000",
"001000",
! CHAR=125;
"100010",
"100010",
"100010",
"100010",
"100010",
"100010",
"011100",
! CHAR=126;
"100010",
"100010",
"100010",
"100010",
"100010",
"010100",
"001000",
! CHAR=127;
"100010",
"100010",
"100010",
"100010",
"101010",
"110110",
"100010",

! CHAR=130;
"100010",
"100010",
"010100",
"001000",
"010100",
"100010",
"100010",
! CHAR=131;
"100010",
"100010",
"010100",
"001000",
"001000",
"001000",
"001000",
! CHAR=132;
"111110",
"000010",
"000100",
"001000",
"010000",
"100000",
"111110",
! CHAR=133;
"011100",
"010000",
"010000",
"010000",
"010000",
"010000",
"011100",
! CHAR=134;
"000000",
"100000",
"010000",
"001000",
"000100",
"000010",
"000000",
! CHAR=135;
"011100",
"000100",
"000100",
"000100",
"000100",
"000100",
"011100",
! CHAR=136;
"001000",
"010100",
"100010",
"000000",
"000000",
"000000",
"000000",
! CHAR=137;
"000000",
"000000",
"000000",
"000000",
"000000",
"000000",
"111111",

! CHAR=140;
"001000",
"000100",
"000000",
"000000",
"000000",
"000000",
"000000",
! CHAR=141 "a";
"000000",
"000000",
"000000",
"011110",
"100010",
"100010",
"011111",
! CHAR=142 "b";
"100000",
"100000",
"100000",
"111100",
"100010",
"100010",
"111100",
! CHAR=143 "c";
"000000",
"000000",
"000000",
"011110",
"100000",
"100000",
"011110",
! CHAR=144 "d";
"000010",
"000010",
"000010",
"011110",
"100010",
"100010",
"011110",
! CHAR=145 "e";
"000000",
"000000",
"000000",
"111110",
"111110",
"100000",
"111110",
! CHAR=146 "f";
"001110",
"001000",
"001000",
"011100",
"001000",
"001000",
"001000",
! CHAR=147 "g";
"000000",
"011110",
"100010",
"100010",
"011110",
"000010",
"111110",

! CHAR=150 "h";
"100010",
"100010",
"100010",
"111110",
"100010",
"100010",
"100010",
! CHAR=151 "i";
"011100",
"001000",
"001000",
"001000",
"001000",
"001000",
"011100",
! CHAR=152 "j";
"000010",
"000010",
"000010",
"000010",
"000010",
"100010",
"011100",
! CHAR=153 "k";
"100010",
"100100",
"101000",
"110000",
"101000",
"100100",
"100010",
! CHAR=154 "l";
"100000",
"100000",
"100000",
"100000",
"100000",
"100000",
"111110",
! CHAR=155;
"100010",
"110110",
"101010",
"100010",
"100010",
"100010",
"100010",
! CHAR=156;
"100010",
"100010",
"110010",
"101010",
"100110",
"100010",
"100010",
! CHAR=157;
"011100",
"100010",
"100010",
"100010",
"100010",
"100010",
"011100",

! CHAR=160;
"111100",
"100010",
"100010",
"111100",
"100000",
"100000",
"100000",
! CHAR=161;
"011100",
"100010",
"100010",
"100010",
"101010",
"100100",
"011010",
! CHAR=162;
"111100",
"100010",
"100010",
"111100",
"101000",
"100100",
"100010",
! CHAR=163;
"011100",
"100010",
"100000",
"011100",
"000010",
"100010",
"011100",
! CHAR=164;
"111110",
"001000",
"001000",
"001000",
"001000",
"001000",
"001000",
! CHAR=165;
"100010",
"100010",
"100010",
"100010",
"100010",
"100010",
"011100",
! CHAR=166;
"100010",
"100010",
"100010",
"100010",
"100010",
"010100",
"001000",
! CHAR=167;
"100010",
"100010",
"100010",
"100010",
"101010",
"110110",
"100010",

! CHAR=170;
"100010",
"100010",
"010100",
"001000",
"010100",
"100010",
"100010",
! CHAR=171;
"100010",
"100010",
"010100",
"001000",
"001000",
"001000",
"001000",
! CHAR=172;
"111110",
"000010",
"000100",
"001000",
"010000",
"100000",
"111110",
! CHAR=173;
"000100",
"001000",
"001000",
"110000",
"001000",
"001000",
"000100",
! CHAR=174;
"001000",
"001000",
"001000",
"001000",
"001000",
"001000",
"001000",
! CHAR=175;
"010000",
"001000",
"001000",
"000100",
"001000",
"001000",
"010000",
! CHAR=176;
"000000",
"111000",
"001110",
"000000",
"000000",
"000000",
"000000",
! CHAR=177;
"111111",
"111111",
"111111",
"111111",
"111111",
"111111",
"111111";

own string array CHARACTERS[0:'177,1:7];

simple procedure ShowText(string Text; integer ScanLine);
begin "showtext"

	string T;
	integer CCOUNT;
	integer LASTCHAR, SHOWCHAR;
	string BitMap;
	integer CHAR;

	T_Text;
	LASTCHAR_0;

	while length(T)>0 do
		begin
		CHAR _ lop(T);

		BitMap _ Characters[CHAR,ScanLine];
		while length(BitMap)>0 do
			begin "dump map"
			if LASTCHAR } (SHOWCHAR_lop(BitMap)) then
			outstr('33&(if SHOWCHAR = "0" then "d" else "D"));
			CCOUNT_1;
			while BitMap = SHOWCHAR do
			    begin
				CCOUNT_CCOUNT+1;
				ZILCH_lop(BitMap);
			    end;
			LastChar _ ShowChar;

			if CCOUNT > 4 then
			    begin
				outstr('33&"r "&(32+CCOUNT));
			    end
			else
			    begin
				for DUM_1 thru CCOUNT do outstr(" ");
			    end;
			end "dump map"
		end;
	outstr(CRLF);
end "showtext";

simple string procedure Fill(integer N);
begin "fill"
	string T;
	integer DUM;
	T_null;
	for dum_1 thru N do T_T&'177;
	return(T);
end "fill";

simple procedure DISPLAY;
begin "display"
	integer LINE;
	integer ScanLine;
	integer CHAR;
	integer LASTCHAR;
	integer NeedCRLF;
	outstr('33&"U");		! programmer mode;
	
	LINE_1;
	LASTCHAR _ 0;
	CHAR _ 0;
	NeedCRLF _ false;

	ifc not DEBUG thenc
	outstr('14);
	endc
	repeat
	    begin "format"
		if LINE>2 then CHAR_INCHRW else CHAR_0;
		if CHAR = '177 or CHAR = '32 then return;
		if CHAR = '14 then
			begin
			LINE_1;
			NeedCrlf _ false;
			continue "format";
			end;
		! scroll up;
		if LINE>3 then
			begin "scroll"
			outstr('33&"?");
			for dum_1 thru 8 do outstr('33&2&Fill(10));
			for dum_1 thru 2*8 do outstr('12);
			NeedCRLF_false;
			end "scroll";
		if NeedCRLF then outstr(CRLF);
		NeedCRLF _ true;
		for ScanLine_1 thru 7 do
		    begin "writetext"
			ShowText(Message[LINE],ScanLine);
		    end "writetext";
		LINE _ LINE+1;
	    end "format";
end "display";

procedure TopLevel;
begin "toplevel"
	string Text;
	outstr("Message: ");
	Text _ INCHWL;
	Justify(TEXT);
	Display;
end "toplevel";

repeat TopLevel;

end "concep";
