00100	@part(D,Root "SUDS.MSS[A210JN11]")
00200	@majorpart(D: the Drawing program)
00300	@pagefooting(immediate,center "D", right "@title(Chapter)")
00303	@equate(Emphasize=U)
00400	@chap(Introduction)
00500	D is the drawing program of SUDS.  Its primary task is to
00600	lay down @i[bodies] which represent circuit functions, and
00700	to lay down @i[lines] which connect the bodies.  Lines
00800	hardly exist; the primary control is the position of @i[points]
00900	which are used to connect lines.
01000	
01100	A @i[body] may be one of several functions in a single
01200	DIP package.  The assignment of bodies to packages and packages
01300	to board positions may be deferred until late in the
01400	design.  Bodies may also be reassigned to packages or packages
01500	reassigned to locations on the board as required.  Bodies
01600	may be moved around on the drawing and the lines connecting
01700	them will follow.
01703	
01706	A @i[body] is created in body edit mode, and consists of a set
01709	of @i[points] which are logical pin names (not necessarily
01712	physical pin names) to which signals may be attached.  In addition,
01715	since bodies are intended for use in drawings, a set of lines
01718	may be constructed to represent the logical function, and
01721	text may be added to clarify the purpose of the input and
01724	output pins.  More about this may be found in the discussion
01727	of body-edit mode, chapter @ref(EditMode), page @pageref(editmode).
01730	
01733	Although in theory a drawing can be done on a "bare" version
01736	of the drawing program, in practice one does not wish to create
01739	a new body for each function.  Therefore, bodies are collected
01742	into @i[libraries] and the libraries may be loaded to make the
01745	body definitions available.  Libraries are discussed more in
01748	chapter @ref(Libraries), page @pageref(libraries).
01751	
01800	
01900	Bodies and points may be formed into @i[sets] which represent
02000	pieces of the drawing.  These sets may be moved, stored in
02100	files, copied, or deleted; these all provide powerful editing
02200	facilities at the drawing level.
02300	
02400	@sec(Modes and their uses)
02500	While editing a drawing, the program is in one of several 
02600	@i[modes].
02700	
02800	
02900	@i[Point mode] is used to place points and draw lines (wires)
03000	between them.  Points may be moved around, and if wires or
03100	text (signal names) are attached, these will be moved around
03200	to follow them.  A line can contain several points, and
03300	thus be made of several collinear line segments.  This may
03400	or may not be an advantage.
03500	
03600	Signal names are associated with points.  Normally, they are
03700	associated with a point which represents a signal
03800	either entering or leaving a drawing.
03900	For purposes of documentation and explanation, signals
04000	may also appear on points inside the drawing.
04100	
04200	@i[Body mode] is used to place the bodies which are 
04300	(normally) connected by the lines one wishes to draw.  Bodies
04400	can be put down, rotated, reflected, moved, etc.  
04500	You also use body mode to assign bodies to IC packages (and thus
04600	assign real pin numbers to them).
04603	IC packages are also assigned to physical board locations in this
04606	mode.
04800	
04900	
05000	@i[Set mode] is used to define a group of points and bodies
05100	as a set which is to be operated on as a unit.  Usually this is
05200	used to move a set of points around, because they aren't where
05300	they should be, but it is also used to delete sets of points and
05400	bodies, duplicate them,  or to save them on a file (e.g., you have a useful subcircuit you
05500	want to store away so you won't have to redraw it...)
05600	
05700	@i[Edit mode] is used to create or edit a body definition.
05800	
05900	@i[Body Text/Property mode] is used to edit a particular
06000	instance of a body in a drawing.
06100	
06200	@i[Line mode] is used to do some very simple manipulations on
06300	lines.  This consists mostly of inserting points into lines so
06400	the more powerful point mode commands can be used.
06500	
06600	Macros are supplied in a rather obscure fashion, and are used 
06700	primarily for repetitive operations, such as laying down busses,
06800	multiple signal wires, etc.
06900	
07000	@sec(Notation conventions)
07100	
07200	@index(, defined)
07250	@index(Alpha, defined)
07253	@indexentry(key "Alpha, defined",entry ", defined",number)
07300	@index(, defined)
07350	@index(Beta, defined)
07353	@indexentry(key "Beta, defined",entry ", defined",number)
07400	@index(, defined)
07450	@index(Epsilon, defined)
07453	@indexentry(key "Epsilon, defined",entry ", defined",number)
07500	
07600	The multiple shift keys of the GDP keyboard are used to
07700	modify the actions taken.  In this manual, the "control"
07800	key is indicated by the symbol "", the "meta" key
07900	by the symbol "", and the combination of the meta and
08000	control keys by the symbol "".  In addition, if you
08100	are trying to run from a standard terminal (such as
08200	producing plot files in case you forgot to do so at a
08300	graphics), the following equivalences may be used:
08400	@enter(description)
08500	@index(', )
08525	@label(Apostrophes)
08550	@index(Alpha, ')
08600	@index(Apostrophe)
08700	   '
08800	
08900	@index('', )
08950	@index(Beta, '')
09000	   ''
09100	
09200	@index(''', )
09250	@index(Epsilon, ''')
09300	   '''
09400	
09500	@index('''', ')
09550	@index(Apostrophe, '''')
09600	'    ''''
09700	@leave(description)
09800	
09803	In addition, those commands which are of the most use to a beginner
09806	are emphasized @emphasize[like this] in the enumerations of commands.
     	00100	@chap(Window operations)
00200	@pagefooting(immediate,left "=control, =meta, =meta-control", center "D", right "@title(Chapter)")
00300	
00400	@sec(Motion)@label(windowmotion)
00500	These commands move the picture around in the graphics "window".
00600	You can draw more than you can show on the screen, so this allows
00700	you to move the drawing around@foot<Or move the window around
00703	on the drawing.  It all depends upon how you think about it.
00706	The effect is the same.>.  These commands can be issued
00800	in any mode, at any time.
00900	These commands can be accompanied by scaling factors defined
01000	by the meta (), control (), or meta-control () keys:
01100	@enter(descriptioN)
01200	(nothing)   1/8 window
01300	
01400	 (control)   1/4 window
01500	
01600	 (meta)   1/2 window
01700	
01800	 (meta-control)   1 window
01900	@leave(description)
02000	
02100	The motion commands are@foot<Note that the "top" key must be used to type these characters.
02200	>:
02300	@enter(description)
02400	@index(Left window) @index(Window, move left) @index(Move window left)
02500	@index(Moving a drawing)
02600	@index(Drawing, moving)
02700	@index(Moving the window)
02800	@index(Window, moving)
02900	@index(_, move window left)
03000	@index(_, left window 1/4)
03050	@indexentry(key "_, left window 1/4",entry "_, left window 1/4",number)
03100	@index(_, left window 1/2)
03150	@indexentry(key "_, left window 1/2",entry "_, left window 1/2",number)
03200	@index(_, left window 1)
03250	@indexentry(key "_, left window 1",entry "_, left window 1",number)
03300	_   left
03400	
03500	@index(Right window) @index(Window, move right) @index(Move window right)
03600	@index(, move window Right)
03700	@index(, right window 1/4)
03750	@indexentry(key ", right window 1/4", entry ", right window 1/4",number)
03800	@index(, right window 1/2)
03850	@indexentry(key ", right window 1/2", entry ", right window 1/2",number)
03900	@index(, right window 1)
03950	@indexentry(key ", right window 1", entry ", right window 1",number)
04000	   right
04100	
04200	@index(Up window) @index(Window, move up) @index(Move window up)
04300	@index(^, move window up)
04400	@index(^, up window 1/4)
04450	@indexentry(key "^, up window 1/4",entry "^, up window 1/4", number)
04500	@index(^, up window 1/2)
04550	@indexentry(key "^, up window 1/2",entry "^, up window 1/2", number)
04600	@index(^, up window 1)
04650	@indexentry(key "^, up window 1",entry "^, up window 1", number)
04700	^   up
04800	
04900	@index(Down window) @index(Window, move down) @index(Move window down)
05000	@index(, move window down)
05100	@index(, down window 1/4)
05150	@indexentry(key ", down window 1/4", entry ", down window 1/4",number)
05200	@index(, down window 1/2)
05250	@indexentry(key ", down window 1/2", entry ", down window 1/2",number)
05300	@index(, down window 1)
05350	@indexentry(key ", down window 1", entry ", down window 1",number)
05400	   down
05500	
05600	@index(C, center cursor)
05700	@label(BetaC)
05750	@indexentry(key "C, center cursor",entry "C, center cursor",number)
05800	C   Moves the cursor and the point in the drawing at which it
05900	is set to the physical center of the screen.
06000	
06100	@index(Drawing, centering)@index(Centering the drawing)
06200	@emphasize[XPICCEN]   Centers the picture in the box in which it will be
06300	plotted, and centers the box on the display.  See page @pageref(XPICCEN).
06400	@leave(description)
06500	
06600	In addition, certain commands, such as F in body
06700	or point  mode (see pages @pageref(AlphaFPoint) and @pageref(AlphaFBody)) may cause
06800	the drawing to move under the window in order that the
06900	marked body or point is on-screen.
07000	
07100	@sec(Scaling)@label(scaling)
07200	
07300	The following commands scale the size of the drawing.  Scale by 
07400	steps of 4 (4,8,12,16) is recommended for actual drawings, but
07500	for screen use anything that is convenient is probably alright.
07600	@enter(description,group)
07700	@index(*, scale smaller)
07800	@index(Scale smaller)
07900	*   Scale - 1
08000	
08100	@index(*, scale*.8)
08150	@indexentry(key "*, scale*.8",entry "*, scale*.8",number)
08200	*   Scale * 4/5    (.8)
08300	
08400	@index(*, scale*.67)
08450	@indexentry(key "*, scale*.67",entry "*, scale*.67",number)
08500	*   Scale * 2/3    (.67)
08600	
08700	@index(*, scale*.5)
08750	@indexentry(key "*, scale*.5",entry "*, scale*.5",number)
08800	*   Scale * 1/2    (.5)
08900	
09000	@index(, scale larger)
09100	   Scale + 1
09200	
09300	@index(, scale*1.25)
09350	@indexentry(key ", scale*1.25",entry ", scale*1.25",number)
09400	   Scale * 5/4    (1.25)
09500	
09600	@index(, scale*1.5)
09650	@indexentry(key ", scale*1.5",entry ", scale*1.5",number)
09700	   Scale * 3/2    (1.5)
09800	
09900	@index(, scale*2)
09950	@indexentry(key ", scale*2",entry ", scale*2",number)
10000	   Scale * 2   
10100	
10150	@index(PBOX)@index(XPBOX)
10175	
10200	XPBOX   Asks for the desired box for plotting, then scales the drawing
10300	to fit; see page @pageref(XPBOX).
10400	
10403	@index(XSCALE)@index(SCALE)
10406	
10500	@emphasize[XSCALE]   Asks for the desired scale size and scales the drawing to that size.
10600	
10603	@index(XSHOWBOX)@index(SHOWBOX)
10700	XSHOWBOX   Displays the box used for plotting around the drawing.  May
10800	rescale the drawing; see page @pageref(XSHOWBOX).
10900	@leave(description)
11000	
11100	@sec(Other window operations)
11200	
11300	@enter(description)
11400	@index(!, redraw picture)@index(Redraw picture, !)
11403	@indexentry(key "!, redraw picture", entry "!, redraw picture",number)
11406	
11500	@emphasize[!]   Redraw picture.  This is useful if the program has forgotten
11600	to update the display, or the display has been garbaged by a
11700	flaky GDP or bad transmission of the display list.
11800	
11900	@index(Screen, clearing)@index(Clearing the screen)
11903	@index(XCLEAR)@index(CLEAR)
11906	
12000	@emphasize[XCLEAR]   Clears the screen; resets all values to their startup
12100	defaults; see page @pageref(XCLEAR).
12200	
12203	@index(XWINDOW)@index(WINDOW)
12206	
12300	XWINDOW   Restricts operations to that portion of drawing that is
12400	visible in the window; see page @pageref(XWINDOW).
12500	
12503	@index(X-WINDOW)
12504	@indexentry(key "XWINDOW-",entry "X-WINDOW",number)
12505	@index(-WINDOW)@indexentry(key "WINDOW-",entry "-WINDOW",number)
12506	
12600	X-WINDOW   Permits operations to affect the entire drawing, not just
12700	the porition visible in the window.
12800	@leave(description)
12900	
     	00100	@chap(Cursor operations)
00200	
00300	The cursor moving is scaled by the following keys:
00400	@enter(description)
00500	<nothing>   1 step
00600	
00700	   2 steps
00800	
00900	   4 steps
01000	
01100	   8 steps
01200	
01300	<top>   16 steps
01400	
01500	<top>   32 steps
01600	
01700	<top>   64 steps
01800	
01900	<top>   128 steps
02000	@leave(description)
02100	
02200	The cursor movement commands are selected to be the keys in the
02300	order left,right,up,down.
02400	
02500	@enter(description)
02600	@index(Cursor, moving)
02700	@index(Moving the cursor)
02800	@index[(, cursor left]
02900	@index(Left cursor)
03000	@index(Cursor left)
03100	@index<(, cursor left 2>
03150	@indexentry<key "(, cursor left 2",entry "(, cursor left 2",number>
03200	@index<(, cursor left 4>@indexentry<key "(, cursor left 4",entry "(, cursor left 4",number>
03300	@index<(, cursor left 8>@indexentry<key "(, cursor left 8",entry "(, cursor left 8",number>
03400	@index<[, cursor left 16>
03500	@index<[, cursor left 32>@indexentry<key "[, cursor left 32",entry "[, cursor left 32",number>
03600	@index<[, cursor left 64>@indexentry<key "[, cursor left 64",entry "[, cursor left 64",number>
03700	@index<[, cursor left 128>@indexentry<key "[, cursor left 128",entry "[, cursor left 128",number>
03800	(   Cursor left
03900	
04000	@index[), cursor right]
04100	@index(Right cursor)
04200	@index(Cursor right)
04300	@index<), cursor right 2>@indexentry<key "), cursor right 2",entry "), cursor right 2",number>
04400	@index<), cursor right 4>@indexentry<key "), cursor right 4",entry "), cursor right 4",number>
04500	@index<), cursor right 8>@indexentry<key "), cursor right 8",entry "), cursor right 8",number>
04600	@index<], cursor right 16>
04700	@index<], cursor right 32>@indexentry<key "], cursor right 32",entry "], cursor right 32",number>
04800	@index<], cursor right 64>@indexentry<key "], cursor right 64",entry "], cursor right 64",number>
04900	@index<], cursor right 128>@indexentry<key "], cursor right 128",entry "], cursor right 128",number>
05000	)   Cursor right
05100	
05200	@index[/, cursor up]
05300	@index(Cursor up)
05400	@index(Up cursor)
05500	@index</, cursor up 2>@indexentry<key "/, cursor up 2",entry "/, cursor up 2",number>
05550	@indexentry(key "/, cursor up 2",entry "/, cursor up 2",number)
05600	@index</, cursor up 4>@indexentry<key "/, cursor up 4",entry "/, cursor up 4",number>
05650	@indexentry(key "/, cursor up 4",entry "/, cursor up 4",number)
05700	@index</, cursor up 8>@indexentry<key "/, cursor up 8",entry "/, cursor up 8",number>
05750	@indexentry(key "/, cursor up 8",entry "/, cursor up 8",number)
05800	@index<, cursor up 16>
05900	@index<, cursor up 32>@indexentry<key ", cursor up 32",entry ", cursor up 32",number>
05950	@indexentry(key ", cursor up 32",entry ", cursor up 32",number)
06000	@index<, cursor up 64>@indexentry<key ", cursor up 64",entry ", cursor up 64",number>
06050	@indexentry(key ", cursor up 64",entry ", cursor up 64",number)
06100	@index<, cursor up 128>@indexentry<key ", cursor up 128",entry ", cursor up 128",number>
06150	@indexentry(key ", cursor up 128",entry ", cursor up 128",number)
06200	/   Cursor up
06300	
06400	@index[\, cursor down]
06500	@index(Cursor down)
06600	@index(Down cursor)
06700	@index<\, cursor down 2>@indexentry<key "\, cursor down 2",entry "\, cursor down 2",number>
06800	@index<\, cursor down 4>@indexentry<key "\, cursor down 4",entry "\, cursor down 4",number>
06900	@index<\, cursor down 8>@indexentry<key "\, cursor down 8",entry "\, cursor down 8",number>
07000	@index<, cursor down 16>
07100	@index<, cursor down 32>@indexentry<key ", cursor down 32",entry ", cursor down 32",number>
07200	@index<, cursor down 64>@indexentry<key ", cursor down 64",entry ", cursor down 64",number>
07300	@index<, cursor down 128>@indexentry<key ", cursor down 128",entry ", cursor down 128",number>
07400	\   Cursor down
07500	@leave(description)
07600	
07700	In addition, the following operations will reposition the cursor:
07800	@enter(description)
07900	@index(C, center cursor)
07950	@indexentry(key "C, center cursor",entry "C, center cursor",number)
08000	@index(Cursor, centering)
08100	@index(Centering cursor)
08200	C   Move the cursor to the physical center of the screen.
08300	
08400	@index(C, center cursor)
08450	@indexentry(key "C, center cursor",entry "C, center cursor",number)
08500	C   Moves the cursor and the point on the drawing on which it is
08600	set to the center of the screen.
08700	
08800	@label(EpsilonC)
08900	@index(Offset of drawing)
09000	@index(C, center cursor)
09050	@indexentry(key "C, center cursor",entry "C, center cursor",number)
09100	C   Sets the @u[offset] and the cursor position to be (0,0).
09200	Both the cursor and the logical (0,0) are moved to the center of
09300	the screen. 
09400	The @u[offset] represents the part of the drawing which will
09500	be in the center of the screen when the drawing is read in
09600	and first displayed.  The offset is set to the current cursor
09700	position, and then the cursor is moved to the center of
09800	the screen.  The effect of this command is undone by the
09900	XPICCEN command, page @pageref(XPICCEN), which computes the
10000	offset to be the "center of gravity" of the drawing.  The
10100	offset of the drawing may also be changed by the
10200	XOFF (page @pageref(XXOFF)) and YOFF (page @pageref(XYOFF))
10300	commands.
10303	
10306	XMOVE   Moves the cursor in half-grid steps relative to its current
10309	position; asks for the number of steps in the X and Y directions.
10312	See also page @pageref(XMOVE).
10315	
10400	@leave(description)
     	00100	@chap(File manipulation)
00200	
00300	It is useful to have TEMP:, or your selected private pack,  first in the search list, as SUDS does
00400	not know how to parse device names.  If DSKC: fills up, you lose.
00500	
00600	@sec(File output)
00700	
00800	@enter(description)
00900	@index(DRW file, writing)
01000	@index(Extension DRW)
01100	@label(AlphaW)
01200	@index(W, write DRW file)
01203	@indexentry(key "W, write DRW file",entry "W, write DRW file",number)
01300	@label(controlW)
01400	@emphasize[W]   Write a drawing file.  If the filename has no extension, the
01500	default extension .DRW is used.  The symbol "exists", ,
01600	@index(Exists, file)
01700	@index(, filename)
01703	@indexentry(key "E, filename",entry ", filename",number)
01800	can be used to mean "The last filename used"; this is displayed
01900	at the top of the screen as "=<filename>".  If any filename
02000	other than the last input filename is used, you will asked to
02100	confirm an overwrite.
02200	This command is similar  to the XEWRITE command described on
02300	page @pageref(XEWRITE), except XEWRITE will not prompt for
02400	a file name.  In addition, a W can be automatically
02500	performed by setting XAUTOWRITE mode, described on page @pageref(XAUTOWRITE).  This is usually done in an initialization macro.
02600	
02700	@index(WD file, writing)
02800	@index(Wirelist file, writing)
02900	@index(Extension WD)
03000	@label(MetaW)
03100	@index(W, write wirelist file)
03103	@indexentry(key "W, write wirelist file",entry "W, write wirelist file",number)
03200	W   Write a wirelist file, extension .WD.
03300	This is similar to the XELIST command described on page @pageref(XELIST);
03400	however, if the filename is given as ,  it will use the
03500	  PPN whereas XELIST ignores the PPN part
03600	of the  filename and uses
03700	the login PPN.
03800	See also XMAKEWD (page @pageref(XMAKEWD)).
03900	
04000	@index(PLT file, writing)
04100	@index(Plot file, writing)
04200	@index(Extension PLT)
04300	@index(W, write plot file)
04303	@indexentry(key "W, write plot file",entry "W, write plot file",number)
04400	@label(metacontrolW)
04500	@emphasize[W]   Write plot file, extension .PLT.
04600	This is similar to the XEPLOT command described on page @pageref(XEPLOT);
04700	however, if the filename is given as ,  it will use the
04800	  PPN whereas XEPLOT ignores the PPN part
04900	of the  filename and uses
05000	the login PPN.
05100	@leave(description)
05200	
05300	
05400	The following operations produce listings of body types:
05500	
05600	@enter(description)
05700	@index(L, list body types on TTY)
05703	@indexentry(key "L, list body types on TTY", entry "L, list body types on TTY",number)
05800	@index(Body types, listing)
05900	L   List body types on TTY.  For library bodies, the library name
06000	is also listed.
06100	
06200	@index(L, list body types on file)
06203	@indexentry(key "L, list body types on file",entry "L, list body types on file",number)
06300	@index(Body types, listing)
06400	L   List body types in a file with default extension .LST.
06500	Also list the plot label strings.
06600	@leave(description)
06700	
06800	The following commands are summarized here with references to detailed
06900	descriptions.
07000	@enter(description)
07100	XAUTOSAVE   Checkpoints by saving the core image (not recommended); see page @pageref(XAUTOSAVE).
07200	
07300	@emphasize[XAUTOWRITE]   Checkpoints drawing with W; see page @pageref(XAUTOWRITE).
07400	
07500	XELIST   Similar to W; see page @pageref(XELIST)
07600	
07700	XEPLOT   Similar to W; see page @pageref(XEPLOT)
07800	
07900	XESAVE    Checkpoints by saving the core image; see page @pageref(XESAVE).
08000	
08100	XEWRITE      Identical to W; see page @pageref(XEWRITE)
08200	
08300	XMAKEWD      Generates a WD file if necessary; see page @pageref(XMAKEWD).
08400	
08500	XSETWRT      Writes out the closest set; see page @pageref(XSETWRT)
08600	
08700	@emphasize[XWMACRO]   Writes out macros and variables; see page @pageref(XWMACRO).
08800	
08900	XWRTSET      Same as SETWRT.
09000	@leave(description)
     	00100	@sec(File input)
00200	
00300	@enter(description)
00400	@index(@@, XDSKIN)
00500	@@   Same as "XDSKIN<crlf>"; see page @pageref(XDSKIN).
00600	
00700	@index(I, input body definitions)
00703	@indexentry(key "I, input body definitions",entry "I, input body definitions",number)
00800	@index(Body definitions, inputting)
00900	I   Input body definitions from a drawing file.  Normally,
01000	this is @u[not] used for drawings; libraries are used
01100	instead.  See XGETLIB, page @pageref(XGETLIB), and chapter
01200	@ref(Libraries), page @pageref(libraries).    This allows you to
01300	define bodies once and use them in several  drawings.
01400	Also useful for collecting body definitions into a library (see
01500	chapter @ref(libraries), page @pageref(LibAlphaI)).
01600	To extract a specific body definition, see XGETBOD, page @pageref(XGETBOD).
01700	
01800	@index(I, input a drawing)
01803	@indexentry(key "I, input a drawing",entry "I, input a drawing",number)
01900	@label(BetaI)
02000	@index(DRW file, reading)
02100	@emphasize[I]   Input a drawing, default extension .DRW.
02200	
02300	@index(I, input body definitions)
02303	@indexentry(key "I, input body definitions",entry "I, input body definitions",number)
02400	@index(Body definitions, inputting)
02500	I   Input body definitions only.  Similar to  I, except
02600	that when a conflict arises (body
02700	already exists), replacement is automatically effected by a
02800	geometric mapping.
02900	
03000	@index(DSKIN)@index(XDSKIN)
03100	
03200	@index(Command input from file)
03300	XDSKIN      Uses a file instead of the TTY for commands; see page @pageref(XDSKIN).
03400	
03500	@index(DSKINH)@index(XDSKINH)
03600	XDSKINH      A variant of DSKIN; see page @pageref(XDSKINH).
03700	
03800	@index(XGETBOD)
03900	@index(GETBOD)
04000	XGETBOD   Extract a body definition from a file; see page @pageref(XGETBOD).
04100	
04200	@index(GETLIB)
04300	@index(XGETLIB)
04400	@emphasize[XGETLIB]   Reads in body definitions from a library file, see page
04500	@pageref(XGETLIB).
04600	
04700	@index(IFLUSH)@index(XIFLUSH)
04800	XIFLUSH      Flushes unfinished disk input before the EOF; see page @pageref(XIFLUSH).
04900	
05000	@index(IMACRO)@index(XIMACRO)
05100	@emphasize[XIMACRO]   Reads in a macro file; see page @pageref(XIMACRO).
05200	@leave(description)
     	00100	@chap(Extended commands)
00200	These commands are entered by typing the command X,
00300	@index(X, command)
00400	after which the program asks "Well?" (or some other
00500	snappy question), and then entering the
00600	command name.  Not all commands may be legal in all modes.
00603	
00606	Note: due to the inability of the author(s) to write any prose
00609	about any of these commands, some of the descriptions are
00612	quite short.  The editor of this manual was in many cases
00615	unable to determine the purpose of some of these commands
00618	without reading the source code, a task for which time and
00621	knowledge were both lacking.
00624	
00627	The current list was determined, in part,  by reading the dispatch table in
00630	the D source, and attempting to execute the commands.
00700	@enter(description)
00800	@label(XAMACRO)
00900	@index(XAMACRO)
01000	@index(AMACRO)
01100	@index(Macro, altering)
01200	@index(Altering macro)
01300	@emphasize[AMACRO]   Asks for a macro name; if it exists, permits you to
01400	alter it.  This is described more fully in section @ref(Altermode) and
01500	section @ref(macros).
01600	
01700	@label(XAUTHOR)
01800	@index(Plot box, Author)
01900	@index(Plot box, Drawn by)
02000	@index(XAUTHOR)
02100	@index(AUTHOR)
02200	@emphasize[AUTHOR]   Provides the "drawn by" information for the plotting of wirelists.
02300	
02400	@index(X-AUTHOR)
02450	@indexentry(key "XAUTHOR-",entry "X-AUTHOR",number)
02475	@index(-AUTHOR)
02487	@indexentry(key "AUTHOR-",entry "-AUTHOR",number)
02493	
02500	-AUTHOR      Stores the author text in a macro.
02600	
02700	
02800	@label(XAUTOSAVE)
02900	@index(AUTOSAVE)
03000	@index(XAUTOSAVE)
03100	AUTOSAVE   Asks "How many commands between ESAVEs?" and then
03200	performs an XESAVE every time that many top-level commands have
03300	been processed.
03400	Not implemented at CMU.
03500	
03600	@index(X-AUTOSAVE)@indexentry(key "XAUTOSAVE-",entry "X-AUTOSAVE",number)
03700	@index(-AUTOSAVE)@indexentry(key "AUTOSAVE-",entry "-AUTOSAVE",number)
03800	-AUTOSAVE   Disables XAUTOSAVE mode.
03900	
04000	@label(XAUTOWRITE)
04100	@index(AUTOWRITE)
04200	@index(Checkpointing)
04300	@emphasize[AUTOWRITE]   Asks how many commands between EWRITES? and will then
04400	do an XEWRITE when that many top-level (not in macro) commands have
04500	been processed.  This is the basic checkpointing mechanism.  Recommended
04600	values are between 30 and 50 unless you really trust the GDP.
04700	
04800	@index(X-AUTOWRITE)@indexentry(key "XAUTOWRITE-",entry "X-AUTOWRITE",number)
04900	@index(-AUTOWRITE)@indexentry(key "AUTOWRITE-",entry "-AUTOWRITE",number)
05000	-AUTOWRITE   Disables XAUTOWRITE mode.
05100	
05200	@label(XBOARD)
05300	@index(XBOARD)
05400	@index(BOARD)
05500	BOARD   Defines the board type to be used for the circuit.  This
05600	is important since it controls the format of edge connector
05700	and header pin names.  The currently recognized boards are
05703	described in chapter @ref(boards), page @pageref(boards).
09400	
09500	@label(XBOOP)
09600	@index(XBOOP)@index(BOOP)
09700	BOOP   Asks for the time in seconds after which to BOOP.  If that
09800	many seconds elapse between the input of the last character
09900	and going into input wait for the next, the booper is BOOPed.
10000	Useful to let you know when a long computation has finished.
10100	
10200	@index(X-BOOP)@indexentry(key "XBOOP-",entry "X-BOOP",number)
10300	@index(-BOOP)@indexentry(key "BOOP-",entry "-BOOP",number)
10400	-BOOP   Disables BOOPing.
10500	
10600	@label(XBRIGHT)
10700	@index(XBRIGHT)
10800	@index(BRIGHT)
10900	BRIGHT     Sets the normal brightness (one digit, or <cr> for no change)
11000	and the additional blinking brightness (one digit, or <cr> for no change).
11100	The additional blinking brightness refers to the brightness of
11200	flashing items.
11300	
11400	@index(X-BRIGHT)@indexentry(key "XBRIGHT-",entry "X-BRIGHT",number)@index(-BRIGHT)@indexentry(key "BRIGHT-",entry "-BRIGHT",number)
11500	-BRIGHT      Sets the brightness parameters to their initial startup values.
11600	
11700	
11800	@label(XBTEXT)
11900	@index(XBTEXT)@index(BTEXT)
12000	BTEXT   Enable body text display independent of XTEXT/X-TEXT mode (page
12100	@pageref(XTEXT)).
12200	
12300	@index(X-BTEXT)@indexentry(key "XBTEXT-",entry "X-BTEXT",number)@index(-BTEXT)@indexentry(key "BTEXT-",entry "-BTEXT",number)
12400	-BTEXT      Disable body text display separate from XTEXT/X-TEXT mode.
12500	
12600	
12700	@label(XCBOX)
12800	@index(CBOX)
12900	@index(XCBOX)
13000	CBOX   Enables drawing of boxes around connector pin designations.
13100	To assign connector pins, see N in point mode, page @pageref(AlphaNPoint).
13200	This is the default mode.
13300	
13400	@index(-CBOX)@indexentry(key "CBOX-",entry "-CBOX",number)@index(X-CBOX)@indexentry(key "XCBOX-",entry "X-CBOX",number)
13500	-CBOX   Disables XCBOX mode.
13600	
13700	@label(XCENTER)
13800	@index(XCENTER)
13900	@index(CENTER)
14000	CENTER      Centers flashing lines and sets appropriate scale factor to
14100	see all flashing pins.  This is done both when you type the command
14200	(if any pins are flashing) and when any new ones start flashing.
14300	
14400	@index(X-CENTER)@indexentry(key "XCENTER-",entry "X-CENTER",number)
14500	@index(-CENTER)@indexentry(key "CENTER-",entry "-CENTER",number)
14600	-CENTER      Disables XCENTER mode.
14700	
14800	@label(XCEXCHANGE)
14900	@index(XCEXCHANGE)
15000	@index(CEXCHANGE)
15100	
15200	CEXCHANGE   Exchanges the backup connector pin name <<What's a backup connector and why should I care??>> with the current connector pin name.
15300	A backup pin name is set whenever the current connector pin name is
15400	a "U" pin and the one being set is not.  
15500	
15503	@label(XCHANGE)
15506	@index(XCHANGE)
15509	@index(CHANGE)
15510	@index(Signal name, changing)@index(Renaming a signal)
15511	
15512	CHANGE   Changes a signal name; asks for both the old signal
15515	name and the new signal name.  To change a large number of
15518	signal names, the ICHANGE command (page @pageref(XICHANGE))
15521	may be used.
15600	
15700	@label(XCLEAR)
15800	@index(XCLEAR)@index(CLEAR)
15900	@emphasize[CLEAR]   Deletes "all" bodies, points, sets, and definitions of
16000	all bodies.  Resets the screen parameters to their defaults
16100	of program startup.  Flags like "EXACT" for exact  case match (pages @pageref(XEXACT) and @pageref(Pattern)) or
16200	"OUTSIDE" (pin numbers outside body; page @pageref(XOUTSIDE)) are not reset.
16300	Macro definitions are retained.
16400	
16500	@label(XCLOCATE)
16600	@index(CLOCATE)
16700	@index(XCLOCATE)
16800	CLOCATE      Short dashed lines, one horizontal and one vertical, indicate
16900	the current cursor position.
17000	
17100	@index(-CLOCATE)@indexentry(key "CLOCATE-",entry "-CLOCATE",number)@index(X-CLOCATE)@indexentry(key "XCLOCATE-",entry "X-CLOCATE",number)
17200	-CLOCATE   Disable  XCLOCATE mode.
17300	
17400	@label(XCLOCS)
17500	@index(CLOCS)@index(XCLOCS)
17600	CLOCS   Enable plotting of connector pin locations (if CPINS is enabled).
17700	
17800	@index(-CLOCS)@indexentry(key "CLOCS-",entry "-CLOCS",number)@index(X-CLOCS)@indexentry(key "XCLOCS-",entry "X-CLOCS",number)
17900	-CLOCS    Disable  XCLOCS mode.
18000	
18100	
18200	@label(XCLOSE)
18300	@index(XCLOSE)@index(CLOSE)
18400	CLOSE   Closes a file entered by XDSKOUT (page @pageref(XDSKOUT)).
18500	
18600	@label(XCOUNT)
18700	@index(XCOUNT)
18800	@index(COUNT)
18900	COUNT   Tells how many points there are in the entire drawing.  Also
19000	tells how many instances of each type of body in the entire drawing.
19100	
19200	
19300	@label(XCPINS)
19400	@index(CPINS)@index(XCPINS)
19500	CPINS   Enable plotting of connector pins.
19600	
19700	@index(-CPINS)@indexentry(key "CPINS-",entry "-CPINS",number)@index(X-CPINS)@indexentry(key "XCPINS-",entry "X-CPINS",number)
19800	-CPINS     Disable plotting of connector pins.
19900	
20000	@label(XCURBRT)
20100	@index(CURBRT)
20200	@index(XCURBRT)
20300	@index(Cursor, brightness)
20400	CURBRT      Sets cursor brightness.
20500	
20600	@index(-CURBRT)@indexentry(key "CURBRT-",entry "-CURBRT",number)@index(X-CURBRT)@indexentry(key "XCURBRT-",entry "X-CURBRT",number)
20700	-CURBRT      Sets cursor brightness to its default startup value.
20800	
20900	
21000	@label(XCURSOR)
21100	@index(XCURSOR)
21200	@index(CURSOR)
21300	CURSOR    Enable light pen tracker, or the "X" device displayed  on GDPs.
21400	
21500	@index(X-CURSOR)@indexentry(key "XCURSOR-",entry "X-CURSOR",number)@index(-CURSOR)@indexentry(key "CURSOR-",entry "-CURSOR",number)
21600	-CURSOR      Disable CURSOR.
21700	
21800	@label(XDANGLE)
21900	@index(XDANGLE)
22000	@index(DANGLE)
22100	DANGLE   Finds all of the points in the drawing which satisfy one
22200	of the following conditions:
22300	@enter(itemize)
22400	Two, and only two, collinear lines (point in the middle of a line)
22500	
22600	One line, and no text or connector pin associated
22700	
22800	Text and no lines
22900	
23000	No text or lines
23100	
23200	Connector pin and no lines
23300	@leave(itemize)
23400	See also DELNULL, page @pageref(XDELNULL).
23500	
23600	
23700	@label(XDCODE)
23800	@index(XDCODE)
23900	@index(DCODE)
24000	DCODE      Sets the drawing code for the plot program.  This string
24100	should be no more than two letters.  It indicates the type of
24200	drawing this is.  If no string is set, "CS"
24300	@index(CS, DCODE value)
24400	will be used, meaning "Circuit Schematic".  Before inventing
24500	a new code, see if one already exists.
24600	
24700	@index(X-DCODE)@indexentry(key "XDCODE-",entry "X-DCODE",number)
24800	@index(-DCODE)@indexentry(key "DCODE-",entry "-DCODE",number)
24900	-DCODE      Stores the drawing code in a macro.
25000	
25100	
25200	@label(XDDT)
25300	@index(XDDT)
25400	@index(DDT)
25500	DDT   Enters DDT, if present.  To return, type R$G.  Foo.
25600	
25700	
25800	@label(XDEFPINS)
25900	@index(XDEFPINS)
26000	@index(DEFPINS)
26100	@emphasize[DEFPINS]   Enable displaying of default pin names from the body definition.  This is used when creating bodies or other times when one is
26200	interested in pin numbers.  Note that "default pin names" are not the
26300	same as "real pin names" if more than one circuit is packed to an IC.
26400	
26500	@index(X-DEFPINS)@indexentry(key "XDEFPINS-",entry "X-DEFPINS",number)
26600	@index(-DEFPINS)@indexentry(key "DEFPINS-",entry "-DEFPINS",number)
26700	@emphasize[-DEFPINS]   Disable displaying of default pin names.
26800	
26900	@label(XDELLIB)
27000	@index(DELLIB)
27100	@index(XDELLIB)
27200	@index(Library, deleting)
27300	@index(Deleting library)
27400	@emphasize[DELLIB]   Deletes all references to bodies in the library you name,
27500	and deletes the pointer to the library.  Note that if any of
27600	the bodies in the library have been used in the current drawing,
27700	they disappear.  To delete the library and references without
27800	deleting the bodies in the drawing, see XLOCLIB (page @pageref(XLOCLIB)).
27900	
28000	@label(XDELNULL)
28100	@index(DELNULL)
28200	@index(XDELNULL)
28300	@index(Null points, marking)
28400	@index(Marking null points)
28500	@index(Null points, deleting)
28600	@index(Deleting null points)
28700	DELNULL      Marks or deletes null points.  Asks which one you wish
28800	to do, then does it.  A null point is one with no lines, no
28900	text, and no pin connections.  If you choose to mark points, use
29000	the F command in point mode 
29100	(page @pageref(AlphaFPoint))
29200	@index(F, point mode)
29300	to find them afterwards.
29400	
29500	@label(XDELSET)
29600	@index(Deleting all sets)
29700	@index(DELSET)
29800	@index(XDELSET)
29900	@index(Sets, deleting)
30000	@index(Deleting sets)
30100	DELSET      Deletes all sets.  Does not delete their contents!
30200	
30300	@label(XDELTYP)@index(DELTYP)@index(XDELTYP)
30400	@index(Body definition, deleting)@index(Body, deleting)
30500	@index(Deleting a body)@index(Deleting a body definition)
30600	DELTYP     Asks for a  body-name, then deletes all instances
30700	of that body type.   If the body type is not from a library, it
30800	will also delete its definition.
30900	In particular, this is used to delete a definition of a body when
31000	editing a library file.  
31100	
31200	
31300	@label(XDIAMONDS)
31400	@index(XDIAMONDS)
31500	@index(DIAMONDS)
31600	@emphasize[DIAMONDS]   This enables the plotting of little blobs (called
31700	"diamonds") at the intersection of four connnected line segments.
31800	Drawing four line segments in which diamonds are required to disambiguate
31900	from a crossover is probably a bad idea anyway.  It also asks if you
32000	want to enable diamonds at the intersection of three lines.  This
32100	produces slightly nicer looking drawings, so it is recommended,
32200	although it is not the default.
32300	To save display space, diamonds are not shown on the screen.
32400	
32500	@index(-DIAMONDS)@indexentry(key "DIAMONDS-",entry "-DIAMONDS",number)@index(X-DIAMONDS)@indexentry(key "XDIAMONDS-",entry "X-DIAMONDS",number)
32600	-DIAMONDS   Disable XDIAMONDS mode.
32700	
32800	
32900	
33000	@label(XDISLOC)
33100	@index(XDISLOC)@index(DISLOC)
33200	DISLOC     See edit mode, page @pageref(DislocStuff).
33300	
33400	@index(X-DISLOC)@indexentry(key "XDISLOC-",entry "X-DISLOC",number)@index(-DISLOC)@indexentry(key "DISLOC-",entry "-DISLOC",number)
33500	-DISLOC     See edit mode, page @pageref(DisLocStuff).
33600	
33700	
33800	@label(XDMACRO)
33900	@index(Deleting macro)
34000	@index(Macro, deleting)
34100	@index(XDMACRO)@index(DMACRO)
34200	
34300	@emphasize[DMACRO]   Delete macro.  Asks for a macro name.  Must be at macro
34400	level 0 to do this (i.e., no macros in progress).
34500	
34503	@label(XDPY)
34506	@index(XDPY)@index(DPY)
34509	DPY   Enable the display.
34512	
34515	@index(-DPY)@indexentry(key "DPY-",entry "-DPY",number)
34518	@index(X-DPY)@indexentry(key "XDPY-",entry "X-DPY",number)
34521	
34524	X-DPY   Turn off display.  This is the default when running from
34527	a non-GRAPHICs terminal.  
34530	
34600	@label(XDRAWN)
34700	@index(Plot box, DRN.)
34800	@index(DRAWN)
34900	@index(XDRAWN)
35000	DRAWN      This sets a signature file name (default
35100	extension .SIG)
35200	@index(SIG extension)@index(Extension SIG)
35300	which will be plotted in the "DRN." box by the plot program.
35400	The date on which this command was issued will be plotted
35500	in the "date" box.
35600	
35700	@index(X-DRAWN)@indexentry(key "XDRAWN-",entry "X-DRAWN",number)
35800	@index(-DRAWN)@indexentry(key "DRAWN-",entry "-DRAWN",number)
35900	-DRAWN   Store the DRAWN text in a macro.
36000	
36100	
36200	@label(XDSKIN)
36300	@index(XDSKIN)@index(DSKIN)
36303	@index(Extension TXT)@index(TXT extension)
36306	
36400	DSKIN   Asks for a file name (default extension .TXT).  Then uses the file in place of
36500	TTY input.  Use the same format as input from TTY.  The characters
36600	,  and  can be used for control, meta, and meta-control.
36700	Disk input breaks, where disk input is suspended and
36800	control is given to the terminal,  can be generated by a character specified
36900	in the ;Y macro command (page @pageref(SemicolonY)).  If an error occurs which would cause
37000	a ??? to be generated, an automatic disk input break will
37100	be generated.
37200	Note that "@@" @index(@@, XDSKIN) is equivalent to XDSKIN<crlf>.
37300	
37400	
37500	@label(XDSKINH)
37600	@index(XDSKINH)@index(DSKINH)
37700	DSKINH     DSKIN HOLD.  Exactly like XDSKIN, except that after setting up
37800	the input file, it generates a disk input break.
37900	
38000	@label(XDSKOUT)
38100	@index(XDSKOUT)@index(DSKOUT)
38200	DSKOUT      Asks for a filename.  All TTY input is copied to the
38300	output file; the file is now in a form to use with XDSKIN.
38400	Use the XCLOSE command (page @pageref(XCLOSE))  to terminate XDSKOUT.
38500	
     	00100	@label(XELIST)
00200	@index(XELIST)@index(ELIST)
00300	@index(Wirelist, writing)
00400	@index(WD file, writing)
00500	ELIST   Writes a wirelist file (extension .WD) for the current
00600	 name.  The  PPN of the  name  is @i(not) used; the login
00700	ppn is used instead.  Therefore, this command is not identical
00800	to W, described on page @pageref(metaW).
00900	
01000	@label(XENAME)
01100	@index(XENAME)@index(ENAME)
01200	@index(, changing value of)
01300	@index(Filename, changing)
01400	ENAME   Accepts a filename to use as the  name.  A <cr> will clear
01500	the  name.
01600	
01700	@index(X-ENAME)@indexentry(key "XENAME-",entry "X-ENAME",number)@index(-ENAME)@indexentry(key "ENAME-",entry "-ENAME",number)
01800	@index(, clearing)
01900	
02000	-ENAME   Clears the  name.
02100	
02200	
02300	@label(XENGINEER)
02400	@index(Plot box, ENG.)
02500	@index(XENGINEER)
02600	@index(ENGINEER)
02700	ENGINEER      Sets a signature file name (default extension .SIG)
02800	@index(SIG extension)
02900	@index(Extension SIG)
03000	which will be plotted in the box labelled "ENG."
03100	
03200	@index(X-ENGINEER)@indexentry(key "XENGINEER-",entry "X-ENGINEER",number)
03300	@index(-ENGINEER)@indexentry(key "ENGINEER-",entry "-ENGINEER",number)
03400	-ENGINEER   Stores the ENGINEER text in a macro.
03500	
03600	
03700	@label(XEPLOT)
03800	@index(XEPLOT)
03900	@index(EPLOT)
04000	@index(Plot file, writing)
04100	@index(PLT file, writing)
04200	EPLOT   Writes a plot file (extension .PLT) for the current default
04300	() name.  The default PPN is @i(not) used; the current
04400	area is used instead.  Therefore, this command is not identical
04500	to W, described on page @pageref(metacontrolW).
04600	
04700	
04800	
04900	@label(XESAVE)
05000	@index(Saving core image)
05100	@index(ESAVE)@index(SAVE)@index(Extension DMP)
05200	ESAVE   Does a SAVE of the core image (extension .DMP)  with the  filename.
05300	
05400	@label(XEWRITE)
05500	@index(EWRITE)
05600	@index(DRW file, writing)
05700	@index(XEWRITE)
05800	@index(DRX extension)@index(Extension DRX)
05900	EWRITE      Writes out the drawing (DRX file) with the  name.  This is
06000	almost the same as the W command (page @pageref(controlW)).
06100	The DRX extension is used instead of the DRW extension so that
06200	an inconsistent drawing will not be written.
06300	
06400	@label(XEXACT)
06500	@index(XEXACT)
06600	@index(EXACT)
06700	EXACT      Makes the match routine for all F and F commands,
06800	F in alter mode, and "FLASH", XFDIP, etc. do exact compare.
06850	@index(, <crlf>)@indexentry(key "Crlf, ",entry "<Crlf>, ",number)
06900	Does not do case folding  or treat  as space.
07000	See also XSPACES, page @pageref(XSPACES).
07100	
07200	@index(-EXACT)@indexentry(key "EXACT-",entry "-EXACT",number)
07300	@index(X-EXACT)@indexentry(key "XEXACT-",entry "X-EXACT",number)
07400	-EXACT     Turns off EXACT mode.  This is the default.
07500	Treats upper and lower case as identical and treats  as a space.
07503	
07506	@label(xexit)
07509	@index(XEXIT)@index(EXIT)
07512	
07515	@emphasize(EXIT)   Exits to the monitor.  Does not clear the screen.
07518	Use XCLEAR (page @pageref(xclear)) to clear the
07521	screen.
07524	
07600	
07700	@label(XFDIP)
07800	@index(XFDIP)
07900	@index(FDIP)
08000	@index(Find, of DIPTYPEs)
08100	@index(DIPTYPEs, finding)
08150	
08200	FDIP   Asks for a DIPTYPE name, then finds all bodies in the drawing
08300	which use that dip type, and marks them for use by the F command
08400	@index(F, body mode)
08403	@indexentry(key "F, body mode",entry "F, body mode",number)
08500	in body mode (page @pageref(AlphaFBody)).
08600	
08700	@label(XFIXALL)
08800	@index(XFIXALL)
08900	@index(FIXALL)
08903	
09000	FIXALL     Does a F@index(F, pin mode) to all bodies (page @pageref(BetaFBody)).
09100	
09103	@label(XFIXEM)
09106	@index(XFIXEM)
09109	@index(FIXEM)
09112	
09115	FIXEM   ?
09118	
09121	@label(XFLASH)
09124	@index(XFLASH)
09127	@index(FLASH)
09130	
09133	FLASH   ?
09200	
09300	@label(XFLDIP)
09400	@index(XFLDIP)
09500	@index(FLDIP)
09550	
09600	FLDIP   Asks for a DIPTYPE name, then finds all body defintions in the drawing which
09700	have that name.  Use XFLNEXT to edit these bodies.
09800	
09900	@label(XFLNAME)
10000	@index(XFLNAME)
10100	@index(FLNAME)
10150	
10200	FLNAME     Asks for a body name, then finds all body definitions in the
10300	drawing which use that name.  Use XFLNEXT to edit these bodies.
10400	
10500	@label(XFLNEXT)
10600	@index(FLNEXT)
10700	@index(XFLNEXT)
10750	
10800	FLNEXT      If not already in edit or alter mode, finds the next marked
10900	body located by XFLDIP or XFLNAME, and enters the editor with this body.
11000	
11100	@label(XFLPIN)
11200	@index(FLPIN)
11300	@index(XFLPIN)
11350	
11400	FLPIN   Finds a set of pins matching the search string.  See edit-pin mode, page @pageref(PinModeFLPin).
11500	
11600	@label(XFLPNEXT)
11700	@index(XFLPNEXT)
11800	@index(FLPNEXT)
11850	
11900	FLPNEXT      Finds the next pin in the set determined by FLPIN.  See edit-pin mode, page @pageref(PinMode).
11903	
11906	@label(XFSIGNAL)
11909	@index(XFSIGNAL)
11912	@index(FSIGNAL)
11915	
11918	FSIGNAL   Finds a set of signal names.  
12000	
12100	@label(XGETBOD)
12200	@index(XGETBOD)
12300	@index(GETBOD)
12350	
12400	GETBOD   Asks for a body type name and a file name, then will
12500	attempt to read in the body from that file using the normal
12600	body input protocols (may ask about replacement, etc.).
12700	
12800	
12900	@label(XGETLIB)
13000	@index(GETLIB)
13100	@index(XGETLIB)
13200	@index(Library, inputting)
13250	
13300	@emphasize[GETLIB]   Asks for a library filename (default extension
13303	.DRW), then 
13400	maintains a pointer to the file.  Redundant
13500	library references are ignored when possible.  Once a library
13600	is associated with a drawing, its body definitions will be
13700	available for use each time the drawing is read in (see I, page @pageref(BetaI)).  This will
13800	save substantial space in storing the drawing since the
13900	body definitions will not be stored with each drawing.
14000	See also XDELLIB (page @pageref(XDELLIB)) and XLOCLIB (page @pageref(XLOCLIB)).
14100	For more information on libraries, see chapter @ref(libraries), page
14200	@pageref(libraries).
14203	
14204	@label(XHELP)@index(XHELP)@index(HELP)
14205	
14206	HELP   Prints a list of the extended commands which are
14209	available.
14212	
14215	@label(XHIDE)
14218	@index(XHIDE)
14221	@index(HIDE)
14224	HIDE   (Whatever this does, UNHIDE (page @pageref(XUNHIDE)) undoes it.
14227	
14248	@label(XICHANGE)
14251	@index(XICHANGE)
14254	@index(ICHANGE)
14257	
14260	ICHANGE   Reads a signal-name-change (.CHG) @index(CHG, extension)@index(Extension CHG) file.  Performs an XCHANGE (page @pageref(XCHANGE)) operation
14263	on each signal name pair appearing in the file.
14266	
14269	@label(XICPINS)
14272	@index(XICPINS)
14275	@index(ICPINS)
14278	
14281	ICPINS   Reads a connector-pin (.CPN) @index(CPN, extension)@index(Extension CPN) file.
14284	
14287	
14290	@label(XIDEFS)
14293	@index(XIDEFS)
14296	@index(IDEFS)
14299	
14302	IDEFS   ?
14305	
14400	
14500	@label(XIDENTS)
14600	@index(XIDENTS)
14700	@index(IDENTS)
14750	
14800	@emphasize[IDENTS]      Enables the displaying of "hidden text" associated with a
14900	body.  In particular, the body name and the DIPTYPE property  are usually
15000	hidden, and this causes them to appear.
15100	Text is hidden by the K command, page @pageref(AlphaKtpmode).
15200	
15300	@index(X-INDENTS)@indexentry(key "XINDENTS-",entry "X-INDENTS",number)
15400	@index(-IDENTS)@indexentry(key "IDENTS-",entry "-IDENTS",number)
15500	@emphasize[-IDENTS]      Disables the displaying of hidden text.
15600	
15700	
15800	@label(XIFLUSH)
15900	@index(XIFLUSH)@index(IFLUSH)
16000	IFLUSH      Flushes disk input of XDSKIN or XDSKINH (page @pageref(XDSKIN)) before the end of the file.
16100	
16200	@label(XIMACRO)
16300	@index(XIMACRO)
16400	@index(IMACRO)@index(Macro, reading)
16500	@emphasize[IMACRO]   Input macro file.  The file must have been written by
16600	XWMACRO (page @pageref(XWMACRO)).  Defines all macros and variables
16700	described by the file.
16800	
16900	@label(XINIT)
17000	@index(XINIT)
17100	@index(INIT)
17200	INIT   Enables the calling of the INIT macro when a drawing is
17300	read in.  This is the default state of this switch.  
17400	
17500	@index(X-INIT)@indexentry(key "XINIT-",entry "X-INIT",number)
17600	@index(-INIT)@indexentry(key "INIT-",entry "-INIT",number)
17700	@index(INIT macro, disabling)
17800	-INIT   Disables the calling of the INIT macro; you do this if
17900	you want to change the INIT macro before it executes (e.g., you've
18000	screwed it up).
18100	
18200	@label(XLIBMAP)
18300	@index(XLIBMAP)
18400	@index(LIBMAP)
18500	@index(Library, renaming)
18600	LIBMAP   Used when converting from one library to another.  Asks for
18700	the old library name and the new library name.  You must type
18800	in an explicit PPN, since the default is set to the login ppn,
18900	@i[not from the current directory path!]  This sets up a mapping
19000	of library names.  When a library name is read from a DRW file,
19100	the LIBMAP list is checked for an old library name that is the
19200	same.  If one is found, the new library name is substituted.  To
19300	clear a single mapping, give a null name for the new library
19400	name.
19500	
19600	@index(X-LIBMAP)@indexentry(key "XLIBMAP-",entry "X-LIBMAP",number)
19700	@index(-LIBMAP)@indexentry(key "LIBMAP-",entry "-LIBMAP",number)
19800	-LIBMAP      Clears all library mappings.
19900	To clear a single mapping, use XLIBMAP and  give a null name for the new library
20000	name.
20100	
20200	@label(XLIBPPN)
20300	@index(XLIBPPN)
20400	@index(LIBPPN)
20500	LIBPPN      Accepts a PPN which is used as the place to find the file
20600	DIPS.DIP.
20700	@index(DIPS.DIP)
20800	This file contains all the DIP definitions: loading, fanout, etc.
20900	The drawing program D uses it only to map pin numbers when assigning
21000	bodies to IC packages.
21100	
21200	@index(X-LIBPPN)@indexentry(key "XLIBPPN-",entry "X-LIBPPN",number)
21300	@index(-LIBPPN)@indexentry(key "LIBPPN-",entry "-LIBPPN",number)
21400	-LIBPPN   Resets LIBPPN to null; will look at login ppn and
21500	current directory path.
21600	
21603	@label(XLIBTYP)
21606	@index(XLIBTYP)
21609	@index(LIBTYP)
21612	
21615	LIBTYP   Types out the names of all of the libraries; identical to
21618	XTYPLIB (page @pageref(XTYPLIB)).
21621	
21700	
21800	@label(XLINES)
21900	@index(LINES)@index(XLINES)
22000	LINES   Enable displaying of lines.  This is the default mode.
22100	
22200	@index(-LINES)@indexentry(key "LINES-",entry "-LINES",number)@index(X-LINES)@indexentry(key "XLINES-",entry "X-LINES",number)
22300	-LINES      Disable displaying of lines.  This is useful if you want to
22400	check out body placement without actually seeing all the interconnects.
22500	
22600	@label(XLMOVE)
22700	@index(XLMOVE)
22800	@index(LMOVE)
22900	LMOVE   This functions similarly to  XTMOVE (page @pageref(XTMOVE)) except
23000	it applies to connector pin location offsets.
23100	
23200	@label(XLOCATE)
23300	@index(XLOCATE)@index(LOCATE)
23400	LOCATE     Dashed lines, slightly longer than those used in XCLOCATE,
23500	are used to locate the "closest" thing.
23600	
23700	@index(X-LOCATE)@indexentry(key "XLOCATE-",entry "X-LOCATE",number)@index(-LOCATE)@indexentry(key "LOCATE-",entry "-LOCATE",number)
23800	-LOCATE      Disable XLOCATE mode.
23900	
24000	@label(XLOCLIB)
24100	@index(XLOCLIB)
24200	@index(LOCLIB)
24300	LOCLIB      Deletes all references to bodies in the library which is
24400	named, and deletes a reference to the library file.  However,
24500	any body which is currently being used in the drawing is made
24600	local to the drawing, instead of disappearing as in XDELLIB 
24700	(see page @pageref(XDELLIB)).
24800	
24900	
25000	@label(XLOCS)
25100	@index(LOCS)@index(XLOCS)
25200	LOCS   Enable display and plotting of body locations (physical locations on the board).
25300	
25400	@index(X-LOCS)@indexentry(key "XLOCS-",entry "X-LOCS",number)@index(-LOCS)@indexentry(key "LOCS-",entry "-LOCS",number)
25500	-LOCS   Disable XLOCS mode.
25503	
25506	@label(XLOWER)@index(XLOWER)@index(LOWER)
25509	
25512	LOWER   Sets the mode where lower-case letters are signficant
25515	on input.
25518	
25521	@index(X-LOWER)@indexentry(key "XLOWER-",entry "X-LOWER",number)@index(-LOWER)@indexentry(key "LOWER-",entry "-LOWER",number)
25524	
25527	-LOWER   Disables LOWER mode (default).  Lower case will be
25530	folded to upper case on input.
25533	
25536	@label(XLPROPS)
25539	@index(LPROPS)
25542	@index(XLPROPS)
25545	
25548	@index(Properties, printing)
25551	
25554	@emphasize[LPROPS]   Prints out the properties associated with
25557	the nearest body, or the current body being edited.  
25600	
25700	@label(XLSIGNALS)
25800	@index(LSIGNALS)
25900	@index(LSIGNALS)
26000	LSIGNALS   Types out all the signal names associated with wires
26100	in WIRLST   <<What's WIRLST and how does anything get on it?>>
26200	
26300	
26400	@label(XLTITLE)
26500	@index(LTITLE)
26600	@index(XLTITLE)
26700	@emphasize[LTITLE]   Lists all of the information for the plot box.
26800	This includes project, title, and all other variables that have been
26900	set.
27000	
27100	@label(XLWINDOW)
27200	@index(LWINDOW)
27300	@index(XLWINDOW)
27400	LWINDOW      Any line segment which has one or more endpoints off the screen
27500	is windowed by software.  This causes a noticeable increase in the
27600	computing required to generate a picture, so do it only if you
27700	are willing to pay the price!
27800	
27900	@index(-LWINDOW)@indexentry(key "LWINDOW-",entry "-LWINDOW",number)@index(X-LWINDOW)@indexentry(key "XLWINDOW-",entry "X-LWINDOW",number)
28000	-LWINDOW   Disable XLWINDOW (and save time!)
28100	
28200	
28300	@label(XMACRO)
28400	@index(Macros, listing)
28500	@index(Listing macros)
28600	@index(XMACRO)
28700	@index(MACRO)
28800	@emphasize[MACRO]   Lists the names of all defined macros.  If a "*" appears,
28900	the macro will be saved with the drawing (see XSMACRO).
29000	
29100	
29200	@label(XMAKEWD)
29300	@index(XMAKEWD)@index(MAKEWD)
29400	@index(WD file, writing)
29500	MAKEWD      This command is intended to be used as part of some macro or
29600	command file which guarantees integrity of the wirelists with their
29700	drawings.  When executed, it first sets body mode and does a clear.
29800	It then asks for a drawing filename.  If the date of the WD file
29900	which corresponds to the DRW file indicates that the DRW file is
30000	newer, it reads the DRW file and produces a new WD file.  Of course
30100	this can all be done interactively, but command files and macros
30200	are clearly what was intended.  For an example of how to use
30203	MAKEWD, see page @pageref(MAKEWDexample).
30206	
30209	@label(XMAPLIB)
30212	@index(MAPLIB)@index(XMAPLIB)
30215	
30218	MAPLIB   Same as XLIBMAP (page @pageref(XLIBMAP)).
30300	
30400	@label(XMODLIB)
30500	@index(XMODLIB)
30600	@index(MODLIB)
30700	MODLIB   Caveat Emptor!!!  This command must be used @i[very] carefully.
30800	It allows you to edit a body definition even though the body comes
30900	from a library!  Note that this does not change the body definition
31000	in the library, only in the local drawing." The changes are not
31100	permanent; unless you go back and make @i[exactly] the same changes
31200	in the library, you are in trouble.
31300	
31400	
31500	@label(XMODULE)
31600	@index(Plot box, module)
31700	@index(XMODULE)
31800	@index(MODULE)
31900	MODULE      This sets the string for the module name.  This appears
32000	in the plots in the "number" box, and will appear on the front of
32100	wirelists.  It will be checked for consistency on each card.
32200	
32300	@index(X-MODULE)@indexentry(key "XMODULE-",entry "X-MODULE",number)
32400	@index(-MODULE)@indexentry(key "MODULE-",entry "-MODULE",number)
32500	-MODULE      Stores the module text in a macro
32600	
32700	
32800	@label(XMOVE)
32900	@index(XMOVE)
33000	@index(MOVE)
33100	MOVE   Moves the cursor X,Y in half grid steps relative to its current
33200	position.
33300	
33400	@label(XMUNG)
33500	@index(XMUNG)
33600	@index(MUNG)
33700	@emphasize[MUNG]   Massage picture.  Tries to make all lines in the
33800	drawing either horizontal or vertical.
33900	
34000	
34100	@label(XNEXTHI)
34200	@index(Plot box, Next higher rev.)
34300	@index(XNEXTHI)
34400	@index(NEXTHI)
34500	NEXTHI      Sets a string to appear in the "next higher assembly" box
34600	in the plot box.
34700	
34800	@index(-NEXTHI)@indexentry(key "NEXTHI-",entry "-NEXTHI",number)
34900	@index(X-NEXTHI)@indexentry(key "XNEXTHI-",entry "X-NEXTHI",number)
35000	-NEXTHI   Stores the NEXTHI string in a macro.
35100	
35200	
35300	@label(XNEWID)
35400	@index(NEWID)@index(XNEWID)
35500	NEWID   Re-allocate all body and point ids.  This may be necessary
35600	if a lot of set copying and deleting has been done.  
35700	
35800	
35900	@label(XOFFALL)
36000	@index(XOFFALL)@index(OFFALL)
36100	@index(Q, body mode)@index(Z, body mode)
36103	@indexentry(key "Q, body mode",entry "Q, body mode",number)
36106	@indexentry(key "Z, body mode",entry "Z, body mode",number)
36200	OFFALL      Does a Q and Z to every point in the drawing.
36300	See pages @pageref(EpsilonQPoint) and @pageref(EpsilonZpoint).
36400	
36500	@label(XOFFLOCS)
36600	@index(XOFFLOCS)
36700	@index(OFFLOCS)
36800	
36900	OFFLOCS     This causes the location offsets for all body locations
37000	currently set in this drawing to be set to a value from the body
37100	definition;
37200	  it also sets a flag which causes this offset of remain
37300	with that of the definition.
37400	
37500	
37600	@label(XOFFRIGHT)
37700	@index(OFFRIGHT)
37800	@index(XOFFRIGHT)
37900	OFFRIGHT   Causes any Z commands to also set a flag which causes
38000	the line to be moved to the right instead of moving the point to the
38100	left.
38200	
38300	@index(-OFFRIGHT)@indexentry(key "OFFRIGHT-",entry "-OFFRIGHT",number)@index(X-OFFRIGHT)@indexentry(key "XOFFRIGHT-",entry "X-OFFRIGHT",number)
38400	-OFFRIGHT   Turns off the OFFRIGHT feature (default).
38500	
38600	@label(XOUTSIDE)
38700	@index(XOUTSIDE)
38800	@index(OUTSIDE)
38900	OUTSIDE      Sets a mode to put pin numbers on the outside during
39000	pin placement.  See page @pageref(AlphaFPin).
39100	
39200	@index(X-OUTSIDE)@indexentry(key "XOUTSIDE-",entry "X-OUTSIDE",number)@index(-OUTSIDE)@indexentry(key "OUTSIDE-",entry "-OUTSIDE",number)
39300	-OUTSIDE   Sets a mode to put pin numbers on the inside during
39400	auto placing (default mode).
39500	
39600	@label(XPAGE)
39700	@index(Plot box, page)
39800	@index(XPAGE)
39900	@index(PAGE)
40000	PAGE   Sets the PAGE and OF values; these appear in the plot and
40100	on the wirelist to show what print of a group this is.
40200	
40300	@index(X-PAGE)@indexentry(key "XPAGE-",entry "X-PAGE",number)
40400	@index(-PAGE)@indexentry(key "PAGE-",entry "-PAGE",number)
40500	-PAGE   Store the PAGE and OF values in a macro, separated by <crlf>.
40600	
40700	@label(XPBOX)
40800	@index(XPBOX)
40900	@index(PBOX)
41000	PBOX   Asks for the box size (type a single letter A-D; you may
41100	precede the letter with a V to get a vertical style box).
41200	This scales the drawing and text to just fit into the box but
41300	pretends to maintain the ratio between text and lines which is shown
41400	on the screen.  It will not be scaled larger than that scale
41500	which produces size 3 on the plotter.  Tells the scales before
41600	asking for the file name.
41700	
41800	@label(XPICCEN)
41900	@index(Drawing, centering)@index(Centering the drawing)
42000	@index(XPICCEN)
42100	@index(PICCEN)
42200	@emphasize[PICCEN]   Moves the entire drawing so that the "center of gravity" of the
42300	picture is in the center of the screen.
42400	
42500	
42600	@label(XPINS)
42700	@index(XPINS)@index(PINS)
42800	PINS   Enable display and plotting of pin numbers; this includes connector pins.
42900	
43000	@index(X-PINS)@indexentry(key "XPINS-",entry "X-PINS",number)@index(-PINS)@indexentry(key "PINS-",entry "-PINS",number)
43100	-PINS   Disable XPINS mode.
43200	
43300	
43400	@label(XPMACRO)
43500	@index(XPMACRO)
43600	@index(PMACRO)
43700	@index(Macro, printing)
43800	@emphasize[PMACRO]   Print macro.  Asks for name of macro and displays it
43900	on the terminal.
44000	
44100	@label(XPREFIX)
44200	@index(XPREFIX)
44300	@index(PREFIX)
44400	PREFIX      Sets a string which is the reference part of the drawing number.
44500	This appears after the variable part of the drawing number and is
44600	separated by a dash.  At some point this may actually be checked against
44700	all signal names which originate on this drawing to see that they
44800	are prefixed correctly.
44900	
45000	@index(X-PREFIX)@indexentry(key "XPREFIX-",entry "X-PREFIX",number)@index(-PREFIX)@indexentry(key "PREFIX-",entry "-PREFIX",number)
45100	-PREFIX      Stores the prefix text in a macro.
45200	
45300	@label(XPROJECT)
45400	@index(Plot box, project)
45500	@index(XPROJECT)
45600	@index(PROJECT)
45700	@emphasize[PROJECT]   Asks for a project name.  This is plotted in the plot box
45800	in the "Project" box.  Although the program issues an error message
45900	if the project is longer than eight characters, this error message
46000	doesn't seem to affect the operation at all.
46100	
46200	@index(X-PROJECT)@indexentry(key "XPROJECT-",entry "X-PROJECT",number)
46300	@index(-PROJECT)@indexentry(key "PROJECT-",entry "-PROJECT",number)
46400	-PROJECT   Stores the PROJECT text in a macro.
46500	
46600	@label(XPTEXT)
46700	@index(XPTEXT)@index(PTEXT)
46800	PTEXT   Enable display of point text separate from body text.
46900	
47000	@index(X-PTEXT)@indexentry(key "XPTEXT-",entry "X-PTEXT",number)@index(-PTEXT)@indexentry(key "PTEXT-",entry "-PTEXT",number)
47100	-PTEXT     Disable display of point text separate from body text.
47200	
47300	@label(XRENAME)
47400	@index(RENAME)@index(XRENAME)
47500	@emphasize[RENAME]   Asks for a current body name and a new body name.  If
47600	the new body name is not already in use, the current body name
47700	is changed to the new body name.  This is useful particularly to
47800	people who are designing new bodies.
47900	
48000	
48100	@label(XREVISE)
48200	@index(Plot box, revision)
48300	@index(XREVISE)@index(REVISE)
48400	REVISE      Set a string which is the revision level of the drawing.  This
48500	string will also appear in plots in the box marked "Rev." and in
48600	the front of wirelists.
48700	
48800	@index(-REVISE)@indexentry(key "REVISE-",entry "-REVISE",number)@index(X-REVISE)@indexentry(key "XREVISE-",entry "X-REVISE",number)
48900	-REVISE      Store the revision line in a macro.
49000	
49100	
49200	@label(XQUIT)
49300	@index(XQUIT)
49400	@index(QUIT)
49500	@emphasize[QUIT]   Leave macro alter mode (XAMACRO, page @pageref(XAMACRO)) without modifying
49600	the original macro definition (changes are discarded).
49700	
49800	@label(XRMACRO)
49900	@index(XRMACRO)@index(RMACRO)
50000	@index(Macro, renaming)
50100	@emphasize[RMACRO]   Rename a macro.  Ask for old name, then new name.
50200	New name must not already be in use.
50300	
50400	@label(XRPINID)
50500	@index(XRPINID)@index(RPINID)
50600	RPINID    Enable displaying of internal pin ids.  These are @i[not]
50700	related to pin numbers, default pin numbers, etc., but are entirely
50800	internal.  They are used, among other cases, when one is swapping
50900	wires between two pins.
51000	
51100	@index(-RPINID)@indexentry(key "RPINID-",entry "-RPINID",number)
51200	@index(X-RPINID)@indexentry(key "XRPINID-",entry "X-RPINID",number)
51300	-RPINID     Disable XRPINID mode.
51400	
51403	@label(XRSPINID)
51406	@index(XRSPINID)
51409	@index(RSPINID)
51412	
51415	RSPINID   ?
     	00100	@label(XSCALE)
00200	@index(SCALE)@index(XSCALE)
00300	@emphasize[SCALE]   Sets the scale factor.  Initial scale is 16, 12 is
00400	usually better for most drawings, really complex ones would like 8.
00500	Will ask for the desired scale factor.  Scale factor may also be
00600	changed by the * and  commands; see page @pageref(Scaling).
00700	
00800	@label(XSETCEN)
00900	@index(XSETCEN)
01000	@index(SETCEN)
01100	SETCEN   Recalculates the center of all sets.  See chapter @ref(Setmode), page @pageref(XSETCEN2).
01200	
01300	
01400	
01500	@label(XSETLOC)
01600	@index(XSETLOC)
01700	@index(SETLOC)
01800	SETLOC     Sets the card slot for location of this card on the
01900	backplane.  Asks if this is a permanent card location for this
02000	drawing.  If it is, the information is stored in one place, otherwise
02100	the information is spread through all locations of bodies and
02200	connector pins in this drawing.
02300	Not generally useful at CMU.
02400	
02500	@index(X-SETLOC)@indexentry(key "XSETLOC-",entry "X-SETLOC",number)@index(-SETLOC)@indexentry(key "SETLOC-",entry "-SETLOC",number)
02600	-SETLOC   Not what you expect.  This clears the locations on
02700	all bodies in the drawing.  If you want to undo SETLOC, type
02800	"XSETLOC" and give a null reply!
02900	
03000	
03100	
03200	@label(XSETPINS)
03300	@index(XSETPINS)
03400	@index(SETPINS)
03500	SETPINS      Does a P to all bodies in the drawing; see page @pageref(BetaPBody).
03600	
03700	@index(X-SETPINS)@indexentry(key "XSETPINS-",entry "X-SETPINS",number)
03800	@index(-SETPINS)@indexentry(key "SETPINS-",entry "-SETPINS",number)
03900	-SETPINS   Clears all pin numbers so default pin names get used.  This is used if one plans to repack logic symbols into packages.
04000	
04100	
04200	@index(DRW file, writing)
04300	@index(Set, writing)
04400	@label(XSETWRT)
04500	@index(XSETWRT)@index(SETWRT)
04600	SETWRT      Performs a W (see page @pageref(controlW) or @pageref(XEWRITE))
04700	operation, but @i[only the pins and bodies in the closest set are written
04800	to the file].
04900	
05000	@label(XSHEET)
05100	@index(Plot box, sheet)
05200	@index(XSHEET)
05300	@index(SHEET)
05400	SHEET   Sets the PAGE and OF values; these appear in the plot and
05500	on the wirelist to show what print of a group this is.
05600	
05700	@index(-SHEET)@indexentry(key "SHEET-",entry "-SHEET",number)
05800	@index(X-SHEET)@indexentry(key "XSHEET-",entry "X-SHEET",number)
05900	-SHEET      Stores the PAGE and OF values in a macro, separated by <crlf>.
06000	
06100	@label(XSHOWBOX)
06200	@index(XSHOWBOX)
06300	@index(SHOWBOX)
06400	SHOWBOX   Asks for input conforming to the syntax
06500	@center(@example(<box style><drawing scale>/<plot scale>))
06600	which indicate which box will be used, the drawing scale
06700	at which the plot file will be made (the one it looks
06800	good at) and the plot scale you will use later (usually
06900	controlled by the character size you want).  This puts up
07000	a box exactly where the plot program will plot it.  It
07100	does not include the ID box at the bottom of the drawing, just
07200	the usable space.  The box does not change relative to the
07300	drawing when you shift or scale it.  If the drawing scale is
07400	left out, the current scale is used.  If the plot scale is
07500	left out, 2 is used.  The boxes may be A-E or VB-VE.
07600	
07700	@label(XSITE)
07800	@index(Plot box, Site)
07900	@index(XSITE)@index(SITE)
08000	SITE   Asks for two strings, "Site line 1" and "Site line 2"; this
08100	is used in the plotting program to identify the site.  This is
08200	not used at CMU.
08300	
08400	@index(X-SITE)@indexentry(key "XSITE-",entry "X-SITE",number)@index(-SITE)@indexentry(key "SITE-",entry "-SITE",number)
08500	-SITE   Stores the site information in a macro.
08600	
08700	
08800	@label(XSIZE)
08900	@index(XSIZE)
09000	@index(SIZE)
09100	SIZE   Asks for the plotting scale, then tells the height and width
09200	of the drawing and the smallest box which will fit around it.  Values
09300	given are relative to the current drawing SCALE.
09400	
09403	@label(XSLICE)@index(SLICE)@index(XSLICE)
09406	
09409	XSLICE   ?
09500	
09600	@label(XSMACRO)
09700	@index(XSMACRO)@index(SMACRO)
09800	@index(Macro, marking for saving)
09900	@emphasize[SMACRO]   Enable macro saving.  Asks for a macro name.  The
10000	macro will then be saved in the DRW file.  The macro named
10100	INIT @index(INIT, macro) is sometimes automatically given an XSMACRO.
10200	See page @pageref(INITmacro) for how to use an INIT macro.
10300	
10400	@index(X-SMACRO)@indexentry(key "XSMACRO-",entry "X-SMACRO",number)@index(-SMACRO)@indexentry(key "SMACRO-",entry "-SMACRO",number)
10500	@emphasize[-SMACRO]   Disables macro saving for the macro name given.
10600	
10700	@label(XSPACES)
10800	@index(XSPACES)
10900	@index(SPACES)
11000	SPACES     Makes spaces significant characters in all comparisons.
11100	This applies to all F commands (see pages @pageref(AlphaFpoint), @pageref(AlphaFBody)), "FLASH", XFDIP, F in alter mode, etc.
11200	See also page @pageref(pattern) and the XEXACT command, page @pageref(XEXACT).
11300	
11400	@index(X-SPACES)@indexentry(key "XSPACES-",entry "X-SPACES",number)@index(-SPACES)@indexentry(key "SPACES-",entry "-SPACES",number)
11500	-SPACES      Spaces will not be significant, and  is treated as a space.
11503	
11506	@label(XSTART)
11509	@index(XSTART)
11512	@index(START)
11515	
11518	START   ?
11600	
11700	@label(XTEXT)
11800	@index(XTEXT)@index(X-TEXT)@indexentry(key "XTEXT-",entry "X-TEXT",number)
11900	TEXT   Enables the displaying of text.  This is the default mode.
12000	
12100	@index(X-TEXT)@indexentry(key "XTEXT-",entry "X-TEXT",number)@index(-TEXT)@indexentry(key "TEXT-",entry "-TEXT",number)
12200	@emphasize[-TEXT]   Disable the displaying of text.  This is useful if you
12300	have scaled a drawing down and want to see what it looks like without
12400	signal names and other text cluttering it up.  See also XPTEXT (page
12500	@pageref(XPTEXT)) and XBTEXT (page @pageref(XBTEXT))
12600	if this seems like overkill.
12700	
12800	@label(XTITLE)
12900	@index(Plot box, title)
13000	@index(XTITLE)
13100	@index(TITLE)
13200	@emphasize[TITLE]   Asks for two strings, "Title line 1" and "Title line 2".
13300	These are used in the plotting of the file for the drawing title.
13400	At CMU, only the first title line is plotted so the second line can
13500	(and should ) be null.  To see the current title, use XLTITLE.
13600	
13700	@index(X-TITLE)@indexentry(key "XTITLE-",entry "X-TITLE",number)@index(-TITLE)@indexentry(key "TITLE-",entry "-TITLE",number)
13800	-TITLE      Stores the title lines in a macro, separated by <crlf>.
13900	
14000	
14100	@label(XTMOVE)
14200	@index(XTMOVE)
14300	@index(TMOVE)
14400	@emphasize[TMOVE]   Move text offset.  This is the basic command for moving
14500	text around!  The same cursor moving commands are used, but the offset 
14600	is changed directly.  The cursor move command is not scaled, but
14700	is 1, 2, 4, 8, 16, 32 or 64 increments (1 increment = 1/8 of a size 1
14800	character width).  To exit this mode, type a <space> or <escape>.  Any
14900	other character is an error.  This works for both point text and
15000	edit text.
15100	For connector pin location offsets, see XLMOVE, page @pageref(XLMOVE).
15200	
15300	
15400	@label(XTRANSPOSE)
15500	@index(XTRANSPOSE)@index(TRANSPOSE)
15600	TRANSPOSE   Asks for a body name, then an "L" or "R", and does a
15700	@index(T, transpose)
15800	T for all bodies of that name in the drawing.
15900	See also page @pageref(BetaTBody).
16000	
16003	
16006	@label(XTSLICE)@index(XTSLICE)@index(TSLICE)
16009	
16012	TSLICE   ?
16015	
16018	@index(X-TSLICE)@indexentry(key "XTSLICE-",entry "X-TSLICE",number)@index(-TSLICE)@indexentry(key "TSLICE-",entry "-TSLICE",number)
16021	
16024	-TSLICE   -?
16100	@label(XTYPDEL)
16200	@index(XTYPDEL)
16300	@index(TYPDEL)
16400	TYPDEL      See XDELTYP, page @pageref(XDELTYP).
16500	
16600	@label(XTYPLIB)
16700	@index(XTYPLIB)
16800	@index(TYPLIB)
16900	@index(Library, listing names of)
17000	TYPLIB   Types all library filenames.
17003	
17006	@label(XUNDERLINE)
17009	@index(XUNDERLINE)@index(UNDERLINE)
17012	
17015	UNDERLINE   Sets a mode so that signal names (text) associated
17016	with a point which terminates a line is adjusted so that
17017	they are   underlined by the
17018	signal wires they are attached to.
17021	
17024	
17027	@index(-UNDERLINE)@index(X-UNDERLINE)
17030	@indexentry(key "XUNDERLINE-",entry "X-UNDERLINE",number)
17033	@indexentry(key "UNDERLINE-",entry "-UNDERLINE",number)
17036	
17039	-UNDERLINE   Turns off XUNDERLINE mode.
17100	
17103	
17106	@label(XUNHIDE)@index(XUNHIDE)@index(UNHIDE)
17109	
17112	UNHIDE   Undoes an XHIDE (page @pageref(XHIDE)).
17115	
17200	@label(XVARIABLE)
17300	@index(XVARIABLE)
17400	@index(VARIABLE)
17500	VARIABLE      Sets the string which is the variable part of the
17600	drawing number.  It appears after the module name, separated by a
17700	hyphen.
17800	
17900	@index(X-VARIABLE)@indexentry(key "XVARIABLE-",entry "X-VARIABLE",number)
18000	@index(-VARIABLE)@indexentry(key "VARIABLE-",entry "-VARIABLE",number)
18100	-VARIABLE      Stores the VARIABLE line in a macro.
18200	
18300	
18400	@label(XWINDOW)
18500	@index(XWINDOW)
18600	@index(WINDOW)
18700	WINDOW     Limits operations to the on-screen portion of the drawing
18800	(default).
18900	
19000	@index(X-WINDOW)@indexentry(key "XWINDOW-",entry "X-WINDOW",number)
19100	@index(-WINDOW)@indexentry(key "WINDOW-",entry "-WINDOW",number)
19200	-WINDOW      All operations apply to the entire drawing, not just
19300	the visible portion.
19400	
19500	
19600	@index(MCR file, writing)
19700	@index(Macros, writing)
19800	@label(XWMACRO)
19900	@index(XWMACRO)
20000	@index(WMACRO)
20003	@index(Extension MCR)@index(MCR extension)
20006	
20100	@emphasize[WMACRO]   Writes all currently defined and named macros into
20200	a file (default extension .MCR), and writes out all variable
20300	definitions.
20400	
20403	
20406	@label(XWRTSET)@index(WRTSET)@index(XWRTSET)
20409	
20412	WRTSET   Same as XSETWRT (page @pageref(XSETWRT)).
20415	
20500	@label(XXOFF)
20600	@index(XXOFF)@index(XOFF)
20700	XOFF   Sets absolute X offset.    For explanation of the
20800	offset, see the C command, page @pageref(EpsilonC).
20900	
21000	@label(XYOFF)@index(XYOFF)@index(YOFF)
21100	YOFF   Sets absolute Y offset.
21200	@leave(description)
     	00100	@chap(Body mode)@label(BodyMode)
00200	To enter body mode, type B.
00300	@index(B, enter body mode)
00400	@indexentry(Key "B, enter body mode",entry "B, enter body mode",number)
00500	
00600	@enter(description)
00700	@index(, body mode)
00703	@indexEntry(key ", body mode",entry ", body mode",number)
00706	@indexentry(key "Body mode, ",entry "Body mode, ",number)
00800	   Trace all pins on this body to the next point.  If this
00900	point is not a pin on another body, put it in a set
01000	with this body.  Then enter set mode (section @ref(setmode)) and
01100	put the cursor at the center of the set.
01200	
01300	@index(", body mode)
01400	@indexEntry(key <", body mode>,entry <", body mode>,number)
01500	@indexentry(key <Body mode, ">,entry <Body mode, ">,number)
01600	@index(Macro, storing body name)@index(Body name, storing in macro)
01700	
01800	"   Store the body name in a macro
01900	
02000	@index(", body mode)
02100	@indexEntry(key <", body mode>,entry <", body mode>,number)
02200	@indexentry(key <Body mode, ">,entry <Body mode, ">,number)
02300	@index(Macro, storing location)@index(Location, storing in macro)
02400	
02500	"   Stores the location text in a macro; if no location text, a null macro body is stored.
02503	The format of the location text is dependent upon the board type.
02506	See chapter @ref(boards).
02600	
02700	
02800	
02900	@index(#, body mode)@indexEntry(key "#, body mode",entry "#, body mode",number)@indexentry(key "Body mode, #",entry "Body mode, #",number)
03000	@index(Deleting body from set)
03100	@index(Set, deleting body)
03200	
03300	#   Removes the body from the current set.
03400	
03500	@index(#, body mode)@indexEntry(key "#, body mode",entry "#, body mode",number)@indexentry(key "Body mode, #",entry "Body mode, #",number)
03600	#   Removes the body from all sets.
03700	
03800	
03900	@index(&, body mode)@indexEntry(key "&, body mode",entry "&, body mode",number)@indexentry(key "Body mode, &",entry "Body mode, &",number)
04000	@index(Set, adding body)@index(Body, adding to set)
04100	
04200	&   Adds the closest body to the current set.
04300	
04400	@index(&, body mode)@indexEntry(key "&, body mode",entry "&, body mode",number)@indexentry(key "Body mode, &",entry "Body mode, &",number)
04500	&   Trace connections to this body through points and bodies
04600	and put everything found in a set.  Enters set mode
04700	(section @ref(setmode)) and places the cursor to the set center;
04800	it makes certain the set center is on the screen.
04900	
05000	@index(&, body mode)@indexEntry(key "&, body mode",entry "&, body mode",number)@indexentry(key "Body mode, &",entry "Body mode, &",number)
05100	&   Clears the current set.
05200	
05300	@index(D, body mode)@indexEntry(key "D, body mode",entry "D, body mode",number)@indexentry(key "Body mode, D",entry "Body mode, D",number)
05400	@index(Body, deleting)@index(Deleting a body)
05500	@emphasize[D]   Delete the closest body.
05600	Lines and text attached to the body are also deleted.
05700	
05800	@index(D, body mode)@indexEntry(key "D, body mode",entry "D, body mode",number)
05900	@indexentry(key "Body mode, D",entry "Body mode, D",number)
06000	D   Delete the closest body.  Body attachment pins are turned
06100	into points instead of being deleted.
06200	
06300	
06400	@label(AlphaEBody)
06500	@index(E, body mode)
06503	@indexEntry(key "E, body mode",entry "E, body mode",number)
06506	@indexentry(key "Body mode, E",entry "Body mode, E",number)
06600	@index(Body, editing)@index(Body, altering)
06700	@index(Editing a body)@index(Altering a body)
06703	@index(E, enter body editor)
06706	@indexentry(key "E, enter body editor",entry "E, enter body editor",number)
06800	
06900	@emphasize[E]   Edit the definition of the closest body.  This can be done only if
07000	either the body is defined in this file, or an XMODLIB (page @pageref(XMODLIB))
07003	has been done.
07100	Note that body definitions read in from a library may be made local to a file
07200	by using the XLOCLIB command (page @pageref(XLOCLIB)).
07300	  Mostly,
07400	this is used when you are editing bodies in a library file;
07500	see chapter @ref(libraries).
07600	
07700	@label(EpsilonEBody)
07800	@index(E, body mode)@indexEntry(key "E, body mode",entry "E, body mode",number)@indexentry(key "Body mode, E",entry "Body mode, E",number)@index(Body, creating)
07900	@index(Body, editing)@index(Editing a body)@index(Altering a body)
07903	@index(E, enter body editor)
07906	@indexentry(key "E, enter body editor",entry "E, enter body editor",number)
08000	
08100	@emphasize[E]   Edit or create a body definition.
08200	  Mostly,
08300	this is used when you are editing bodies in a library file;
08400	see chapter @ref(libraries).
08500	  Asks for the body name.  If the body
08600	has not been defined in any library or in the current drawing,
08700	allows you to create a new body.  This is the basic command for
08800	creating new bodies.  
08900	
09000	
09100	@label(AlphaFBody)
09200	@index(F, body mode)
09203	@indexEntry(key "F, body mode",entry "F, body mode",number)
09206	@indexentry(key "Body mode, F",entry "Body mode, F",number)
09209	@index(Bodies, finding)
09300	@index(Finding bodies)
09400	
09500	F   Find and unmark the next body that has been marked.  If a body is marked,
09600	the cursor is placed on it and it is brought onto the screen if
09700	it was offscreen.
09800	
09850	@label(BetaFbody)
09900	@index(F, body mode)
09950	@indexEntry(key "F, body mode",entry "F, body mode",number)
09975	@indexentry(key "Body mode, F",entry "Body mode, F",number)
09987	
10000	F   Asks for a search string.  If <escape> is typed, the command
10100	is aborted.  If a null string is given, the previous non-null
10200	search string is used.  Converts the location information of each
10300	body to a string and matches it against the search string.  All
10400	bodies which contain the search string as a substring of
10500	their location are marked for subsequent retrieval by F.
10600	
10700	@index(F, body mode)@indexEntry(key "F, body mode",entry "F, body mode",number)@indexentry(key "Body mode, F",entry "Body mode, F",number)
10800	F   Asks for a search string.  If <escape> is typed, the command
10900	is aborted.  If a null string is given, the previous non-null
11000	search string is used.  For each body, the body name is matched
11100	against the search string.  If the search string is
11200	a substring of the body name, the body is marked for subsequent
11300	retrieval by F.
11400	
11450	@label(AlphaMBody)
11500	@index(M, body mode)
11550	@indexEntry(key "M, body mode",entry "M, body mode",number)
11575	@indexentry(key "Body mode, M",entry "Body mode, M",number)
11587	@index(Body, moving)@index(Moving a body)
11600	
11700	@emphasize[M]   Move the closest body.  The cursor is put at the center of
11800	the body.
11900	Then the cursor commands are used to move the body; all pins are
12000	massaged as the body is moved.  Any character other than cursor
12100	and screen movement leaves this mode; typically you use a 
12200	<space>.
12300	
12350	@label(AlphaNBody)
12400	@index(N, body mode)
12450	@indexEntry(key "N, body mode",entry "N, body mode",number)
12475	@indexentry(key "Body mode, N",entry "Body mode, N",number)
12500	@index(Body, positioning)
12525	@index(Section numbers)
12550	
12600	N   "Number" the closest body, i.e., assign it a position on the
12700	board.  The position syntax is board-dependent; see chapter
12800	@ref(Boards).  However, it may be terminated with
12900	any of the following suffixes:
13000	@enter(example)
13100	-#
13200	L
13300	R
13400	-#L
13500	-#R
13600	@leave(example)
13700	If the location information
13800	is followed by "-#", then # is used as a "section designator"
13900	as in N
14000	(see page @pageref(EpsilonNbody)) to this body.  If the
14100	location information additionally has an "L" or "R" following it,
14200	this is used to do a T (see page @pageref(BetaTBody)) to the
14300	body.
14400	The text offset of the location information is set to that
14500	in the body definition; in addition, a flag is set so that any
14600	changes  made to that offset in the body definition (see page
14700	@pageref(BetaNedit)) will be reflected in each body.  If a
14800	N command is given in body mode, this flag is turned off.
14900	
15000	@index(N, body mode)@indexEntry(key "N, body mode",entry "N, body mode",number)@indexentry(key "Body mode, N",entry "Body mode, N",number)
15100	N   Legal only if an N command has just been done.  Puts the
15200	cursor at the current offset for the location information
15300	text, and lets you move it with the cursor motion commands.
15400	This motion is scaled by drawing size, not character size.  This
15500	command also turns off the flag which causes the location text
15600	to follow the offset defined in the body definition.
15700	
15800	@index(Package section, assigning)@index(Pin numbers, assigning)
15900	@label(EpsilonNbody)
16000	@index(N, body mode)@indexEntry(key "N, body mode",entry "N, body mode",number)@indexentry(key "Body mode, N",entry "Body mode, N",number)
16100	
16200	N   If the  DIPTYPE property is set, it reads the definition from file
16300	@index(DIPS.DIP)
16400	DIPS.DIP on the library area (to control the library area
16500	specification, see the XLIBPPN command on page @pageref(XLIBPPN)).
16600	It then asks which section of the package you want the body assigned
16700	to, and uses the default pin names as a mask to select the actual
16800	pin numbers and set them.
16850	@index(Section numbers)
16900	Section numbers are zero-based, so a four-body IC has sections
17000	numbered 0, 1, 2 and 3.  A letter may also be used, where
17100	A=0, B=1, etc.  This may also be done implicitly in the N
17200	command, page @pageref(AlphaNbody).
17250	If only one section is defined for the DIP, the P command,
17275	page @pageref(BetaPBody), may be used to assign pin numbers from
17287	the default pin numbers.
17300	
17400	@index(O, body mode)@indexEntry(key "O, body mode",entry "O, body mode",number)@indexentry(key "Body mode, O",entry "Body mode, O",number)@index(Body, rotating)
17500	@index(Rotating a body)
17600	
17700	@emphasize[O]    Rotate the closest body 90@+[o] counterclockwise.  After
17800	four rotations, mirror image the body.  Thus it takes eight
17900	O commands to return a body to its original orientation.
18000	Note that this can be done inside a move operation (e.g., M) and
18100	will not terminate the move.
18200	
18300	@index(P, body mode)@indexEntry(key "P, body mode",entry "P, body mode",number)@indexentry(key "Body mode, P",entry "Body mode, P",number)
18400	@index(Body, placing)@index(Placing a body)
18500	@emphasize[P]   Place a body at the current cursor position.
18600	The body will follow the cursor as if a move command (M, page
18700	@pageref(AlphaMBody)) had been done.  Terminate the move with
18800	a <space>.
18900	
19000	@label(BetaPBody)
19100	@index(P, body mode)@indexEntry(key "P, body mode",entry "P, body mode",number)@indexentry(key "Body mode, P",entry "Body mode, P",number)
19200	@index(Pin numbers, assigning)
19250	@index(Section numbers)
19300	
19400	P   Set pin numbers from the default pin names.  For a package
19500	with only one body, this is the same as doing an N command
19600	(see page @pageref(epsilonNbody)).  If you accidently
19700	type this command, you can undo it by doing an X-PINS command
19800	on the body; see page @pageref(XPINS).
19900	
20000	@index(R leaves this mode; typically you use a 
12200	<space>.
12300	
12350	@label(AlphaNBody)
12400	@index(N, body mode)
12450	@indexEntry(key "N, body mode",entry "N, body mode",number)
12475	@indexentry(key "Body mode, N",entry "Body mode, N",number)
12500	@index(Body, positioning)
12525	@index(Section numbers)
12550	
12600	N   "Number" the closest body, i.e., assign it a position on the
12700	board.  The position syntax is board-dependent; see chapter
12800	@ref(Boards).  However, it may be terminated with
12900	any of the following suffixes:
13000	@enter(example)
13100	-#
13200	L
13300	R
13400	-#L
13500	-#R
13600	@leave(example)
13700	If the location information
13800	is followed by "-#", then # is used as a "section designator"
13900	as in N
14000	(see page @pageref(EpsilonNbody)) to this body.  If the
14100	location information additionally has an "L" or "R" following it,
14200	this is used to do a T (see page @pageref(BetaTBody)) to the
14300	body.
14400	The text offset of the location information is set to that
14500	in the body definition; in addition, a flag is set so that any
14600	changes  made to that offset in the body definition (see page
14700	@pageref(BetaNedit)) will be reflected in each body.  If a
14800	N command is given in body mode, this flag is turned off.
14900	
15000	@index(N, body mode)@indexEntry(key "N, body mode",entry "N, body mode",number)@indexentry(key "Body mode, N",entry "Body mode, N",number)
15100	N   Legal only if an N command has just been done.  Puts the
15200	cursor at the current offset for the location information
15300	text, and lets you move it with the cursor motion commands.
15400	This motion is scaled by drawing size, not character size.  This
15500	command also turns off the flag which causes the location text
15600	to follow the offset defined in the body definition.
15700	
15800	@index(Package section, assigning)@index(Pin numbers, assigning)
15900	@label(EpsilonNbody)
16000	@index(N, body mode)@indexEntry(key "N, body mode",entry "N, body mode",number)@indexentry(key "Body mode, N",entry "Body mode, N",number)
16100	
16200	N   If the  DIPTYPE property is set, it reads the definition from file
16300	@index(DIPS.DIP)
16400	DIPS.DIP on the library area (to control the library area
16500	specification, see the XLIBPPN command on page @pageref(XLIBPPN)).
16600	It then asks which section of the package you want the body assigned
16700	to, and uses the default pin names as a mask to select the actual
16800	pin numbers and set them.
16850	@index(Section numbers)
16900	Section numbers are zero-based, so a four-body IC has sections
17000	numbered 0, 1, 2 and 3.  A letter may also be used, where
17100	A=0, B=1, etc.  This may also be done implicitly in the N
17200	command, page @pageref(AlphaNbody).
17250	If only one section is defined for the DIP, the P command,
17275	page @pageref(BetaPBody), may be used to assign pin numbers from
17287	the default pin numbers.
17300	
17400	@index(O, body mode)@indexEntry(key "O, body mode",entry "O, body mode",number)@indexentry(key "Body mode, O",entry "Body mode, O",number)@index(Body, rotating)
17500	@index(Rotating a body)
17600	
17700	@emphasize[O]    Rotate the closest body 90@+[o] counterclockwise.  After
17800	four rotations, mirror image the body.  Thus it takes eight
17900	O commands to return a body to its original orientation.
18000	Note that this can be done inside a move operation (e.g., M) and
18100	will not terminate the move.
18200	
18300	@index(P, body mode)@indexEntry(key "P, body mode",entry "P, body mode",number)@indexentry(key "Body mode, P",entry "Body mode, P",number)
18400	@index(Body, placing)@index(Placing a body)
18500	@emphasize[P]   Place a body at the current cursor position.
18600	The body will follow the cursor as if a move command (M, page
18700	@pageref(AlphaMBody)) had been done.  Terminate the move with
18800	a <space>.
18900	
19000	@label(BetaPBody)
19100	@index(P, body mode)@indexEntry(key "P, body mode",entry "P, body mode",number)@indexentry(key "Body mode, P",entry "Body mode, P",number)
19200	@index(Pin numbers, assigning)
19250	@index(Section numbers)
19300	
19400	P   Set pin numbers from the default pin names.  For a package
19500	with only one body, this is the same as doing an N command
19600	(see page @pageref(epsilonNbody)).  If you accidently
19700	type this command, you can undo it by doing an X-PINS command
19800	on the body; see page @pageref(XPINS).
19900	
20000	@index(R, body mode)@indexEntry(key "R, body mode",entry "R, body mode",number)@indexentry(key "Body mode, R",entry "Body mode, R",number)
20100	@index(Body, replacing)@index(Replacing a body)
20200	R   Replace the closest body.  You will be asked for
20300	a new body name, then asked to select the replacement mode.
20400	The replacements modes are:
20500	@enter(description)
20600	C   The closest  geometric mapping is used, but pin names may differ.
20700	
20800	E   An exact match is done by default pin name.
20900	
21000	L   An exact   geometric mapping is used to replace the body.
21100	If each pin cannot be matched to another, the replacement is
21200	aborted.
21300	
21400	M   Requests that default pin names be maintained.  
21500	This precedes other commands.
21600	
21700	N   A closest match by default pin name is performed.
21800	
21900	P   Copy the body text and properties only.
22000	
22100	<cr>   You are asked for a pin-by-pin correspondence.
22200	Any unspecified pins on the old body are deleted; any unspecified
22300	pins on the new body are created.
22400	
22500	<escape>   Abort the command.
22600	@leave(description)
22700	
22800	@index(R, body mode)@indexEntry(key "R, body mode",entry "R, body mode",number)@indexentry(key "Body mode, R",entry "Body mode, R",number)
22900	R   Replace some.  Asks for the old body name, then the new
23000	body name, then the correspondence mode as in R.  Proceeds to
23100	put a star on each instance of the old body in the drawing, 
23200	and asks "This one?".  If you say "Y", that body is replaced;
23300	otherwise it is not.  Use <escape> to abort this mode.
23400	This mode applies only to bodies which are visible on the
23500	screen, independent of the setting of WINDOW (see page @pageref(XWINDOW)).
23600	
23700	@index(R, body mode)@indexEntry(key "R, body mode",entry "R, body mode",number)@indexentry(key "Body mode, R",entry "Body mode, R",number)
23800	R   Replace all.   Like R, except the replacement is done
23900	to all bodies selected  without asking for confirmation.
24000	
24100	
24200	@index(S, body mode)@indexEntry(key "S, body mode",entry "S, body mode",number)@indexentry(key "Body mode, S",entry "Body mode, S",number)
24300	@index(Swap, pin numbers)
24400	
24500	@emphasize[S]   Swap.  Asks for two pin ids.  All lines, text, and
24600	anything else associated with the pin ids are swapped.
24700	@u[Note that these are pin ids, not default pin numbers!].
24800	Pin ids are unique integers associated with each pin, and
24900	can be displayed with the XRPINID command (see page @pageref(XRPINID)).
25000	If you plan to swap a lot of pins, you should display the pin ids,
25100	write down what you want to do, and then turn off pin ids.  The
25200	program will send down a new picture with pin ids displayed each
25300	time a S command is issued, even if RPINIDS are already
25400	displayed.  Since typeahead aborts the sending of a picture, if
25500	you type lots of S commands quickly you can save the screen
25600	updating, but only if you already know the pin ids you want to swap.
25700	
25800	@index(S, body mode)@indexEntry(key "S, body mode",entry "S, body mode",number)@indexentry(key "Body mode, S",entry "Body mode, S",number)
25900	S   Similar to S; swap pin numbers.  Wires remain connected
26000	as they were before the swap.
26100	
26200	@index(T, body mode)
26300	@indexEntry(key "T, body mode",entry "T, body mode",number)
26400	@indexentry(key "Body mode, T",entry "Body mode, T",number)
26500	
26600	
26700	T   Place text in the body.  For details, such as vertical
26800	plotting and character scale, see page @pageref(AlphaTtpMode).
26900	
27000	@index(T, body mode)@indexEntry(key "T, body mode",entry "T, body mode",number)@indexentry(key "Body mode, T",entry "Body mode, T",number)
27100	@label(BetaTBody)
27200	
27300	T   This command is used if you do not have a universal board,
27400	but instead have a board with only 16-pin sockets on it.
27500	It allows you to offset a 14-pin package in the 16-pin
27600	socket.  This command wants one of the following responses:
27700	@enter(description)
27800	L   Pin 1 of the DIP goes in pin 2 of the socket
27900	
28000	R   Pin 1 of the DIP goes in pin 1 of the socket
28100	
28200	*   Turn off the previous L or R.
28300	@leave(description)
28400	This command sets flags which are passed to the wirelister.  If
28500	a pin number needs 1 added to it to get the socket pin number, then
28600	a "+" will be displayed after it; if it needs 2 added to it,
28700	a "+2" will be displayed after it.
28703	
28706	@index(LPROPS)@index(XLPROPS)@index(Properties, printing)
28709	
28712	XLPROPS   Displays all local and definition properties associated
28715	with the nearest body.
28718	
28800	
28900	@index(Y, body mode)@indexEntry(key "Y, body mode",entry "Y, body mode",number)@indexentry(key "Body mode, Y",entry "Body mode, Y",number)
29000	Y   Place a body property (new or old).  See page @pageref(AlphaYtpMode).
29100	
29200	@index(Y, body mode)@indexEntry(key "Y, body mode",entry "Y, body mode",number)@indexentry(key "Body mode, Y",entry "Body mode, Y",number)
29300	Y   Replace an old body property.  See page @pageref(BetaYtpMode).
29400	
29500	@index(Y, enter body text/property mode)
29503	@indexentry(key "Y, enter body text/property mode",entry "Y, enter body text/property mode",number)
29600	@index(Y, body mode)@indexEntry(key "Y, body mode",entry "Y, body mode",number)
29700	@indexentry(key "Body mode, Y",entry "Body mode, Y",number)
29800	@index(Body text/property mode, entering)
29900	@index(Text/property mode, entering)
30000	
30100	Y   Enter body text/property mode.  The closest body becomes the
30200	one whose text and properties are being manipulated.  See section
30300	@ref(tpMode), page @pageref(tpMode).
30400	@leave(description)
     	00100	@chap(Point mode)
00200	@label(PointMode)
00300	
00400	@index(P, enter point mode)
00500	@indexEntry(key "P", Entry "P",number)
00600	To enter point mode, type P.
00700	
00800	The following commands also apply if the last primitive search command
00900	was P or T:
01000	
01100	@enter(description)
01200	
01300	@indexEntry(key <", point mode>, Entry <", point mode>,number)
01400	@index(", point mode)@index(Macro, storing pin text into)
01500	@indexentry(key <Point mode, ">,entry <Point mode, ">,number)
01600	"   If there is text on this point, it is stored in a macro.  You
01700	are asked for the macro name.  If no text, a null macro body
01800	is stored.
01900	
02000	@label(BetaQuotePoint)
02100	@index(", point mode)@index(Point mode, )
02200	@indexEntry(Key <", point mode>, Entry <", point mode>,number)
02300	
02400	"   Stores   a string for the pin name in a macro; you are asked
02500	for a macro name.  If the current point does not have
02600	a pin name, a null string is stored. 
02700	The exact form of the text string is dependent upon the board type;
02800	the board type is set by the XBOARD command (page @pageref(XBOARD)).
02900	For the known formats, see Chapter @ref(Boards), page @pageref(boards).
03000	
03100	@index(#, point mode)@indexentry(key "Point mode, #",entry "Point mode, #",number)
03200	@indexEntry(Key "#, point mode", Entry "#, point mode",number)
03300	@index(Point, deleting from set)@index(Deleting point from a set)
03400	@index(Set, deleting point from)
03500	
03600	#   Removes the point from the current set.
03700	To indicate the "current set", see & in set mode, page @pageref(BetaAmpersandSet).
03800	
03900	@indexEntry(Key "#, point mode", Entry "#, point mode",number)
04000	@index(#, point mode)@indexentry(key "Point mode, #",entry "Point mode, #",number)
04100	#   Removes the point from all sets.
04200	
04300	
04400	@index(&, point mode)@indexentry(key "Point mode, &",entry "Point mode, &",number)
04500	@indexentry(Key "&, point mode",Entry "&, point mode",number)
04600	@index(Set, adding point to)
04700	@index(Point, adding to set)@index(Adding point to set)
04800	
04900	&   Adds the closest point to the current set.  The point may
05000	not be a body attachment point.  For set operations, see
05100	also section @ref(Setmode).
05200	
05300	@index(&, point mode)@indexentry(key "Point mode, &",entry "Point mode, &",number)
05400	@indexEntry(Key "&, point mode",Entry "&, point mode",number)
05500	&   Trace connections to this point through bodies and points
05600	and put everything found in a set.  Enter set mode, and
05700	move the cursor to the set center and make sure the
05800	set center is on the screen.  For more information, see
05900	section @ref(setmode).
06000	
06100	@index(&, point mode)@indexentry(key "Point mode, &",entry "Point mode, &",number)
06200	@indexentry(Key "&",Entry "&",number)
06300	
06400	&   Clears the current set.
06500	
06600	@index(., point mode) @indexentry(key "Point mode, .",entry "Point mode, .",number)
06700	@index(Wires, tracing)@index(Tracing wires)
06800	@indexEntry(Key ".", Entry ".",number)
06900	@indexEntry(Key "period",Entry "<period>, point mode",number)
07000	
07100	.   (<period>).  Trace the wires attached to this point and flash them.
07200	@index(Flashing wires)
07300	Tracing includes wires with the same signal names.  If any connectors
07400	are attached to the wires, but are off screen, one of them is
07500	flashed in the upper right corner of the screen.
07600	
07700	@index(A, point mode)@indexentry(key "Point mode, A",entry "Point mode, A",number)@index(Point, attaching)
07800	@indexEntry(Key "A, point mode",Entry "A, point mode",number)
07900	@index(Attaching point to line)@index(Line, attaching to)
08000	
08100	@emphasize[A]   Attach the closest point to the closest other point.  A
08200	star is placed on the "other point" and you are asked "This one?".
08300	Type "Y" to attach it.  You may not attach two body points.
08400	
08500	@index(A, point mode)
08600	@indexEntry(Key "A, point mode", Entry "A, point mode",number)
08700	@indexentry(key "Point mode, A",entry "Point mode, A",number)@index(Point, attaching)
08800	@label(BetaAPoint)
08900	@emphasize[A]   Attach a point to a line segment.  This is how lines
09000	get connected!  Puts a star on the closest line and asks "This one?".
09100	If you type "Y" then this point becomes the intersection point of the
09200	line.  When drawing a line (see +, above), the closest other
09300	line is given a point at the place where the line you are
09400	drawing would intersect it.  A "-" is then done to that point
09500	to complete the line.
09600	
09700	@index(A, point mode)@indexEntry(Key "A, point mode", Entry "A, point mode",number)@indexentry(key "Point mode, A",entry "Point mode, A",number)
09800	@index(Signal name, altering)@index(Text, altering)
09900	@index(Altering signal name)@index(Altering point text)
10000	
10100	A   If the closest point has text on it, you are put into
10200	alter mode.  See chapter @ref(Altermode) on page @pageref(Altermode).
10300	
10400	@index(B, point mode)@indexEntry(Key "B, point mode", Entry "B, point mode",number)@indexentry(key "Point mode, B",entry "Point mode, B",number)
10500	B   If the closest point has three lines attached to it, one of
10600	the two collinear lines is broken off from the point and attached
10700	to a new point.  The new point is then connected to the old point
10800	by a segment in the other direction.  If the closest point
10900	has four lines attached to it, the UP and RIGHT lines are
11000	reconnected to a new point which is then joined to the old point by
11100	a horizontal segment.  If the closest point has two horizontal
11200	or two vertical lines, it is handled like the case of three 
11300	lines.  If it does  not have two, three or four lines, this
11400	command is illegal.
11500	Note that the result of executing this command is two points, one
11600	on top of the other!  This is normally a very bad idea, but
11700	it is assumed that you are about to move one of them horizontally.
11800	
11900	@index(B, point mode)@indexEntry(Key "B, point mode", Entry "B, point mode",number)@indexentry(key "Point mode, B",entry "Point mode, B",number)
12000	
12100	B   This is like B, except that in the case of four lines, the
12200	new segment is vertical instead of horizontal.
12300	It is assumed that you are about to move one of the points vertically.
12400	
12500	@label(AlphaDPoint)
12600	@index(D, point mode)@indexEntry(Key "D, point mode", Entry "D, point mode",number)@indexentry(key "Point mode, D",entry "Point mode, D",number)@index(Point, deleting)
12700	@index(Deleting a point)
12800	@emphasize[D]   Delete the closest point and all lines and text directly attached to
12900	it.  If the point is just a body attachment point, it doesn't really
13000	go away; just the lines and text associated with it.
13100	
13200	
13300	@index(D, point mode)@indexEntry(Key "D, point mode", Entry "D, point mode",number)@indexentry(key "Point mode, D",entry "Point mode, D",number)
13400	D   The same function as D, except that collinear line segments
13500	are merged; this undoes a B operation done in line mode (see page @pageref(BetaBLine)).
13600	
13700	@index(E, point mode)@indexEntry(Key "E, point mode", Entry "E, point mode",number)@indexentry(key "Point mode, E",entry "Point mode, E",number)
13800	@emphasize[E]   See E on page @pageref(EpsilonEbody).
13900	
14000	
14100	@label(AlphaFPoint)
14200	@index(F, point mode)
14203	@indexEntry(Key "F, point mode", Entry "F, point mode",number)
14206	@indexentry(key "Point mode, F",entry "Point mode, F",number)
14209	@index(Finding marked points)
14300	@index(Marked points, finding)
14303	
14400	F   Find and unmark a marked point.  If it is on the screen, move the cursor
14500	there; if off screen, move it to the center of the screen and move
14600	the cursor there.
14700	This command is used, for example,
14800	 to find (in turn) each of the points located
14900	by F or F, or
15000	 with the "find" option of
15100	DELNULL (page @pageref(XDELNULL)).
15200	
15300	@index(F, point mode)@indexEntry(Key "F, point mode", Entry "F, point mode",number)@indexentry(key "Point mode, F",entry "Point mode, F",number)
15400	F   Asks for a search string (if ended with <escape>, nothing
15500	is done).  If a null string is given, the previous non-null
15600	string will be used.  Searches for all connector pins and
15700	body pins whose names (as converted to strings as in ", see
15800	page @pageref(BetaQuotePoint))  contain
15900	the search string as a substring.  Special characters are
16000	allowed as described in the alter mode F command, page @pageref(PAttern).
16100	If a match is found, the point is marked for later retrieval.
16200	
16300	
16400	@index(F, point mode)@indexEntry(Key "F, point mode", Entry "F, point mode",number)@indexentry(key "Point mode, F",entry "Point mode, F",number)
16500	F   Asks for a search string (if ended with <escape>, nothing
16600	is done).  If null string is given, the previous non-null
16700	string will be used.  Searches for all points whose text contains
16800	the search string as a substring.  Special characters are
16900	allowed as described in the alter mode F command, page @pageref(Pattern).
17000	If a match is found, the point is marked for later retrieval.
17100	
17200	
17300	@label(AlphaKpoint)
17400	@index(K, point mode)@indexEntry(Key "K, point mode", Entry "K, point mode",number)@indexentry(key "Point mode, K",entry "Point mode, K",number)@index(Text, deleting)
17500	@emphasize[K]   If the closest point has text on it, the text is deleted.
17600	
17700	
17800	@index(M, point mode)@indexEntry(Key "M, point mode", Entry "M, point mode",number)@indexentry(key "Point mode, M",entry "Point mode, M",number)@index(Moving a point)
17900	@index(Point, moving)
18000	@emphasize[M]   Puts the cursor on the closest point.  The point will
18100	then move with  the cursor until a <space> is typed.  The lines are
18200	massaged as the point moves.
18300	
18400	@index(M, point mode)@indexEntry(Key "M, point mode", Entry "M, point mode",number)@indexentry(key "Point mode, M",entry "Point mode, M",number)
18500	M   Puts the cursor at the current text offset (if any text) and
18600	allows you to move the text offset by moving the text.  The
18700	offset is relative to the character size.  This also turns off
18800	the flags set by Z (see page @pageref(EpsilonZpoint).  NOTE: M is obsolete; use
18900	XTMOVE described on page @pageref(XTMOVE)!
19000	
19100	@index(M, point mode)@indexEntry(Key "M, point mode", Entry "M, point mode",number)@indexentry(key "Point mode, M",entry "Point mode, M",number)
19200	M   Similar to M, except that it first moves the point to the cursor.
19300	
19400	
19450	@label(AlphaNPoint)
19500	@index(N, point mode)
19503	@indexEntry(Key "N, point mode", Entry "N, point mode",number)
19506	@indexentry(key "Point mode, N",entry "Point mode, N",number)
19509	@index(Connector pin, setting)
19512	
19600	N   This sets either a connector pin or a body pin number:
19700	@enter(itemize)
19800	For a connector pin, the pin number has a syntax
19900	which is board-dependent; see chapter @ref(Boards).
20000	If this point was not previously
20100	a connector pin, an Q (page @pageref(EpsilonQPoint)) will be
20200	performed.
20300	
20400	For a body attachment point, just type the pin number
20500	@leave(itemize)
20600	
20700	@index(N, point mode)@indexEntry(Key "N, point mode", Entry "N, point mode",number)@indexentry(key "Point mode, N",entry "Point mode, N",number)
20800	N   Obsolete; use XLMOVE (page @pageref(XLMOVE)) instead.
20900	For connector pins only; puts you at the current offset for the location
21000	text and lets you move it.  The offset is relative to the character
21100	size of the location text, not the picture scale.  Illegal if
21200	an Q (page @pageref(EpsilonQPoint)) has been done to this point.
21300	
21400	
21500	@index(P, point mode)
21503	@indexEntry(Key "P, point mode", Entry "P, point mode",number)
21506	@indexentry(key "Point mode, P",entry "Point mode, P",number)
21509	
21600	P   Place a point at the current cursor position.
21700	
21800	@index(+, start a right angle)@index(Point mode, +)@index(+, point mode)
21900	+   Start a right angle (start drawing a line) which follows the
22000	cursor.  Start from the closest point.  A star is placed at the
22100	closest point excluding the one you are drawing from.  The
22200	following commands may now be given:
22300	@enter(description)
22400	@indexentry(key "Escape, point mode",entry "<Escape>, point mode",number)
22500	@index(Point mode, <escape>)
22600	@index[$ <escape>, point mode]@index[Point mode $ <escape>]
22603	@indexentry[key "Escape, point mode",entry "<Escape>, point mode",number]
22606	
22700	$   (<escape>)  Stop the right angle without placing any more points.
22800	The blinking line segment is discarded.
22900	
23000	@index(Point mode, +) @index(+, point mode)
23100	+   Make the corner of the angle into a point (freezes the next-to-last
23200	blinking line segment) and start a new right angle from there.
23300	
23400	@indexentry(key "Space, point mode",entry "<Space>, point mode",number)
23403	@indexentry(key "Point mode, space",entry "Point mode, <space>",number)
23406	
23500	<space>   Causes the sense of the right angle to change.
23600	
23700	@index(-, point mode)@index(Point mode, -)
23800	-   Attach the right angle to the closest point (found above, and
23900	marked with a star).  If this would require the deletion of an
24000	existing line, ?? is typed and nothing is done.  To attach
24100	to an existing line, see A (page @pageref(BetaAPoint)).
24200	
24300	@index(, point mode)@index(Point mode, )
24400	@label(NotPointMode)
24500	   Make a single line segment from the point which
24600	the right angle is coming from to the closest point.
24700	This may not be a horizontal or vertical line, so you
24800	must straighten it.  See also the MUNG command, page @pageref(XMUNG).
24900	
25000	@emphasize[A]   Attach the line to the nearest line segment; see A
25100	described on page @pageref(BetaAPoint).
25200	@leave(description)
25300	@index(Q, point mode)
25400	@indexEntry(Key "Q, point mode", Entry "Q, point mode",number)
25500	@indexentry(key "Point mode, Q",entry "Point mode, Q",number)
25600	@index(Connector pin text offset)
25700	@index(Text offset, connector pin)
25800	
25900	Q   Turns off the flag set by Q
26000	
26100	@label(EpsilonQPoint)
26200	@index(Q, point mode)
26300	@indexEntry(Key "Q, point mode", Entry "Q, point mode",number)
26400	@indexentry(key "Point mode, Q",entry "Point mode, Q",number)
26500	@index(Connector pin text offset)
26600	@index(Text offset, connector pin)
26700	
26800	Q   Calculates a good offset for the connector pin designation under
26900	the same conditions as Z (page @pageref(epsilonZpoint)).  Also
27000	sets a flag to cause the connector pin designation to follow the text
27100	(or the point, if no text) when either the connector pin number or 
27200	the text is changed.
27300	
27400	
27500	@index(T, point mode)
27600	@indexEntry(Key "T, point mode", Entry "T, point mode",number)
27700	@indexentry(key "Point mode, T",entry "Point mode, T",number)@index(Text, attaching to point)
27800	
27900	
28000	T   Asks for text, and then attaches the text to the point.
28100	For details such as vertical plotting and scaling of text,
28200	see T on page @pageref(AlphaTtpmode).
28300	
28400	@index(T, point mode)
28500	@indexEntry(Key "T, point mode", Entry "T, point mode",number)
28600	@indexentry(key "Point mode, T",entry "Point mode, T",number)
28700	
28800	@emphasize[T]   The same as T, followed by Z.  This is the preferred
28900	command for attaching text (signal names)  to a point.
29000	For details such as vertical plotting and scaling, see T on
29100	page @pageref(AlphaTTpmode).
29200	
29300	
29400	@index(Z, point mode)
29500	@indexEntry(Key "Z, point mode", Entry "Z, point mode",number)
29600	@indexentry(key "Point mode, Z",entry "Point mode, Z",number)
29700	Z   Disables the flag set by Z.
29800	
29900	@index(Z, point mode)
30000	@indexEntry(Key "Z, point mode", Entry "Z, point mode",number)
30100	@indexentry(key "Point mode, Z",entry "Point mode, Z",number)
30200	@label(EpsilonZPoint)
30300	Z   Calculates a good offset for the text if the point has only
30400	one segment attached to it.  It also sets a flag which causes this
30500	offset to be updated when the text changes.  If in
30600	OFFRIGHT state (see page @pageref(XOFFRIGHT)), a flag is set to
30700	cause the point to move right instead of the text to move left
30800	when the line leaves going to the right.
30900	@leave(description)
     	00100	@chap(Edit mode)
00200	@label(EditMode)
00203	
00206	Edit mode is used to create bodies for a drawing.  Any drawing
00209	may contain its own private body definitions, although it is
00212	considered far more courteous to create library files which can
00215	later be shared by others.  After all, if someone had done that
00218	already you probably wouldn't have to be drawing that body anyway.
00221	
00224	The most important feature on a body is a @i[point], since this
00227	is what is used to connect the wires.  In theory, a body could
00230	consist of nothing but points, but as a practical matter this
00233	wouldn't look very well on a drawing.  Therefore, a collection
00236	of lines is also created which outline the body and provide some
00239	indication of its function (e.g., inverting symbols for active-low
00242	inputs or active-low outputs).  In addition to drawing simple lines,
00245	existing shapes may be brought in to add to the body, e.g., 
00248	the inversion bubble is a standard shape (called "DIAMOND") from
00251	one of the libraries.  A body may also be created by copying an
00254	existing body (e.g., for creating the LSTTL version of a chip
00257	from the STTL or TTL version).  Text may be added to the body,
00260	frequently near a connection point, to provide some explanation
00263	of what is going on (e.g., "CLK", "Q", "D" for a flip-flop).  However,
00266	the text is not associated with the point by the drawing program
00269	and if the point is moved or deleted the text must be moved or
00272	deleted explicitly.
00275	
00278	Note: before constructing a body, you should really read and
00281	understand chapter @ref(diptype), on the DIPTYPE property.
00284	Most knowledge about DIPTYPE is folklore.
00300	
00304	The trick to use is to draw the body, and if you don't like
00308	where its "center" is positioned, you
00312	@enter(itemize)
00316	Rename the body to some useless name, such as "foo".  See XRENAME,
00320	page @pageref(XRENAME).
00324	
00328	Create a new body with the old name; see the E command in body
00332	mode, page @pageref(EpsilonEbody).
00336	
00340	Get a copy of the old body by using the G command in body
00344	edit mode (page @pageref(AlphaGedit)) to fetch the old body (e.g., "foo").
00348	
00352	Use the cursor motion commands to move the body around until it
00356	is placed where you want it, then type <space> to discontinue
00360	the movement.
00364	
00368	Exit the editor with E (page @pageref(AlphaEedit)).
00372	
00376	Delete the old body with XDELTYP (page @pageref(XDELTYP)).
00380	@leave(itemize)
00390	
00400	During edit mode, a star indicates the closest point in the
00500	body lines for use with R, M, I or D commands.
00600	
00700	Edit mode is entered by typing E or E in body mode; see
00800	page @pageref(AlphaEbody).
00900	
01000	Within edit mode, there are several submodes.
01100	@i[Body edit] submode allows you to perform operations on
01200	the entire body.  
01300	@i[Insert] submode allows you to add or
01400	delete lines from the body shape, or move them around.
01500	@i[Pin] submode allows you to place pins, sometimes called
01600	"body attachment points", name them, and change them.
01700	@i[Text/Property] submode allows you to place text or
01800	text named by a property name in the body.  Text which is
01900	named by property name is used so that the text may be
02000	retrieved or examined not by position but by name.  Some
02100	property names, such as DIPTYPE, have special meanings.
02200	User-defined properties could be used to group bodies
02300	together by function (e.g., a property could be called
02400	"FUNCTION" and have  text like "SELECTOR", "ADDER",
02500	"FLOP", etc.)
02600	or family (e.g., define a property "FAMILY" with text
02700	like "ECL", "MOS", "LSTTL", etc.).
02703	
02706	@index(LPROPS)@index(XLPROPS)
02709	The properties associated with a body may be displayed
02712	by using the XLPROPS command.  Note that the properties
02715	associated with a body definition may be changed for any
02718	instantiation of a body, and new properties associated
02721	with that instantiation may be added.
02724	
02800	
02900	A @i[body] is an ordered list of visible and invisible vectors,
03000	pins, properties and text.  The ordering of vectors, in particular,
03100	shows up in many commands which talk about the "next" and "previous"
03200	points, or the vector "entering" or "leaving" a point.  Although
03300	the user has no control of the exact order of vectors, the
03400	knowledge that they @i[are] ordered is important.
03500	
03600	Caution:  Within edit mode, AUTOWRITE mode (page @pageref(XAUTOWRITE))
03700	is effectively disabled.  Therefore, you should return to drawing
03800	level frequently and perform an W command (page @pageref(alphaW))
03900	to save the drawing and therefore the body definition you have worked
04000	so hard at.
04100	
04200	
     	00100	@sec(Techniques for drawing bodies)
00200	
00300	There are some techniques which are otherwise undocumented and
00400	are useful to know about.  You won't really understand this section
00500	until you start building bodies, but if it were placed at the end
00600	of this chapter you might miss it.
00700	
00800	Moving lines around:  If you have drawn a body too small, or
00900	have put another body (such as the inversion bubble) in the
01000	wrong place, all is not lost.  The cursor movement commands in
01100	insert mode will drag the lines along with the cursor.  The
01200	space and backspace commands can be used to move along the
01300	vector list, and when you get to the endpoint you wish to move,
01400	use the cursor commands to move it.  Since I always starts you
01500	at the front of the vector list, it might take a long time to get
01600	to where you want to be, so use M instead.  This places you
01700	immediately at the nearest point.
01800	
01900	Adding lines:  Sometimes you want to add some lines to a drawing,
02000	either because you forgot them or because you have copied an
02100	almost-similar drawing from another body.  Of course, if you
02200	want to draw a shape that already exists, you should just use
02300	the G command to grab it.  However, to add lines you usually
02400	get near where you want to draw them and then start drawing
02500	an invisible vector, followed by as many visible ones as you want,
02600	as often as desired.  A startling event is that the cursor may pick
02700	up some other line of the drawing and drag it along.  If this is
02800	not too disturbing, just let it follow the cursor; when you have
02900	added your lines, place one last invisible vector to return the line to where it
03000	belongs.  Another technique is to draw an invisible vector of
03100	some length (e.g., one  distance) then terminate it and start another
03200	invisible vector in the opposite direction for the same distance.
03300	This returns the visible line that had been dragged along with the
03400	cursor to its original point.  Now type a <backspace> command to
03500	move back one vector (invisible) and now start moving to the
03600	desired point and drawing the desired lines.  You are really
03700	dragging around the invisible vectors, but of course they
03800	don't appear and get in your way.
03900	
04000	Text: Body text should be moved around with the M command, and
04100	the final fine adjustment made with XTMOVE.  The name of the
04200	body, e.g., "74132", is manipulated in this manner.  The DIPTYPE
04300	property should be made invisible by using K.  The DIPTYPE should
04400	also contain a space separating the family name from the type
04500	when no other delimiter intervenes, e.g., the DIPTYPE of
04600	"74132" is "74@ 132".  However, the DIPTYPE of "74LS132" is
04700	"74LS132".  This is so the DIPTYPEs will sort correctly in
04800	final reports.  If you don't believe this, accept it on faith.
04900	
05000	Pin text should have its anchor point either on the pin (if the pin
05100	is on the main line of the body), on the main line of the body
05200	in line with the pin (e.g., where an inversion bubble intersects
05300	the main rectangle of the body), or, in the case of a clock signal,
05400	at the end point of the triangle defining the clock input.  The
05500	text is normally centered around the anchor point, so will look
05600	really bad.  Use XTMOVE to move the text so that it is positioned
05700	correctly.  This technique will cause the text to maintain a
05800	fixed distance from the pin or rectangle, independent of scaling.
05900	It makes larger and smaller drawings look consistent and cleaner.
06000	In particular, for large scale factors it insures that the
06100	text for a pin is not floating somewhere in the middle of the body.
06200	
     	04300	@sec(Body edit submode)
04400	@enter(description)
04500	
04600	@index(", edit submode)
04603	@indexentry(key <", edit submode>,entry <", edit submode>,number)
04606	@indexentry(key <Edit submode, ">,entry <Edit submode, ">,number)
04700	@index(Macro, storing body name)
04800	
04900	"   Stores the name of the body you are editing in a macro.  This
05000	is useful if you want to have a macro that can do the same thing
05100	to a number of bodies.
05200	
05300	
05400	@index(D, edit submode)
05403	@indexentry(key "D, edit submode",entry "D, edit submode",number)
05406	@indexentry(key "Edit submode, D",entry "Edit submode, D",number)
05500	
05600	@emphasize[D]   Delete the closest point.  Use this carefully.  It is
05700	the only way to delete a portion of the body of a drawing, even
05800	those portions obtained from a standard shapes library with
05900	G (page @pageref(alphaGedit)).  One point (and thus one line) at
06000	a time can be deleted.  If you delete too many points you may have
06100	to redraw them.  Frequently an unexpected visible line will appear
06200	connected (apparently) at random.  This is a former invisible vector
06300	which is now connected to nothing.  You want to D it also.
06400	
06500	@label(AlphaEEdit)
06600	@index(E, edit submode)
06603	@indexentry(key "E, edit submode",entry "E, edit submode",number)
06606	@indexentry(key "Edit submode, E",entry "Edit submode, E",number)
06700	@index(Edit move, leaving)
06800	
06900	@emphasize[E]   Exit the editor.  Return to drawing level.
07000	
07100	
07200	
07300	@label(AlphaGEdit)
07400	@index(G, edit submode)
07403	@indexentry(key "G, edit submode",entry "G, edit submode",number)
07406	@indexentry(key "Edit submode, G",entry "Edit submode, G",number)
07409	@index(Body, copying)
07412	@index(Copying body)
07500	
07600	@emphasize[G]   Get a body definition and add it to this body.  You
07700	are given the body definition and can move it using the
07800	normal cursor motion commands, or rotate it using O, until
07900	you type a <space>.  @i[Caution:]  Once you type a <space>, the
08000	copy of the body definition brought in is merged completely with
08100	the body definition you are editing!  In order to delete
08200	an incorrectly-placed body of this nature you must delete each
08300	of its vectors one at a time!  You can no longer move it as a unit,
08400	and in general it is easier to delete it than to move it.    If you
08403	type an <Escape> instead of a <space>, you will flush the body without placing it.
08500	
08600	
08700	@index(I, edit submode)
08703	@indexentry(key "I, edit submode",entry "I, edit submode",number)
08706	@indexentry(key "Edit submode, I",entry "Edit submode, I",number)
08800	
08900	@emphasize[I]   Enter insert submode.  This allows you to draw lines defining
09000	the body.  The current point is set to the first point of
09100	the body.
09200	For details on insert submode,
09300	see page @pageref(insertmode).
09400	
09500	@index(M, edit submode)
09503	@indexentry(key "M, edit submode",entry "M, edit submode",number)
09506	@indexentry(key "Edit submode, M",entry "Edit submode, M",number)
09509	
09600	@emphasize[M]   Like I, except that the current point is set to the closest
09700	point.
09703	This is useful for picking up a specific point on the body and
09706	moving it, such as in stretching the body or moving an inversion
09709	bubble or clock diamond.
09800	
09900	@label(BetaNEdit)
10000	@index(N, edit submode)
10003	@indexentry(key "N, edit submode",entry "N, edit submode",number)
10006	@indexentry(key "Edit submode, N",entry "Edit submode, N",number)
10100	
10200	@emphasize[N]   Moves the cursor to the current initial location offset
10300	(usually designated by the symbol "A01", but this is board
10303	dependent; see chapter @ref(boards)) and lets you move it
10400	with the cursor commands until you type a space.  The position
10500	of the initial location offset determines where the physical
10600	board position of the package containing the body will appear
10700	in the drawing output.
10800	
10900	@emphasize[O]   Rotate a body; works only within  G, see  page @pageref(AlphaGedit).
11000	
11100	
11200	@emphasize[P]   Set a pin.  See P in pin submode, page @pageref(AlphaPPin).
11300	
11400	@index(P, edit submode)
11403	@indexentry(key "P, edit submode",entry "P, edit submode",number)
11406	@indexentry(key "Edit submode, P",entry "Edit submode, P",number)
11500	@index(Pin submode, entering)@index(P, enter pin submode)
11600	
11700	@emphasize[P]   Enter pin submode; see section @ref(Pinmode).
11800	
11900	R   Change the visibility attribute of the closest point;
12000	see R in insert submode on page @pageref(AlphaRInsert).
12100	
12200	@index(T, edit submode)
12203	@indexentry(key "T, edit submode",entry "T, edit submode",number)
12206	@indexentry(key "Edit submode, T",entry "Edit submode, T",number)
12300	@index(Body text, placing)@index(Text, placing in body)
12400	
12500	@emphasize[T]     Place text at the indicated point.  If it lands in the
12600	wrong place (as it is certain to) enter text/property submode and
12700	massage it using XTMOVE; see pages @pageref(AlphaTtpmode) and @pageref(XTMOVE).
12800	
12900	@index(T, edit submode)
12903	@indexentry(key "T, edit submode",entry "T, edit submode",number)
12906	@indexentry(key "Edit submode, T",entry "Edit submode, T",number)
13000	@index(T, enter text/property submode)
13100	
13200	@emphasize[T]   Enter text/property submode;  see section @ref(TPmode), page
13300	@pageref(TPmode).
13400	
13500	@label(DISLOCstuff)
13600	@index(XDISLOC)@index(DISLOC)
13700	XDISLOC   Always display the location information on each 
13800	instance of this body in the drawing.
13900	
14000	@index(X-DISLOC)@indexentry(key "XDISLOC-",entry "X-DISLOC",number)@index(-DISLOC)@indexentry(key "DISLOC-",entry "-DISLOC",number)
14100	X-DISLOC   Don't display the location information on each
14200	instance of this body in the drawing for which a N (see
14300	page @pageref(BetaNedit)) has not been done.
14400	
14403	@index(XLPROPS)@index(LPROPS)
14406	
14409	@emphasize[LPROPS]   Display the list of properties currently
14412	associated with the body.  The DIPTYPE property is the most
14415	important one to see, since this is the interface to the wirelist
14418	package.
14421	
14500	
14600	@index(Y, edit submode)
14603	@indexentry(key "Y, edit submode",entry "Y, edit submode",number)
14606	@indexentry(key "Edit submode, Y",entry "Edit submode, Y",number)
14609	
14700	@emphasize[Y]   Place new or change old property; see Y on page 
14800	@pageref(AlphaYtpmode).
14900	
15000	@index(Y, edit submode)
15003	@indexentry(key "Y, edit submode",entry "Y, edit submode",number)
15006	@indexentry(key "Edit submode, Y",entry "Edit submode, Y",number)
15100	
15200	Y   Change old property; will do unique disambiguation of
15300	the name.  See Y on page @pageref(BetaYtpmode).
15400	
15500	@leave(description)
     	00100	@newpage()
00200	@sec(Insert Submode)@label(insertmode)
00300	
00400	@enter(description)
00500	
00600	@label(PlusInsertMode)
00700	@label(PlusInsert)
00800	@index(+, insert submode)@index(Insert submode, +)
00900	@emphasize[+]   This terminates the current vector which has been following
01000	the cursor, and starts a @u[visible one] following it.  You
01100	also use + to start the first line of a body drawing.
01200	
01300	@index(-, insert submode)@index(Insert submode, -)
01400	-   This terminates the current vector which has been following the
01500	cursor, and starts an @u[invisible one] following it.  Fear not!
01600	you can draw as many connected  "invisible" vectors as you like, but they
01700	will not waste space because the program is very clever.
01800	
01900	@index[$ <escape>, insert submode]
02000	@indexentry(key "Insert submode, escape",entry "Insert submode, <escape>",number)
02100	@indexentry(key "Escape, insert submode",entry "<Escape>, insert submode",number)
02200	@emphasize[$]   (<escape>).  @u[Return to edit submode].
02300	
02400	@indexentry(key "Backspace, insert submode",entry "<Backspace>, insert submode",number)
02500	@indexentry(key "Insert submode, backspace",entry "Insert submode, <backspace>",number)
02600	
02700	<Backspace>   Moves the cursor to the "previous" point.
02800	@i[Type these slowly to TOPS-10 or the monitor will treat them
02900	as true <backspace> characters!]
03000	
03100	
03200	@index(D, insert submode)@indexentry(key "D, insert submode", entry "D, insert submode",number)@indexentry(key "Insert submode, D",entry "Insert submode, D",number)
03300	@index(Deleting point from body)
03400	@emphasize[D]   Delete the current point.  This will leave a vector joining
03500	two neighboring points ("neighboring" is determined by how
03600	the body is represented in memory, which is usually not the
03700	way in which you drew it!).  The type (visible or invisible)
03800	will be that of the one already on the last point.  The
03900	cursor is positioned on the next point.
04000	Recall that "current", "last" and "next" are all relative to
04100	how the vector list is stored in memory.
04200	
04300	@index(E, insert submode)@indexentry(key "E, insert submode", entry "E, insert submode",number)
04400	@indexentry(key "Insert submode, E",entry "Insert submode, E",number)
04500	
04600	@emphasize[E]   Exit the editor and return to drawing level.
04700	
04800	
04900	@index(P, insert submode)@indexentry(key "P, insert submode", entry "P, insert submode",number)@indexentry(key "Insert submode, P",entry "Insert submode, P",number)
05000	@emphasize[P]   Enter pin submode; see section @ref(pinmode).
05100	
05200	
05300	@label(AlphaRInsert)
05400	@index(R, insert submode)@indexentry(key "R, insert submode", entry "R, insert submode",number)@indexentry(key "Insert submode, R",entry "Insert submode, R",number)
05500	
05600	R   Waits for a "+" or "-" to be typed, they changes the
05700	vector "leaving" the current point to be either visible
05800	or invisible, accordingly.
05900	
06000	@indexentry(key "Space, insert submode", entry "<Space>, insert submode",number)
06100	@indexentry(key "Insert submode, space",entry "Insert submode, <space>",number)
06200	<Space>   Moves the cursor to the "next" point.
06300	
06400	@index(T, insert submode)@indexentry(key "T, insert submode", entry "T, insert submode",number)
06500	@indexentry(key "Insert submode, T",entry "Insert submode, T",number)
06600	
06700	@emphasize[T]   Enter text/property submode; see section @ref(tpmode).
06800	
06900	
07000	@leave(description)
     	00100	@newpage()
00200	@sec(Pin Submode)@label(PinMode)
00300	
00400	A star indicates the closest pin.
00500	In general, pins should be no closer than 4 units, or a -motion, and
00600	should be spaced in integral multiples of 4 units or a -motion.
00700	8 units, or an -motion, is recommended for two-input gates.
00800	
00900	Note that pins are part of the body drawing, but are not related to
01000	physical lines of a "body".  A pin may be placed @i[anywhere]
01100	on a "body", but it usually makes little sense to put a pin
01200	anywhere other than on a body line of some sort.
01300	
01400	The "text" associated with a pin is an incidental notation used
01500	to increase readability by people.  It is placed there by
01600	an T command, and you use text/property submode to move it
01700	around to where it looks best.  However, it is not used except
01800	by the (human) readers of drawings, and is @i[not] associated
01900	with a pin.
02000	It is particularly important to note that there is no way of
02100	moving the text associated with a pin at the same time the
02200	pin is moved, since no data structure in the drawing package
02300	associates this text with the pin.  If a pin is moved, the text
02400	must also be moved by hand to follow it.
02500	
02600	@enter(description)
02700	@indexentry(key "Escape, pin submode",entry "<Escape>, pin submode",number)
02703	@indexentry(key "Pin mode, escape",entry "Pin mode, <escape>",number)
02800	@index[$ <escape>, pin submode]
02900	@emphasize[$]   (<escape>)  Return to edit submode.
03000	
03100	@index(D, pin submode)
03103	@indexentry(key "D, pin submode",entry "D, pin submode",number)
03106	@indexentry(key "Pin submode, D", entry "Pin submode, D",number)
03109	@index(Pin, deleting)
03200	@index(Deleting a pin)
03300	@emphasize[D]   Delete the closest pin.
03400	
03500	@label(AlphaFPin)
03600	@index(F, pin submode)
03601	@indexentry(key "F, pin submode",entry "F, pin submode",number)
03602	@indexentry(key "Pin submode, F", entry "Pin submode, F",number)
03603	@index(-OUTSIDE)@index(X-OUTSIDE)@index(OUTSIDE)@index(-OUTSIDE)
03606	@indexentry(key "XOUTSIDE-",entry "X-OUTSIDE",number)
03609	@indexentry(key "OUTSIDE-",entry "-OUTSIDE",number)
03612	
03700	F   Automatically calculates a location number.  If in
03800	OUTSIDE mode (see page @pageref(XOUTSIDE)), it will try
03900	to put the pin outside the body; otherwise it will try to
04000	put it inside.  The default startup mode is inside (-OUTSIDE).
04100	
04200	@index(F, pin submode)@indexentry(key "F, pin submode",entry "F, pin submode",number)@indexentry(key "Pin submode, F", entry "Pin submode, F",number)
04300	F   Do F to all pins of the body.
04400	
04500	
04600	@index(M, pin submode)@indexentry(key "M, pin submode",entry "M, pin submode",number)@indexentry(key "Pin submode, M", entry "Pin submode, M",number)@index(Pin, moving)
04700	@index(Moving a pin)
04800	@emphasize[M]   Move the closest pin.  The cursor is moved to the pin
04900	and the pin follows it until a <space> is typed.
05000	
05100	@index(N, pin submode)@indexentry(key "N, pin submode",entry "N, pin submode",number)@indexentry(key "Pin submode, N", entry "Pin submode, N",number)@index(Renaming a pin)
05200	@index(Pin, renaming)
05300	@emphasize[N]    Asks for a new pin name, then changes the number of
05400	the closest pin to whatever you type.  Has the same restrictions
05500	as P, page @pageref(AlphaPPin).
05600	
05700	@enter(multiple)
05800	@label(BetaNPin)
05900	@index(N, pin submode)
05903	@indexentry(key "N, pin submode",entry "N, pin submode",number)
05906	@indexentry(key "Pin submode, N", entry "Pin submode, N",number)
05909	@index(Moving pin number)
06000	@index(Pin number, moving)
06100	
06200	@emphasize[N]   Moves the position of the pin number.  Asks for a location
06300	number.  Since you probably don't want to refer to the table below,
06400	or memorize it, you can reply with a "?" and this list will be
06500	displayed.  In addition, N can be used to reposition the pin.
06600	@enter(format,group)
06700	@enter(format)
06800	0=Up and right
06900	1=Up
07000	2=Up and left
07100	3=Left
07200	4=Down and left
07300	5=Down
07400	6=Down and right
07500	7=Right
07600	@leave(format)
07700	@leave(format)
07800	The pin quadrants are shown below.
07900	@enter(format,group)
08000	@enter(format)
08100	      1
08200	    2   0
08300	  3       7
08400	    4   6
08500	      5
08600	@leave(format)
08700	@leave(format)
08800	Typical preferences are:
08900	@enter(format)
09000	@enter(format)
09100	Pins at top of box: up and right (0)
09200	
09300	Pins at left of box: up and left (2)
09400	
09500	Pins at right of box: up and right (0)
09600	
09700	Pins at bottom of box:  down and right (6)
09800	@leave(format)
09900	@leave(format)
10000	@leave(multiple)
10100	
10200	@index(N, pin submode)@indexentry(key "N, pin submode",entry "N, pin submode",number)@indexentry(key "Pin submode, N", entry "Pin submode, N",number)
10300	@index(Nipple bit)
10400	
10500	N   This allows a more general control of the position of the
10600	pin number.  This is particularly useful if one is trying to place
10700	the pin number reasonably in relation to a drawing with angled
10800	edges, e.g., the upper pin of a two-input NOR gate.  None of
10900	the options of N really work right.  This command accepts
11000	an X,Y or just X value as the offset for the pin number (where
11100	X and Y are signed values in units of one cursor step) and
11200	moves the pin number accordingly.  Historical note:  this used
11300	to be called the "nipple bit".
11400	
11500	@label(AlphaPPin)
11600	@index(P, pin submode)@indexentry(key "P, pin submode",entry "P, pin submode",number)@indexentry(key "Pin submode, P", entry "Pin submode, P",number)
11700	@emphasize[P]   Place a pin.  
11800	The pin is placed exactly under the cursor.  Note that the
11900	cursor doesn't have to be on any lines of the body!  Therefore,
12000	you had better be certain that the cursor is where you want the pin.
12100	The pin number may be any one of the form (where # is an arbitrary
12200	number):
12300	@enter(example)
12400	#
12500	#/B
12600	#-H
12700	#-L
12800	#/B-H
12900	#/B-L
13000	@leave(example)
13100	If /B is specified, the pin is bussed through the body.  Note
13200	that although conventionally this pin should be directly across the
13300	body from its corresponding pin, it doesn't have to be (but
13400	you'd better have good reason for not doing this!).  This is
13500	used, for example, for an enable line of a RAM which is bussed
13600	through to all other RAMs which should be enabled at the same 
13700	time.  To clear the bussing property, you can specify a new pin
13800	number followed just by a slash (if you decide, for example, to
13900	bus the pins in the other direction).  The bussed pin numbers
14000	will not be plotted.  If -H or -L are specified, the
14100	default polarity is set to High or Low.  To clear a default
14200	polarity, just use a - followed by nothing.
14300	
14400	@index(T, pin submode)
14500	@indexentry(key "T, pin submode",entry "T, pin submode",number)
14600	@indexentry(key "Pin submode, T", entry "Pin submode, T",number)
14700	
14800	T   Place text.  See T in text/property submode, page @pageref(AlphaTtpmode).
14900	
15000	@index(T, pin submode)
15003	@indexentry(key "T, pin submode",entry "T, pin submode",number)
15006	@indexentry(key "Pin submode, T", entry "Pin submode, T",number)
15009	
15100	@emphasize[T]   Enter text/property submode; see section @ref(tpmode) on page
15200	@pageref(tpmode).
15300	
15400	
15500	
15600	@label(PinModeFLPin)
15700	@index(FLPIN, pin submode)
15703	@index(Pin submode, XFLPIN)
15706	
15800	XFLPIN   Asks for a string, and marks all pins whose
15900	pin name contains the string as a substring.  Note that
16000	F is already used for something different in pin submode,
16100	so you can't use it to find the pins thus marked; see
16200	XFLPNEXT.
16300	
16400	@index(FLPNEXT, pin submode)
16403	@index(Pin submode, XFLPNEXT)
16406	
16500	XFLPNEXT   Find and unmark  the next marked pin in the set marked by XFLPIN.
16600	
16700	@index(Y, pin submode)
16703	@indexentry(key "Y, pin submode",entry "Y, pin submode",number)
16706	@indexentry(key "Pin submode, Y", entry "Pin submode, Y",number)
16709	
16800	Y   Place new or change old property; see Y on page @pageref(AlphaYtpmode).
16900	
17000	@index(Y, pin submode)
17003	@indexentry(key "Y, pin submode",entry "Y, pin submode",number)
17006	@indexentry(key "Pin submode, Y", entry "Pin submode, Y",number)
17009	
17100	Y   Change old property; see Y on page @pageref(BetaYtpmode).
17200	
17300	@leave(description)
     	00100	@newpage()
00200	@sec(Text/Property Submode)@label(tpmode)
00300	
00400	To enter text/property submode, type T from pin submode, edit submode,
00500	insert submode.
00600	
00700	Text has two controls of its position.  The
00800	@index(Offset, of text)
00900	@i[Anchor point] 
01000	@index(Anchor point, of text)
01100	@index(Text, anchor point)
01200	@index(Text, offset)
01300	of the text is the point which is associated with the text.
01400	The text may be placed anywhere relative to the anchor point
01500	by changing its @i[offset].  Thus, it is common in body
01600	definitions to associate the text of a pin number with the
01700	point defining the pin number, then move its offset so that it
01800	is positioned correctly for the drawing.  Offsets are computed
01900	relative to the drawing scale, so they tend to remain correct
02000	across various scales.
02100	
02200	@enter(description)
02300	@index(", text/property submode)
02400	@indexentry(key <", text/property submode>,entry <", text/property submode>,number)
02500	@indexentry(key <Text/property submode, ">,entry <Text/property submode, ">,number)
02600	@index(Macro, storing text)@index(Macro, storing property)
02700	@index(Text, storing in macro)@index(Property, storing in macro)
02800	
02900	"   Store the text or property text in a macro.
03000	
03100	@index(", text/property submode)
03200	@indexentry(key <", text/property submode>,entry <", text/property submode>,number)
03300	@indexentry(key <Text/property submode, ">,entry <Text/property submode, ">,number)
03400	@index(Macro, storing property name)
03500	@index(Property name, storing in macro)
03600	
03700	"   Store property name in macro.
03800	
03900	@index[$ <escape>, text/property submode]
04000	@indexentry(key "Escape, text/property submode",entry "<Escape>, text/property submode",number)
04100	@indexentry(key "Text/Property submode, escape",entry "Text/Property submode, <escape>",number)
04200	
04300	$   (<escape>)  @u[Return to edit submode].
04400	
04500	@index(A, text/property submode)
04503	@index(A, enter alter mode)
04506	@indexentry(key "A, enter alter mode", entry "A, enter alter mode",number)
04600	@indexentry(key "A, text/property submode",entry "A, text/property submode",number)
04700	@indexentry(key "Text/property submode, A",entry "Text/property submode, A",number)
04800	
04900	@emphasize[A]   Enter Alter mode on the current text; see section @ref(Altermode) on page @pageref(altermode).
05000	
05100	
05200	@index(D, text/property submode)
05300	@indexentry(key "D, text/property submode",entry "D, text/property submode",number)
05400	@indexentry(key "Text/property submode, D",entry "Text/property submode, D",number)
05500	@index(Text, deleting)
05503	@index(Deleting text)
05600	@index(Property, deleting)
05603	@index(Deleting property)
05700	
05800	@emphasize[D]   Delete text or property completely.  To make a property
05900	invisible, see K.
06000	
06100	@index(D, text/property submode)
06103	@indexentry(key "D, text/property submode",entry "D, text/property submode",number)
06106	@indexentry(key "Text/property submode, D",entry "Text/property submode, D",number)
06200	
06300	D   If the star is sitting on a property, the property is
06400	converted to ordinary text.  If it was invisible, the character
06500	size is set to the standard character size. 
06600	
06700	@index(E, text/property submode)
06800	@indexentry(key "E, text/property submode",entry "E, text/property submode",number)
06900	@indexentry(key "Text/property submode, E",entry "Text/property submode, E",number)
07000	
07100	@emphasize[E]   Exit the editor and return to drawing level.
07200	
07300	@index(F, text/property submode)
07303	@indexentry(key "F, text/property submode",entry "F, text/property submode",number)
07306	@indexentry(key "Text/property submode, F",entry "Text/property submode, F",number)
07400	
07500	F   Find the next marked text or property.
07600	
07700	@index(F, text/property submode)
07703	@indexentry(key "F, text/property submode",entry "F, text/property submode",number)
07706	@indexentry(key "Text/property submode, F",entry "Text/property submode, F",number)
07800	
07900	F   Asks for a string, then finds  all properties whose names 
08000	have the string as a substring and marks them for  retrieval with F.
08100	
08200	@index(F, text/property submode)
08203	@indexentry(key "F, text/property submode",entry "F, text/property submode",number)
08206	@indexentry(key "Text/property submode, F",entry "Text/property submode, F",number)
08300	
08400	F   Asks for a string, then finds all text and properties whose
08500	text contain the string as a substring and marks them for
08600	retrieval with F.
08700	
08800	@label(AlphaKTpmode)
08900	@index(K, text/property submode)
08903	@indexentry(key "K, text/property submode",entry "K, text/property submode",number)
08906	@indexentry(key "Text/property submode, K",entry "Text/property submode, K",number)
09000	@index(Invisible text)
09003	@index(Invisible properties)
09100	@index(Properties, invisible)
09103	@index(Text, invisible)
09200	
09300	@emphasize[K]   Stops displaying the text or property.  If text, this
09400	delete is (the same as D).  If it is a property, it is not
09500	longer displayed unless XIDENTS mode (page @pageref(XIDENTS))
09600	is set.  Note that if XIDENTS mode is set when this command is
09700	issued, you won't see any discernable difference on the screen!
09800	
09900	
10000	@index(M, text/property submode)
10003	@indexentry(key "M, text/property submode",entry "M, text/property submode",number)
10006	@indexentry(key "Text/property submode, M",entry "Text/property submode, M",number)
10100	@index(Text, moving)
10103	@index(Moving text)
10200	
10300	
10400	M   Move the text or property.  The text follows the cursor until
10500	you type a <space>.  This moves the "anchor point" of the text.
10600	To move the offset of the text around the anchor point, use XTMOVE
10700	instead.  The anchor point of text is usually to the left for
10800	body text at the left and to the right for body text at the right
10900	or the body (and inside).
11000	
11100	@index(M, text/property submode)
11103	@indexentry(key "M, text/property submode",entry "M, text/property submode",number)
11106	@indexentry(key "Text/property submode, M",entry "Text/property submode, M",number)
11200	@index(Text, moving)
11203	@index(Moving text)
11300	@index(Property, moving)
11303	@index(Moving property)
11400	
11500	M   Obsolete.  Change text offset from text location.  After this
11600	command, the offset is not automatically recalculated when the text
11700	is changed.
11800	Use XTMOVE instead, which moves with a finer adjustment than
11900	cursor steps.
12000	
12100	
12200	@index(M, text/property submode)
12300	@indexentry(key "M, text/property submode",entry "M, text/property submode",number)
12400	@indexentry(key "Text/property submode, M",entry "Text/property submode, M",number)
12500	@index(Text, moving)
12503	@index(Moving text)
12600	@index(Property, moving)
12603	@index(Moving property)
12700	
12800	M   Move the text or property.  Like M except that the text is
12900	moved to the cursor first.
13000	
13100	@label(AlphaTTpMode)
13200	@index(T, text/property submode)
13300	@indexentry(key "T, text/property submode",entry "T, text/property submode",number)
13400	@indexentry(key "Text/property submode, T",entry "Text/property submode, T",number)
13500	
13600	@emphasize[T]   Asks for text, and places it at the current cursor position.
13700	If
13800	@index(, <crlf>)
13850	@indexentry(key "Crlf, ",entry "<Crlf>, ",number)
13900	@indexentry(key "crlf, inserting in string",entry "<Crlf>, inserting in string",number)
14000	a  appears, it is replaced with a <crlf>.  If the character
14100	"\"
14200	@index(\, in text string)
14300	is the first character in the string, the following character
14400	@index(Text scale)
14403	@index(Scaling text)
14500	will be interpreted as the character size.  If "\V"
14600	@index(\V, vertical text)
14603	@index(Text, vertical)
14606	@index(Vertical text)
14700	@indexentry(key "V, vertical text", entry "\V, vertical text", number)
14800	appears first in the string, the following character will
14900	be interpreted as the character size and the text will be
15000	plotted vertically.  A point is displayed at the
15100	beginning of vertical text.
15200	
15300	
15400	@index(XTMOVE)
15403	@index(TMOVE)
15500	@index(Text, moving)
15600	@index(Moving text)
15700	
15800	XTMOVE   Move the text or property offset.  Moves it in very fine steps.
15900	See XTMOVE on page @pageref(XTMOVE).
16000	
16100	@label(AlphaYtpmode)
16200	@index(Y, text/property submode)
16203	@indexentry(key "Y, text/property submode",entry "Y, text/property submode",number)
16206	@indexentry(key "Text/property submode, Y",entry "Text/property submode, Y",number)
16300	@index(Property, setting)
16400	
16500	Y   Asks for a property name.  It then asks for text to associate
16600	with the property.  If the property does not exist, it is now
16700	created.  The text is placed as in T, page @pageref(AlphaTtpmode),
16800	but may also be referred to by its property name.  If the property
16900	exists, its text is replaced.  If either the property name or the
17000	text is ended with <escape> ($), the command is aborted.
17100	To make a property invisible, see K, page @pageref(AlphaKtpmode).
17200	
17300	@label(BetaYtpmode)
17400	@index(Y, text/property submode)
17403	@indexentry(key "Y, text/property submode",entry "Y, text/property submode",number)
17406	@indexentry(key "Text/property submode, Y",entry "Text/property submode, Y",number)
17500	@index(Property, altering)
17503	@index(Property, changing)
17600	
17700	Y   Asks for a property name.  Will do unique disambiguation on
17800	a partially specified name.  If the property exists, you are
17900	prompted for the new text.  If the property name or text is
18000	ended with an <escape> ($), the command is aborted.
18100	
18200	@index(Z, text/property submode)
18203	@indexentry(key "Z, text/property submode",entry "Z, text/property submode",number)
18206	@indexentry(key "Text/property submode, Z",entry "Text/property submode, Z",number)
18300	
18400	Z   Recalculates the offset for the text in order to center the
18500	text over the anchor point.  Text changes will cause the offset to
18600	be updated.
18700	@leave(description)
     	00100	@chap(Set mode)@label(Setmode)
00200	
00300	Set mode is a way of defining a set of bodies and points that
00400	are to be acted upon as a group.  Sets may be moved, written out,
00500	deleted, etc.   Once a set is created, it is remembered as part of
00600	the drawing.  Frequently sets are created only for doing a
00700	single operation, such as moving a group of bodies with their
00800	text and connections, and thus may be deleted immediately, but
00900	they must be deleted explicitly.  In other cases, sets may
01000	remain around for the life of the drawing.
01100	It is usually a good idea to leave sets around, since if you
01200	had to move something once, you will probably have to move the
01300	same something again.  Sets do not cost much to keep around.
01400	
01500	A set is initially created by drawing a box around the bodies and
01600	points which are supposed to be in it using the "+" and "-" commands.
01603	When the terminating "-" is typed, the bodies and points which
01606	are in the set are marked with large "B" and "P" designators,
01609	and the center of gravity of the set is marked with an "S".
01612	   Individual points or
01700	bodies may be added or deleted by use of the &, &, # and #
01800	commands in point mode or body mode.  Sets may be combined by those
01900	commands in set mode.  A point or body may belong to more than one
02000	set.
02003	
02006	After many insertions or deletions
02009	@label(XSETCEN2)
02012	of bodies or points, the point on the drawing which represents
02015	the "center" of the set may no longer be anywhere near the
02018	physical center of the set.  The center is not recomputed during
02021	the addition or deletion of bodies or points.  The
02024	@index(SETCEN)@index(XSETCEN)
02027	XSETCEN command, page @pageref(XSETCEN), will recompute the
02030	center of all sets currently defined.  
02100	
02200	@enter(description)
02300	@index(&, set mode)
02303	@indexentry(key "&, set mode",entry "&, set mode",number)
02306	@indexentry(key "Set mode, &",entry "Set mode, &",number)
02400	@index(Set, adding to set)@index(Union of sets)@index(Set, union)
02500	@index(Adding set to set)
02600	
02700	&   The closest set is added to the current set.  If there
02800	is no current set, this creates a new set.
02900	
02950	@label(BetaAmpersandSet)
03000	@index(&, set mode)
03050	@indexentry(key "&, set mode",entry "&, set mode",number)
03075	@indexentry(key "Set mode, &",entry "Set mode, &",number)
03100	
03200	&   The closest set is made the current set.
03300	
03400	@index(&, set mode)
03403	@indexentry(key "&, set mode",entry "&, set mode",number)
03406	@indexentry(key "Set mode, &",entry "Set mode, &",number)
03500	&   Clears the current set.
03600	
03700	@index(#, set mooe)
03703	@indexentry(key "#, set mode",entry "#, set mode",number)
03800	@indexentry(key "Set mode, #",entry "Set mode, #",number)
03900	
04000	#   Removes all members of the closest set from the current set.
04100	This command is illegal if the current set is the closest set.
04200	
04300	@index(#, set mode)
04303	@indexentry(key "#, set mode",entry "#, set mode",number)
04306	@indexentry(key "Set mode, #",entry "Set mode, #",number)
04400	
04500	#   Remove all members of the closest set from all other sets,
04600	then delete the closest set (deleting the set does not delete
04700	the elements of the set from the drawing).
04800	
04900	@index(+, set mode)@index(Set, creating)@index(Creating a set)
05000	
05100	@emphasize[+]   Draw a box around the points and bodies you would like in
05200	the set.  The box may be of arbitrary shape (not just rectangular.
05300	Type a + to start a line.  The line will then follow the cursor
05400	motion.  Each time a + is typed, the current line is "frozen" and
05500	a new line segment is started.  See - to close the box.
05600	
05700	@index(-, set mooe)@index(Set mode, -)
05800	
05900	@emphasize[-]   Closes the box.  All members of the set will then be
06000	displayed by flashing B's or P's.  The "center" of the set is
06100	indicated by a large S.
06200	
06300	@index(D, set mode)@indexentry(key "D, set mode",entry "D, set mode",number)@indexentry(key "Set mode, D",entry "Set mode, D",number)
06400	@index(Set, deleting)@index(Deleting a set)
06500	
06600	@emphasize[D]   Delete the closest set.  Note that deleting the set
06700	@u[does not] delete the elements of the set!  To delete the
06703	elements of the set, use D.
06800	
06900	@index(D, set mode)@indexentry(key "D, set mode",entry "D, set mode",number)@indexentry(key "Set mode, D",entry "Set mode, D",number)
07000	@index(Set, deleting elements of)@index(Elements of set, deleting)
07100	
07200	D   Delete all the elements of the closest set from the picture.
07300	
07400	@index(D, set mode)@indexentry(key "D, set mode",entry "D, set mode",number)@indexentry(key "Set mode, D",entry "Set mode, D",number)
07500	@index(Set, deleting complement of)
07600	
07700	D   Delete anything not in the closest set.  The  name is
07800	forgotten.
07900	
08000	@index(J, set mode)@indexentry(key "J, set mode",entry "J, set mode",number)@indexentry(key "Set mode, J",entry "Set mode, J",number)
08100	J   Move the cursor to the current set, thus making it the closest
08200	set.
08400	
08500	
08600	@index(K, set mode)@indexentry(key "K, set mode",entry "K, set mode",number)@indexentry(key "Set mode, K",entry "Set mode, K",number)
08700	@index(Text deleting)@index(Deleting text)
08800	K   Delete all text on the points in the closest set.
08900	
09000	@index(M, set mode)@indexentry(key "M, set mode",entry "M, set mode",number)@indexentry(key "Set mode, M",entry "Set mode, M",number)
09100	@index(Moving a set)@index(Set, moving)
09200	
09300	@emphasize[M]   Moves the cursor to the center of the set.  The set
09400	will now follow the cursor until a <space> is typed.   Lines are
09500	massaged as the elements of the set are moved.
09600	
09700	@index(M, set mode)@indexentry(key "M, set mode",entry "M, set mode",number)@indexentry(key "Set mode, M",entry "Set mode, M",number)
09800	
09900	M   Like M, except that it first moves the center of the set to the cursor.
10000	
10100	@index(Set, copying)@index(Copying a set)
10200	@index(P, set mode)@indexentry(key "P, set mode",entry "P, set mode",number)@indexentry(key "Set mode, P",entry "Set mode, P",number)
10300	
10400	P   Makes a copy of the closest set at the current cursor
10500	location, then enters set-move mode (M).
10600	
10700	@index(DELSET)
10800	@index(Sets, deleting all)
10900	@index(XDELSET)
11000	
11100	XDELSET   Deletes all sets.  Does not delete their contents!
11200	
11300	@index(SETCEN)@index(XSETCEN)
11400	XSETCEN   Recalculates the center of all sets.  This is necessary
11500	if a lot of inserting and deleting of elements has been going
11600	on with sets.
11700	
11800	@index(XSETWRT)
11900	@index(SETWRT)
12000	
12100	XSETWRT   Performs an W operation (see page @pageref(alphaW)),
12200	but only the members of the current set are written out.
12300	
12400	XWRTSET   Same as XSETWRT.  This is in case you forget the order
12500	of "WRT" and "SET".
12600	
12700	@leave(description)
     	00100	@chap(Body Text/Property Mode)@label(btpmode)
00200	
00300	This is a very special mode; it allows you to supply
00400	 or change information which is local only to that
00500	particular instance of the body in the drawing.  Normally, except
00503	for properties set @i[in addition to body definition properties],
00506	 such changes should be
00600	made only to the body definition.  Thus, if you use this mode,
00700	you may be asking for trouble.  However, special circumstances may
00800	require using it, so it is sometimes necessary.  Normally, you
00900	should use body edit mode, chapter @ref(editmode).
01000	
01100	
01200	To enter body text/property mode, type Y in body mode.
01300	Most of the commands below are the same as in body edit text/property
01400	submode; see section @ref(Tpmode) on page @pageref(tpmode).
01500	@index(Y, enter body text/property mode)
01503	@indexentry(key "Y, enter body text/property mode",entry "Y, enter body text/property mode",number)
01600	@enter(description)
01700	@index(", Body Text/Property mode)
01800	@indexentry(key <", Body Text/propterty mode>,entry <", Body Text/Property mode>,number)
01900	@indexentry(key <Body Text/property mode, ">,entry <Body Text/property mode, ">,number)
02000	@index(Macro, storing body text)
02100	@index(Body text, storing into macro)
02200	
02300	"   Store closest text into macro.
02400	
02500	@index(", Body Text/Property mode)
02600	@indexentry(key <", Body Text/propterty mode>,entry <", Body Text/Property mode>,number)
02700	@indexentry(key <Body Text/property mode, ">,entry <Body Text/property mode, ">,number)
02800	@index(Macro, storing property name)
02900	@index(Property name, storing into macro)
03000	
03100	"   Store property name into macro.
03200	
03300	
03400	@index(A, Body Text/Property mode)@indexentry(key "A, Body Text/Property mode",entry "A, Body Text/Property mode",number)
03500	@index(Altering text)
03600	@index(Altering property)
03700	@indexentry(key "Body Text/property mode, A",entry "Body Text/property mode, A",number)
03800	
03900	A   Enter alter mode with closest text or property.  See section @ref(Altermode) on page @pageref(Altermode).
04000	
04100	@index(D, Body Text/Property mode)@indexentry(key "D, Body Text/Property mode",entry "D, Body Text/Property mode",number)
04200	@indexentry(key "Body Text/property mode, D",entry "Body Text/property mode, D",number)
04300	@index(Deleting body text or property)
04400	@index(Body text, deleting)
04500	@index(Body property, deleting)
04600	@index(Property, deleting)
04700	
04800	D   Delete text or property.
04900	
05000	@index(D, Body Text/Property mode)@indexentry(key "D, Body Text/Property mode",entry "D, Body Text/Property mode",number)
05100	@indexentry(key "Body Text/property mode, D",entry "Body Text/property mode, D",number)
05200	
05300	D   Make property into ordinary text.
05400	
05500	@index(E, enter body editor)
05600	@index(E, Body Text/Property mode)@indexentry(key "E, Body Text/Property mode",entry "E, Body Text/Property mode",number)
05700	@indexentry(key "Body Text/property mode, E",entry "Body Text/property mode, E",number)
05800	
05900	E   Enter the body editor with the current body.  See section @ref(Editmode), page @pageref(Editmode).
06000	
06100	
06200	@index(F, Body Text/Property mode)@indexentry(key "F, Body Text/Property mode",entry "F, Body Text/Property mode",number)
06300	@indexentry(key "Body Text/property mode, F",entry "Body Text/property mode, F",number)
06400	
06500	F   Find the next text or property which was marked (e.g., by
06600	F or F).
06700	
06800	@index(F, Body Text/Property mode)@indexentry(key "F, Body Text/Property mode",entry "F, Body Text/Property mode",number)
06900	@indexentry(key "Body Text/property mode, F",entry "Body Text/property mode, F",number)
07000	
07100	F   Find and mark all properties which have the string you
07200	type as a substring of their property names.
07300	
07400	@index(F, Body Text/Property mode)@indexentry(key "F, Body Text/Property mode",entry "F, Body Text/Property mode",number)
07500	@indexentry(key "Body Text/property mode, F",entry "Body Text/property mode, F",number)
07600	
07700	F   Find and mark all text or properties which have the string
07800	you type as a substring of their property names.
07900	
08000	
08100	@index(K, Body Text/Property mode)
08150	@indexentry(key "K, Body Text/Property mode",entry "K, Body Text/Property mode",number)
08200	@indexentry(key "Body Text/property mode, K",entry "Body Text/property mode, K",number)
08300	@index(Invisible properties)
08400	@index(Property, making invisible)
08500	
08600	K   Like K in Body text/property submode; see K on page
08700	@pageref(AlphaKtpmode).  However, this command applies only
08800	to the current body.
08900	
09000	@index(M, Body Text/Property mode)@indexentry(key "M, Body Text/Property mode",entry "M, Body Text/Property mode",number)
09100	@indexentry(key "Body Text/property mode, M",entry "Body Text/property mode, M",number)
09200	@index(Moving body text)
09300	@index(Moving properties)
09400	
09500	M   Move text or property.  Text follows cursor until an
09600	<escape> or <space> is typed.
09700	
09800	@index(M, Body Text/Property mode)
09900	@indexentry(key "M, Body Text/Property mode",entry "M, Body Text/Property mode",number)
10000	@indexentry(key "Body Text/property mode, M",entry "Body Text/property mode, M",number)
10100	
10200	M   Move text or property offset.
10300	This is obsolete; use XTMOVE (page @pageref(XTMOVE)).
10400	
10500	@index(M, Body Text/Property mode)
10600	@indexentry(key "M, Body Text/Property mode",entry "M, Body Text/Property mode",number)
10700	@indexentry(key "Body Text/property mode, M",entry "Body Text/property mode, M",number)
10800	
10900	M   Move text as in M, but first move the text to the cursor.
11000	
11100	@index(T, Body Text/Property mode)
11200	@indexentry(key "T, Body Text/Property mode",entry "T, Body Text/Property mode",number)
11300	@indexentry(key "Body Text/property mode, T",entry "Body Text/property mode, T",number)
11400	@label(AlphaTbtpMode)
11500	
11600	T   Similar to T in edit text/property submode (page @pageref(AlphaTtpmode)), but the
11700	text is associated with the current body, not the definition.
11800	This might be used to attach comments to a particular body.
11803	
11806	@index(LPROPS)@index(XLPROPS)
11809	XLPROPS   Displays the current list of local and body definion
11812	properties associated with the nearest body.  If a local definition
11815	has over-ridden a body property definition, only the local
11818	definition is displayed.
11900	
12000	@Label(AlphaYbtpMode)
12100	@index(Y, Body Text/Property mode)@indexentry(key "Y, Body Text/Property mode",entry "Y, Body Text/Property mode",number)
12200	@indexentry(key "Body Text/property mode, Y",entry "Body Text/property mode, Y",number)
12300	
12400	Y   Like Y in edit text/property submode (page @pageref(AlphaYtpmode)),
12500	but if the property already exists in the body definition, that
12600	version is no longer displayed.  The new property definition is not
12700	affected by changes to the body definition.
12800	
12900	@label(BetaYbtpMode)
13000	@index(Y, Body Text/Property mode)@indexentry(key "Y, Body Text/Property mode",entry "Y, Body Text/Property mode",number)
13100	@indexentry(key "Body Text/property mode, Y",entry "Body Text/property mode, Y",number)
13200	
13300	Y   Like Y in edit text/property submode (page @pageref(BetaYtpmode)),
13400	but if the property already exists in the body definition, that
13500	version is no longer displayed.  The new property definition is not
13600	affected by changes to the body definition.
13700	
13800	@index(Z, Body Text/Property mode)@indexentry(key "Z, Body Text/Property mode",entry "Z, Body Text/Property mode",number)
13900	@indexentry(key "Body Text/property mode, Z",entry "Body Text/property mode, Z",number)
14000	
14100	Z   Recalculates the text offset to center it over the move-point.
14200	Text is now automatically offset when changed.
14300	
14400	@leave(description)
     	00100	@chap(Line mode)@label(linemode)
00200	To enter line mode, type L.
00300	@index(Line mode, entering)@index(L, enter line mode)
00303	@indexentry(key "L, enter line mode",entry "L, enter line mode",number)
00400	Line mode has only a few commands.  It is used to fix up
00500	lines that are not quite right.  Two cases which happen
00600	are:
00700	@enter(itemize)
00800	A line has to be routed around a body which has been placed
00900	(or will be placed) later.  This involves, essentially, creating
01000	new points on the line.
01100	
01200	A body definition has been changed, so the pins are in different
01300	places, and the lines connecting them are no longer horizontal
01400	or vertical.  Although the XMUNG command can sort of fix this
01500	up (see page @pageref(XMUNG)), it is not always successful.
01600	@leave(itemize)
01700	
01800	@enter(description)
01900	@index(B, line mode)
01903	@indexentry(key "B, line mode",entry "B, line mode",number)
02000	@label(AlphaBLine)
02100	@indexentry(key "Line mode, B",entry "Line mode, B",number)
02200	
02300	@emphasize[B]   Puts a bend in the line even with the cursor (makes it
02400	into three segments).  You are now moving the midpoint of the line.
02500	The midpoint will follow the cursor until you type a <space>.
02600	In the most common way of using this, you immediately type a
02700	<space> and go into point mode (via P) and move one of the
02800	newly-created points.
02900	
03000	@label(BetaBline)
03100	@indexentry(key "Line mode, B",entry "Line mode, B",number)@index(B, line mode)
03103	@indexentry(key "B, line mode",entry "B, line mode",number)
03200	
03300	@emphasize[B]   Puts a point on the line even with the cursor.  The point
03400	will now follow the cursor until you type a <space>.  This is
03500	particularly useful for straightening out non-horizontal/vertical
03600	lines.
03700	
03800	@indexentry(key "Line mode, D",entry "Line mode, D",number)@index(D, line mode)
03803	@indexentry(key "D, line mode",entry "D, line mode",number)
03806	@index(Line, deleting)@index(Deleting a line)
03900	@label(AlphaDLine)
03903	
04000	@emphasize[D]   Delete the line.  Does not affect its endpoints.  This is
04100	also a way of deleting a line segment without deleting all the segments
04200	and text connected to it, as D in point mode (page @pageref(AlphaDPoint))
04300	would do.
04400	
04500	@leave(description)
     	00100	@chap(Alter mode)@label(altermode)
00200	@sec(Entering alter mode)
00300	To enter alter mode, type A in text mode, text/property mode,
00303	@indexentry(key "A, enter alter mode",entry "A, enter alter mode",number)
00400	or body text/property mode.
00500	To alter a macro, alter mode is entered with the XAMACRO
00600	@index(XAMACRO)
00700	command (page @pageref(XAMACRO)).  Partial alterations
00800	to a macro may be discarded by leaving alter mode with
00900	@index(XQUIT)
01000	an XQUIT command (page @pageref(XQUIT)).
01100	@index(A, enter alter mode)@index(Alter mode, entering)
01103	
01200	
01300	@sec(Alter commands)
01400	Alter mode is like the SOS alter mode we know and love, except
01500	it's different.  Just sufficiently different to surprise you
01600	occasionally.
01700	Wherever evident, the differences are @u[underlined] in the
01800	section below.
01803	
01806	Notable differences are the fact that the search commands can
01809	look for strings instead of single characters, the
01812	"wildcard" characters for pattern matching are different
01815	(section @ref(pattern), page @pageref(pattern)) and
01818	some transliteration of otherwise non-printing characters
01821	is performed (section @ref(translit), page @pageref(translit)).
01824	
01900	
02000	@enter(description)
02100	@index(Numbers, alter mode)
02200	0...9   Numbers are accumulated and remembered. 
02300	They provide iteration counts for the commands.
02400	
02500	@index(#, alter mode)@index(Alter mode, #)
02600	@index<Macro, storing number (alter mode)>
02700	
02800	<n>#   Search for the <n>th number (a contiguous string of digits).
02900	Store this number in a macro.
03000	This macro may now be called whenever this number is needed.
03100	
03200	@index[$ <escape>, alter mode]
03300	@indexentry(key "escape, alter mode",entry "<Escape>, alter mode",number)
03400	@indexentry(key "Alter mode, escape",entry "Alter mode, <escape>",number)
03500	
03600	$   (<escape>)  At alter command level: @u[leave alter mode].
03700	In C command: @u[leave next character unchanged].
03800	
03900	
04000	@index(-, alter mode)
04100	-   Precedes a numeric argument to make it negative.  This is 
04200	useful for some commands, such as delete and space over.
04300	
04400	@index(Size of text, altering)
04500	@index(Altering text size)
04600	
04700	\<size>   In text alter mode and text/property alter mode only!  This
04800	sets the character size to use for this piece of text.  The <size>
04900	is specified as in text typein, page @pageref(AlphaTtpmode):
05000	@enter(example)
05100	@enter(center)
05200	<size> = <sizedigit> | V<sizedigit>
05300	@leave(center)
05400	@leave(example)
05500	The size digit is a scale in the range 1-4.  The "V", if given,
05600	causes the text to be plotted vertically.
05700	
05800	@indexentry(key "Alter mode, backspace",entry "Alter mode, <backspace>",number)
05803	@indexentry(key "Backspace, alter mode",entry "<Backspace>, alter mode",number)
05900	<n><backspace>   Move backwards <n> characters; if <n> negative,
06000	move forward <n> characters.
06100	
06200	
06300	@index(Character, changing)@index(Changing a character)
06400	@index(Alter mode, C)@index(C, alter mode)
06500	<n>C<string>   Changes the next <n> characters in the text.  An
06600	<escape> ($) or carriage return will @u[leave the corresponding
06700	text character unchanged] (!).
06800	
06900	
07000	@index(Character, deleting)
07100	@index(Deleting a character)
07200	@index(Alter mode, D)@index(D, alter mode)
07300	
07400	<n>D   Delete <n> characters.  If <n> is negative, deletes <n>
07500	characters before the pointer.  If the pointer is at the end (positive
07600	<n>) or beginning (negative <n>), this command does nothing.
07700	
07800	@index(F, alter mode)@index(Alter mode, F)
07900	@label(AlterF)
08000	
08100	@enter(multiple)
08200	<n>F<string><t>   Searches for the <n>th occurence of the <string> as a
08300	substring of the current text.  If found, and <t> is an
08400	<escape> ($), then delete this string.  If <t> is not an
08500	<escape>, the only other choice is that <t> is a <crlf>.  If
08600	<t> is <crlf>, the string is not deleted.
08700	
08800	If the <string> is null, the previous search string is used.
08900	If the previous search string is also null, no search is done.
09000	
09100	For details of the string match, see page @pageref(pattern).
09200	@leave(multiple)
09300	
09400	@index(I, alter mooe)@index(Alter mode, I)
09500	I   Asks for insertion text.  The string you type is terminated
09600	with a <crlf>.  The text is then inserted before the current
09700	character, which remains current (the text is inserted to the left
09800	of the cursor).
09900	
10000	@index(K, alter mode)@index(Alter mode, K)
10100	
10200	<n>K<char>   Delete up to @u[and including] then <n>th occurrence
10300	of the <char>.  If <char> does not appear at least <n> times,
10400	no deletion is done, @u[but you are left at the end of the line].
10500	
10600	@index(Alter mode, N)@index(N, alter mode)
10700	<n>N   Search for the <n>th occurrence of a number (a contiguous
10800	string of digits).  If there are not at least <n> numbers in the
10900	text, you are left at the end of the line.
11000	
11100	
11200	@index(Alter mode, R)@index(R, alter mode)
11300	<n>R   Equivalent to <n>DI.  Deletes the specified number of
11400	characters and accepts a replacement string.
11500	
11600	
11700	@index(S, alter mode)@index(Alter mode, S)
11800	<n>S<char>   Move to <char>.  Moves to end of text if <char> not found.
11900	If found, pointer is placed @u[after] the character (!).
12000	
12100	@indexentry(key "Alter mode, space",entry "Alter mode, <space>",number)
12103	@indexentry(key "Space, alter mode",entry "<Space>, alter mode",number)
12200	<n><space>   Move forward <n> spaces.  If <n> negative, move backwards
12300	<n> spaces.  If at the end of the line (<n> positive) or beginning
12400	of the line (<n> negative) nothing happens.
12500	
12600	@index(U, alter mode)@index(Alter mode, U)
12700	<n>U   Search for the <n>th occurrence of a number (a contiguous
12800	string of digits) and delete it.
12900	
13000	
13100	@leave(description)
13200	
13300	@sec(Pattern matching)
13400	
13500	@label(pattern)
13600	
13700	Pattern matching for the F command is also used for the various
13800	search commands that locate body names, property names, text, etc.
13900	The pattern match is done as follows:
14000	@enter(itemize)
14100	If the flag for SPACES is off (default, see page @pageref(XSPACES) for
14200	the XPSACES command to change this), then spaces in either the
14300	search string or the target string are ignored.  The character
14303	@indexentry(key "Crlf, ",entry "<Crlf>, ",number)
14400	"", representing <crlf> in some contexts, is converted to a
14500	space for purposes of the comparison.
14600	
14700	If the flag for EXACT case match is off (default, see page @pageref(XEXACT) for the XEXACT command to change this), then lower case characters
14800	in the search string and target string are converted to upper case.
14900	
15000	The following special characters are recognized in patterns:
15100	@enter(description)
15200	@index(|, beginning of line pattern)
15300	@index(Pattern |, beginning of line)
15400	@index(Pattern |, end of line pattern)
15500	@index(|, end of line pattern)
15600	@index(Beginning of line, |)@index(End of line, |)
15700	|   Beginning or end of line.
15800	
15900	@index(, any character pattern)
16000	@index(Pattern , any character)
16100	   Any character.
16200	
16300	@index(}, invert pattern match)
16400	@index(Pattern }, invert)
16500	}   Invert match condition on next thing (e.g, }$, any non-letter).
16600	
16700	@index(, any number of pattern)@index(Pattern , any number of)
16800	   Any number of the next thing will match, including 0.  The
16900	smallest string satisfying the match will be used.
17000	
17100	@index(, quote pattern)@index(Pattern , quote)@index(Quote, )
17200	   Quote the next character (e.g.,  to find an "infinity").
17300	
17400	@index<$ (dollar) pattern, any letter>@index<Pattern $ (dollar), any letter>
17500	@index(Any letter, $)@index(Letter, any, $)
17600	$   (dollar sign)  Matches any letter.
17700	
17800	@index(% pattern, any digit)@index(Any digit, %)@index(Pattern %, any digit)
17900	@index(Digit, any, %)
18000	
18100	%   Matches any digit.
18200	
18300	@index( pattern, any alphanumeric)@index(Any alphanumeric, )
18400	@index(Pattern , any alphanumeric)@index(Alphanumeric, any, )
18500	   Matches any alphanumeric.
18600	@leave(description)
18700	@leave(itemize)
18703	
18706	@sec(Transliteration)@label(translit)
18709	
18712	Certain transliterations are performed to handle non-printing characters
18715	in editing.  These transliterations are somewhat inconsistent, in
18718	that a <crlf> is represented in some contexts by the symbol
18721	@indexentry(key "Crlf, ",entry "<Crlf>, ",number)
18724	 while in other contexts it is represented by
18727	the symbol .
18730	@indexentry(key "Crlf, ",entry "<Crlf>, ",number)
18733	However, you can distinguish these two cases by
18736	looking at the screen.
18739	
18742	@enter(example)
18745	Macro char     Editor char
18748	<crlf>         <for all> @r()
18749	<escape>       <not equal> @r(})
18751	@leave(example)
     	00100	@chap(Macros)
00200	@label(macros)
00300	@index(Macros)
00400	
00500	@sec(Introduction to macros)
00600	Macros provide a method of storing away some standard operations
00700	for your drawings so you don't have to retype them.  There
00800	are several varieties of macros and several ways of storing them:
00900	@enter(itemize)
01000	Temporary macros, which are defined by using ;P, are used for
01100	one-shot iterations, such as laying down a set of signal
01200	names or wires.  They are discarded after they are finished.
01300	
01400	Permanent macros, which have names, are stored in the core
01500	image for later use.
01600	
01700	A permanent macro which has been marked for saving with the
01800	XSMACRO command (page @pageref(XSMACRO)) will be saved
01900	with the drawing and brought in with it.
02000	
02100	A macro which has not been marked for saving can still be
02200	saved on a macro-definition file by using the XWMACRO
02300	command (page @pageref(XWMACRO)).  Such macro files can
02400	be loaded with the XIMACRO command (page @pageref(XIMACRO)).
02500	
02600	@leave(itemize)
02700	
02703	@index(Macro, deleting)
02706	@index(X-SMACRO)@index(-SMACRO)
02709	@indexentry(key "SMACRO-",entry "-SMACRO",number)
02712	@indexentry(key "XSMACRO-",entry "X-SMACRO",number)
02800	A macro can be deleted from a drawing by using the X-SMACRO
02900	command, i.e., it will not be saved with the drawing, or
03000	it can be deleted immediately by using the XDMACRO command (page @pageref(XDMACRO)).
03003	
03006	In general, a macro can be called whenever a command is expected.
03009	Some macros which return values, such as ;A (page @pageref(semicolonA)),
03012	can be used anywhere typein is expected.  However, to distinguish
03015	the ; which is invoking the macro from a ; which may be part of
03018	the expected text, you must use some shift key, e.g., ;, ; or
03021	;.
03100	
03200	Macros are defined interactively; you type in commands and they
03300	are both executed and stored in the macro, so you can see what
03400	is happening.  After you have defined one complete action,
03500	e.g., start line, move right some distance, attach line to 
03600	nearest point, move back to the beginning, move down one -distance,
03700	you give a repeat count which includes the iteration you have
03800	just done (e.g., to lay down eight wires, you would use ;R8 even
03900	though there are only seven left to do).  The macro is
04000	then executed that number of times.  If it was a permanent
04100	macro, you can call it again to get the same set of actions
04200	performed.
04300	
04400	By using the ;A or ;N counters, you can generate signal names
04500	or connector names in sequence, e.g., BUS DATA 01, BUS DATA 02,
04600	etc.
04700	
04800	Macros may nest to 102 levels; the only requirement is that each
04900	macro contain an equal number of ;P and ;R commands.
05000	
05100	
05200	@sec(Macro commands)
05300	The following  commands  operate on
05400	macros:
05500	@enter(description)
05600	
05700	@index(;#, macro)
05800	@indexentry(key "Macro, #;",entry "Macro, ;#",number)
05900	@indexentry(key "#, macro",entry ";#, macro",number)
06000	
06100	;#<char>   If the <char> is not a letter, does a ;= on it.
06200	Otherwise, it converts the letter to a number using
06300	sequential numbers for the DEC alphabet:
06400	@enter(example)
06450	@label(DECalphabet)
06500	@center(ABCDEFHJKLMNPRSTUVWXYZ)
06600	@index(Alphabet, DEC)
06700	@index(DEC alphabet)
06800	@leave(example)
06900	This is the inverse of ;LD (page @pageref(SemicolonLD))
07000	
07100	;=<char>   Returns a decimal code of the character, minus
07200	64.  Thus, for alphabetic characters, A=1, B=2, ...
07300	This is the inverse function of ;L (page @pageref(SemicolonL)).
07400	
07500	
07600	@index(;^, macro)@indexentry(key "Macro, ^;",entry "Macro, ;^",number)@indexentry(key "^, macro",entry ";^, macro",number)
07700	;^<char>   Returns the character whose ascii code is 100 (octal)
07800	less than that of the character typed.  Lower case is
07900	converted to upper case before processing this command.  This
08000	allows the typein of control characters by using their letter,
08100	e.g., ;^C produces the control-C character.
08200	
08300	@index(:, macro)@indexentry(key "Macro, :",entry "Macro, :",number)
08400	:   Shorthand for ";R0".  See ;R on page @pageref(SemicolonR).
08500	
08700	@label(SemicolonA)
08800	@indexentry(key "Macro, A;",entry "Macro, ;A",number)@indexentry(key "A, macro",entry ";A, macro",number)@index(;A, macro)
08900	
08950	@enter(multiple)
09000	;<w>A<n>,<m>,<i>    Substitute at this point the number <n>, containing
09100	at least <w> digits,  and
09200	increment in by M each time through the macro <i> levels up from
09300	the current one.  <n> and <m> may be negative.  If <i> is defaulted,
09400	0 is assumed (each time through the current macro); if <m> is
09500	defaulted, 1 is assumed.
09600	
09700	If <w> is omitted, 1 is assumed for the minimum width.
09800	
09850	For an example of the use of ;A, see section @ref(ALexample), page
09875	@pageref(ALexample).
09900	
10000	@leave(multiple)
10100	@label(SemicolonC)
10200	@index(Macro, calling)@indexentry(key "Macro, C;",entry "Macro, ;C",number)@indexentry(key "C, macro",entry ";C, macro",number)@index(;C, call macro)
10300	
10400	@index(Call macro)
10500	@emphasize[;C<name>]   Call named macro.
10600	
10700	@label(semicolonD)
10800	@index(Macro, defining)@indexentry(key "Macro, D;",entry "Macro, ;D",number)@indexentry(key "D, macro",entry ";D, macro",number)@index(;D, define macro)
10900	
11000	@index(Define macro)@index(Create macro)
11100	;D<name>   Start a permanent macro.  The macro is not executed
11200	during its definition.  If the repeat count is greater than 1,
11300	the remaining iterations are also ignored at definition time.
11400	
11500	@indexentry(key ";D1, define macro",entry ";1D, define macro",number)
11503	@indexentry(key "Macro, D;1",entry "Macro, ;1D",number)
11506	
11600	;1D<name>   Same as ;D except that an implicit XSMACRO is done
11700	so the macro is saved.  See XSMACRO, page @pageref(XSMACRO).
11800	
11900	@indexentry(key "Macro, E;",entry "Macro, ;E",number)@indexentry(key "E, macro",entry ";E, macro",number)@index(;E, eval)
12000	;E<name>   Terminate the <name> with a <crlf>.  Everything up
12100	to the next ;R0 (or :) is stored in the named macro after
12200	evaluation by the macro processor.
12300	
12400	@indexentry(key "Macro, F;",entry "Macro, ;F",number)@indexentry(key "F, macro",entry ";F, macro",number)@index(;F, conditional)
12500	@index(Conditional, in macro)
12600	;F<n><flag>   Terminate with <crlf>.  The <flag> may be preceded
12700	with a "-" to invert the test.  <n>  represents a count of
12800	macro levels.  If the <flag> is true, all characters are
12900	eaten but not executed until a macro <n> levels up from this
13000	one is left.  Whatever that means.  <<Examples, anyone?>>
13100	The current flag names are defined:
13200	@enter(description)
13300	@index(ABOL, macro flag)@index(Flag ABOL)@index(Conditional, ABOL)
13400	ABOL   True if alter mode cursor at the beginning of a line.
13500	
13600	@index(AEOL, macro flag)@index(Flag AEOL)@index(Conditional, AEOL)
13700	AEOL   True if alter mode cursor at the end of a line.
13800	
13900	@index(AFIND, macro flag)@index(Flag AFIND)@index(Conditional, AFIND)
14000	AFIND   True if the last alter mode F, S, K, N, U or # command
14100	actually found something.  See chapter @ref(Altermode).
14200	
14300	@index(CLOSES, macro flag)@index(Flag CLOSES)@index(Conditional, CLOSES)
14400	
14500	CLOSES   True if close to something <<appropriate to the current mode?>>
14600	
14700	@index(DSKEND, macro flag)@index(Flag DSKEND)@index(Conditional, DSKEND)
14800	DSKEND   True if no XDSKIN file (page @pageref(XDSKIN)) is open.  To
14900	facilitate the use of this flag, the end of file condition will
15000	look like a match for the character <<missing>> in ;Y (see page
15100	@pageref(SemicolonY)).  This is so control will revert to a
15200	macro on end of file.
15300	
15400	@index(EDGE, macro flag)@index(Flag EDGE)@index(Conditional, EDGE)
15500	EDGE   True if the last cursor move hit a screen edge (never true
15600	in -WINDOW mode; see page @pageref(XWINDOW)).
15700	
15800	@index(ENDMUL, macro flag)@index(Flag ENDMUL)@index(Conditional, ENDMUL)
15900	ENDMUL   True if the last H command (see page @pageref(AlphaH)) 
16000	incremented a multistring variable off the last value (the variable
16100	value is now a null string).
16200	
16300	
16400	@index(FALSE, macro flag)@index(Flag FALSE)
16500	@index(Conditional, FALSE)
16600	
16700	FALSE   Always false.  Use -FALSE for true.
16800	
16900	@index(FIND, macro flag)@index(Flag FIND)@index(Conditional, FIND)
17000	FIND   True if the last F command in the appropriate mode
17100	had a next thing to find.  See pages @pageref(AlphaFBody), @pageref(AlphaFPoint), @pageref(AlphaFPin).
17200	
17300	@index(LSTEXP, macro flag)@index(Flag LSTEXP)@index(Conditional, LSTEXP)
17400	LSTEXP   True if the last ;X command (see page @pageref(SemicolonX))
17500	returned a nonzero result.
17600	@leave(description)
17700	
17800	@indexentry(key "Macro, G;",entry "Macro, ;G",number)@indexentry(key "G, macro",entry ";G, macro",number)@index(;G, case invert)
17900	;G<string>   Terminate string with <crlf>.  Converts all
18000	characters in <string> to lower case.
18100	
18200	
18250	@label(SemicolonH)
18300	@index(Macro, variable in)
18350	@indexentry(key "Macro, H;",entry "Macro, ;H",number)
18375	@indexentry(key "H, macro",entry ";H, macro",number)
18387	@index(variable, in macro)
18400	@index(;H, variable in macro)
18500	
18600	;H<var>   Substitutes the value of <var> at this point in the macro.
18700	Terminate the <var> name with a <crlf>.
18750	For more about variables, see chapter @ref(variables), page @pageref(variables).
18800	
18900	@label(SemicolonI)
19000	@index(Macro, TTY input)@index(TTY input, in macro)@index(;I, TTY input)
19100	
19200	@indexentry(key "Macro, I;",entry "Macro, ;I",number)@indexentry(key "I, macro",entry ";I, macro",number)
19300	
19400	;I   Input from the TTY.  The next <crlf> typed simulates a ";R0"
19500	command.
19600	
19700	@label(SemicolonL)
19800	@indexentry(key "Macro, L;",entry "Macro, ;L",number)@indexentry(key "L, macro",entry ";L, macro",number)@index(;L, alphanumeric conversion)
19900	;L<number>   Terminate <number> with <crlf>.  Adds 100 octal to the
20000	number and thus (usually) converts it to a letter.  1=A, 2=B, etc.
20100	This, for example, is used to generate signal names and connector
20200	pin names.  See also the ;LD command.
20250	For an example of the use of ;L, see section @ref(ALexample),
20275	page @pageref(ALexample).
20300	
20400	@label(SemicolonLD)
20500	@indexentry(key "Macro, L;D",entry "Macro, ;LD",number)
20503	@index(;LD, alphanumeric conversion)
20506	@index(LD, macro)
20509	
20600	;LD<number>   Terminate <number> with <crlf>.  Converts the
20700	number to a character in the DEC alphabet, see page @pageref(DECalphabet).
20800	@index(DEC alphabet)@index(Alphabet, DEC)
21200	
21300	
21400	@index(Macro, defining)@indexentry(key "Macro, M;",entry "Macro, ;M",number)@indexentry(key "M, macro",entry ";M, macro",number)@index(;M, define macro)
21500	
21600	@index(Define macro)@index(Create macro)
21700	@emphasize[;M<name>]   Start a permanent macro.  Terminate the <name> with
21800	a <crlf>.   All commands typed after this become part of the macro
21900	body, and are executed simultaneously (to create a macro
22000	without executing the commands, an unusual mode, see ;D on page
22100	@pageref(SemicolonD)).
22200	
22300	@indexentry(key "Macro, M;1",entry "Macro, ;1M",number)
22303	@index(;1M, define macro)
22306	
22400	;1M<name>    Same as ;M, except that an implicit XSMACRO (see page
22500	@pageref(XSMACRO)) is done so the macro will be saved.
22600	
22700	@indexentry(key "Macro, N;",entry "Macro, ;N",number)@indexentry(key "N, macro",entry ";N, macro",number)@index(;N, substitute number)
22800	
22900	;N<n>,<m>,<i>   Substitute at this point the number <n>, and
23000	increment in by M each time through the macro <i> levels up from
23100	the current one.  <n> and <m> may be negative.  If <i> is defaulted,
23200	0 is assumed (each time through the current macro); if <m> is
23300	defaulted, 1 is assumed.  The number always has a sign, and
23400	zero expands to a null string!
23500	
23600	@index(Macro, output)@index(;O, macro output)@indexentry(key "Macro, O;",entry "Macro, ;O",number)@indexentry(key "O, macro",entry ";O, macro",number)
23700	;O<string>   Terminate <string> with <crlf>.  If not taking
23800	input from the TTY, will print the <string> on the TTY.
23900	I guess this is a way of providing debug output from a macro.
24000	
24100	
24200	@label(SemicolonP)
24300	@index(Macro, defining)@index(Defining a macro)
24400	@indexentry(key "Macro, P;",entry "Macro, ;P",number)@indexentry(key "P, macro",entry ";P, macro",number)@index(;P, temporary macro)
24500	
24600	
24700	@emphasize[;P]   Define a temporary macro.  All commands issued until the
24800	completion of the macro become part of the macro.  After the
24900	macro has been completed and execution has terminated, the macro
25000	body is discarded.   Good for one-shot iterations, such as laying 
25100	down a set of bussed signal wires.
25200	
25300	@label(SemicolonR)
25400	@indexentry(key "Macro, R;",entry "Macro, ;R",number)@indexentry(key "R, macro",entry ";R, macro",number)@index(Macro, repeat count)@index(;R, repeat count)
25500	
25600	
25700	@emphasize[;R<n>]   End macro.  Terminate the number <n> with a
25800	<crlf>.  The number <n> is taken as the repeat count (including
25900	the definition!).  For permanent macros, the repeat factor becomes
26000	@index(#, repeat count)
26100	part of the definition.  The special symbol "#", used as a
26200	repeat count, means that the number of matches found by a F,
26300	F, XFDIP, etc. command is used as the repeat count.
26400	
26500	@index(;S, stop macros)@indexentry(key "Macro, S;",entry "Macro, ;S",number)@indexentry(key "S, macro",entry ";S, macro",number)@index(Stop all macros)
26600	
26700	@emphasize[;S]   Stop all macros instantly and return to top level command
26800	mode.   This is what you do when you are inside a macro and have
26900	hopelessly screwed up.
27000	
27100	@index(;T, TTY input)@indexentry(key "Macro, T;",entry "Macro, ;T",number)@indexentry(key "T, macro",entry ";T, macro",number)
27200	
27300	;T   Request TTY input at this point.  Input must be
27400	terminated with ";R0".  Usually, ;I (page @pageref(SemicolonI))
27500	is used.
27600	
27700	@index(;U, TTY input)@indexentry(key "Macro, U;",entry "Macro, ;U",number)@indexentry(key "U, macro",entry ";U, macro",number)
27800	
27900	;U   Similar to ;T if input not coming from a macro; otherwise
28000	it is a no-op.  This is useful when you get into a macro and
28100	discover something you wanted to do (such as initialize a
28200	variable or enter a mode) which you don't want as part of the
28300	macro body.  Whatever you do will not be executed on subsequent
28400	iterations.
28500	
28600	@index(;V, save TTY input)@indexentry(key "Macro, V;",entry "Macro, ;V",number)@indexentry(key "V, macro",entry ";V, macro",number)
28700	
28800	;V<n>,<name>   Terminate the macro name with a <crlf>.  This
28900	causes TTY input to be executed and stored in the named macro.
29000	If the next time this command is processed, any of the macros
29100	between the current level and the level <n> up from here (inclusive)
29200	are not in the first time through the loop, a ";C" (see page
29300	@pageref(SemicolonC)) is done with the macro name instead of
29400	taking in the macro definition.  Another way of looking at is is
29500	to consider the named macro as a variable that is assigned to
29600	from the TTY the first time you enter the macro level <n> up 
29700	from here.
29800	
29900	@label(SemicolonX)
30000	@index(;X, expression evaluate)@indexentry(key "Macro, X;",entry "Macro, ;X",number)@indexentry(key "X, macro",entry ";X, macro",number)
30100	
30200	
30300	;X<expression>   Terminate <expression> with <crlf>.  Allows
30400	an arithmetic expression to ve evaluated.
30500	@index(Arithmetic expression)@index(Expression, arithmetic)
30600	The operators
30700	@index(+, in expression)@index(-, in expression)@index(*, in expression)
30800	@index(/, in expression)
30900	"+", "-", "*" and "/" are recognized.  Conventional precedence
31000	is used, but may be altered by using <> or () to group subexpressions.
31100	
31200	
31300	@label(SemicolonY)
31400	@index(;Y, DSKIN control)@indexentry(key "Macro, Y;",entry "Macro, ;Y",number)@indexentry(key "Y, macro",entry ";Y, macro",number)
31500	
31600	;Y<char>   Reads input from the XDSKIN file (see page @pageref(XDSKIN))
31700	until the <char> is seen.  Then turns off DSKIN and proceeds to
31800	take input following the @w[;Y]. 
31900	
32000	
32100	@index(XAMACRO)
32200	@index(AMACRO)
32300	@emphasize[XAMACRO]   Alters a macro.  If the macro exists, you are in alter
32400	mode on the macro.  Note that there are some transliterations
32403	required because of hacks in the character set to represent
32406	normally "invisible" characters, such as <crlf>.  These are
32409	given in section @ref(translit), page @pageref(translit).
33000	
33100	@index(Macro, deleting)@index(Deleting macro)
33200	@index(XDMACRO)@index(DMACRO)
33300	@emphasize[XDMACRO]   Delete macro.  Asks for a macro name.  Must be at macro
33400	level 0 to do this (i.e., no macros in progress).
33500	
33600	@index(XIMACRO)
33700	@index(IMACRO)@index(Macro, reading)
33800	@emphasize[XIMACRO]   Input macro file.  The file must have been written by
33900	WMACRO (page @pageref(XWMACRO)).  Defines all macros and variables
34000	described by the file.
34100	
34200	@index(XINIT)
34300	@index(INIT)
34400	XINIT   Enables the calling of the INIT macro when a drawing is
34500	read in.  This is the default state of this switch.  
34600	
34700	@index(X-INIT)@indexentry(key "XINIT-",entry "X-INIT",number)
34800	@index(-INIT)@indexentry(key "INIT-",entry "-INIT",number)
34900	@index(INIT macro, disabling)
35000	X-INIT   Disables the calling of the INIT macro; you do this if
35100	you want to change the INIT macro before it executes (e.g., you've
35200	screwed it up).
35300	
35400	@index(MACRO)@index(XMACRO)
35500	@emphasize[XMACRO]   Lists the names of all defined macros.
35600	
35700	@index(XPMACRO)@index(PMACRO)
35800	@index(Macro, printing)
35900	@emphasize[XPMACRO]   Print macro.  Asks for name of macro and displays it
36000	on the terminal.
36100	
36200	
36300	@index(QUIT)@index(XQUIT)
36400	@emphasize[XQUIT]   Leave macro alter mode (AMACRO) wihtout modifying
36500	the original macro definition (changes are discarded).
36600	
36700	@index(Macro, renaming)
36800	@index(Renaming macro)
36900	@emphasize[XRMACRO]   Rename a macro.  Ask for old name, then new name.
37000	New name must not already be in use.
37100	
37200	@index(Macro, marking for saving)
37300	@emphasize[XSMACRO]   Enable macro saving.  Asks for a macro name.  The
37400	macro will then be saved in the DRW file.  The macro named
37500	INIT @index(INIT, macro) is automatically given an SMACRO.
37600	See page @pageref(INITmacro) for how to use an INIT macro.
37700	
37800	@index(X-SMACRO)
37850	@indexentry(key "XSMACRO-",entry "X-SMACRO",number)
37875	@index(-SMACRO)@indexentry(key "SMACRO-",entry "-SMACRO",number)
37887	
37900	@emphasize[X-SMACRO]   Disables macro saving for the macro name given.
38000	
38100	@index(XWMACRO)
38200	@index(WMACRO)
38250	
38300	@emphasize[XWMACRO]   Writes all currently defined and named macros into
38400	a file (default extension .MCR), and writes out all variable
38500	definitions.
38600	
38700	@leave(description)
38800	@sec(The INIT macro)@label(INITmacro)
38803	
38806	The INIT macro is a special macro attached to a drawing.  If a
38809	macro with this name is saved with the drawing, it will be
38812	called each time the drawing is read in.  Typically this
38815	sets the drawing scale and other useful properties.
38818	
38821	To create an INIT macro, first create some text file to
38824	hold it:
38827	@enter(example)
38830	@u[.]create init.txt
38833	@u[00100]   XSCALE
38836	@u[00200]   12
38839	@u[00300]   XDIAMONDS
38842	@u[00400]   Y
38845	@u[00500]   XAUTOWRITE
38848	@u[00600]   40
38851	@u[00700]   XUNDERLINE
38854	@u[00800]   XDEFPINS
38855	@u[00900]   $
38856	@i[*]E,n
38857	@u[EXIT]
38860	
38863	@leave(example)
38866	This defines some standard macro text for a particular application
38869	or user.  This configuration is recommended for novices.
38872	To define the macro, the following protocol will work:
38875	@enter(example)
38878	@u[.]RU D
38881	@u[*];1MINIT
38884	@u[*]@@INIT
38887	@u[*];R1
38890	@u[*]@r[]W
38893	@u[Filename ]Foo
38896	@u[*]
38899	@leave(example)
38902	
38905	This set of operations creates a drawing whose name is Foo.DRW and
38908	which contains an INIT macro.  The "@@" operation will cause the
38911	commands in INIT.TXT to be read in as if you typed them, and
38914	thus become part of the macro body.
38917	To change the commands that are actually executed when the
38918	INIT macro is called,
38920	edit the
38923	TXT file and repeat this procedure on an existing drawing.  In
38926	this case, the only major difference is that instead of
39026	giving the explicit filename, the name  can be given.
     	00100	@sec(Example of ;A and ;L)@label(ALexample)
00200	
00300	The actions of ;A and ;L can save considerable time when
00400	laying out multiple signals.  Consider the case of laying
00500	down a set of bus lines on each drawing of a series.  The
00600	signals are named BUS00 H, BUS01H, ... BUS15H and they are
00700	one -motion apart vertically.  Assume that the lines have
00800	been placed and the task is to associate a signal name
00900	with each of them.  The cursor is positioned at the
01000	topmost line, BUS00:
01100	@enter(example)
01200	;M
01300	@u[macro name: ]BUSLINES
01400	@u[*]@r()T
01500	@u[Text? ] BUS@r();2A0,1<crlf>
01600	@u[end A_] H<crlf>
01700	@u[*]@r()\
01800	@u[*];R15
01900	@leave(example)
02000	The ; is required so that the input routine recognizes the
02100	";" as a call on a macro and not as a text character.
02200	
02300	Consider the case of doing a body drawing and wishing to name
02400	the inputs to a gate (e.g., a shift register) A thru H.  If this
02500	happens frequently, a macro could be created (the signals are
02600	one -distance apart)
02700	@enter(example)
02800	@u[*];M
02900	@u[macro name] SHIFTSG
03000	@u[*]@r()T
03100	@u[Text?] @r();L@r();A1,1<crlf>
03200	@u[end ;A]_<crlf>
03300	@u[end ;L]_<crlf>
03400	@u[*]XTMOVE
03500	 ... move around until positioned just right...
03600	@u[*]@r())
03700	@u[*];R8
03800	@leave(example)
     	00100	@chap(Variables)
00150	@label(variables)
00200	
00300	The commands below define and operate on variables.  These commands are valid
00400	in any mode.
00500	
00600	@enter(description)
00650	@label(AlphaH)
00700	@index(H, increment variable)
00800	@indexentry(Key "H, increment variable",entry "H, increment variable",number)
00900	@index(Variable, incrementing)
01000	@index(Incrementing variable)
01100	
01200	H   Asks for a variable name and then increments that variable.
01300	Numeric variables get the next (+1) integer value.
01400	@index(Integer variables)@index(String variables)
01500	@index(Variable, string)
01600	string variables are searched for a number and +1 is added.
01700	Multi-string variables
01800	@index(Multistring variables) get set to the next string.  Upon
01900	reaching the last string of a multi-string variable, the
02000	value of the variable is set to a null string.  See all
02100	the @w[;H] command in macros, page @pageref(SemicolonH).
02200	
02300	@index(H, define variable)
02400	@index(Variable, defining)
02500	@indexentry(key "H, define variable",entry "H, define variable",number)
02600	
02700	H   Defines a variable.  Asks for a definition.    Syntax is of the form
02800	@enter(itemize)
02900	@enter(multiple)
03000	@enter(example)<name> _ <string>@leave(example)
03100	
03200	for string variables.
03300	@leave(multiple)
03400	
03500	@enter(multiple)
03600	@example(<name> : <string1><crlf><string2><crlf>...<stringn><crlf><crlf>)
03700	
03800	for multi-valued string variables.
03900	
04000	@leave(multiple)
04100	
04200	@enter(multiple)
04300	@example(<name> = <successive values>)
04400	
04500	for a numeric variable.
04600	@leave(multiple)
04700	
04800	@leave(itemize)
04900	where
05000	@enter(itemize)
05100	<Name> is any length string of characters, and includes the
05200	letters A-Z, the digits 0-9, and . (period), %, or $ (dollar sign).
05300	
05400	<Value> is either an alphabetic character or a number (with
05500	an optional sign).
05600	
05700	<Iteration-spec> is of the form <start-value>(<increment>)<end-value>
05800	or <iteration-spec>(<increment>)<end-value>.
05900	
06000	<successive values>  consists of a string of <value>s or
06100	<iteration-spec>s separated by commas and ending with a
06200	<crlf>.
06300	
06400	If <start-value> is alphabetic in an <iteration-spec>, then
06500	<end-value> must also be alphabetic.  Incrementing an
06600	alphabetic character is done according to the DEC alphabet,
06650	@index(DEC alphabet)@index(Alphabet, DEC)
06700	see page @pageref(DECAlphabet).
06800	
06900	If adding the <increment> to the current value exceeds or
07000	equals the <end-value>, then the variable is set to <end-value>.
07100	If the current value is greater than 0, the current value is padded
07200	with enough leading zeroes to match the length of the initial
07300	<start-value> of the <iteration-spec>.  If <end-value> is omitted,
07400	the last <increment> gets used indefinitely  (this is the only
07500	place where a zero increment is legal!).  If the definition is
07600	ended with a <value> or <end-value>, and incrementing is continued
07700	beyond the end of the definition, +1 becomes the default <increment>.
07800	
07900	@leave(itemize)
08000	
08100	@index(H, type variables)
08200	@index(Typing variables)
08300	@index(Variables, typing)
08400	@indexentry(key "H, type variables",entry "H, type variables",number)
08500	
08600	H   Types all variables and their current values on the TTY.
08700	
08800	@leave(description)
08900	
     	00100	@chap(Board types)@label(Boards)
00200	@enter(itemize)
00300	@index(Board type DECPC)@index(DECPC, board type)
00400	
00500	DECPC
00600	
00700	@index(Board type W940)@index(W940, board type)
00800	
00900	W940,  DEC prototype wirewrap board.
01000	
01100	@index(Board type W941)@index(W941, board type)
01200	
01300	W941,  DEC prototype wirewrap board.
01400	
01500	@index(Board type W942)@index(W942, board type)
01600	
01700	W942
01800	
01900	@index(Board type W943)@index(W943, board type)
02000	
02100	W943
02200	
02300	@index(Board type W946)@index(W946, board type)
02400	
02500	W946
02600	
02700	@index(Board type LEBEL)@index(LEBEL, board type)
02800	
02900	LEBEL
03000	
03100	@index(Board type PG21)@index(PG21, board type)
03200	
03300	PG21
03400	
03500	@index(Board type PG21-60)@index(PG21-60, board type)
03600	
03700	PG21-60
03800	
03900	@index(Board type PG21-180)@index(PG21-180, board type)
04000	
04100	PG21-180, 180-socket version of PG21
04200	
04300	@index(Board type LG411)@index(LG411, board type)
04400	
04500	LG411
04600	
04700	@index(Board type LG434)@index(LG434, board type)
04800	
04900	LG434
05000	
05100	@index(Board type MPG21)@index(MPG21, board type)
05200	
05300	MPG21
05400	
05500	@index(Board type AUGU1)@index(AUGU1, board type)
05600	
05700	AUGU1
05800	
05900	@index(Board type AUGU6)@index(AUGU6, board type)
06000	
06100	AUGU6
06200	
06300	@index(Board type AUGCMU)@index(AUGCMU, board type)
06400	
06500	AUGCMU
06600	 
06700	@index(Board type AUGHEX)@index(AUGHEX, board type)
06800	
06900	AUGHEX
07000	@leave(itemize)
     	00100	@chap(Libraries)
00200	@label(Libraries)
00300	
00400	@sec(Introduction to libraries)
00500	Libraries are ways of sharing definitions of bodies.  There is
00600	some folklore necessary to understand how to create and use
00700	libraries effectively.
00800	
00900	A library is just a drawing.  In that drawing, a number of bodies
01000	may be defined.  Defining a body does not cause it to appear on the
01100	drawing, so a library could be a drawing with absolutely nothing
01200	visible.  Since this is not too useful (one cannot, for example,
01300	print out the contents of it reasonably) a library usually consists
01400	of a set of body definitions, plus an instance of each body appearing
01500	in the drawing.  This has the advantage that if you edit a body
01600	in the library, its printed representation will also change, so
01700	creating a PLT file and printing it out will get you a picture
01800	of all the bodies in the library.
01900	
02000	There are a couple tricks to building libraries.  Some of it is
02100	in naming conventions, and some of it is editing tricks. 
02150	Naming convention is discussed in section @ref(DIPTYPE), page
02175	@pageref(DIPTYPE).  Editing tricks are mostly discussed in
02187	the introduction to chapter @ref(Editmode), page @pageref(editmode).
02200	
02300	For example, a body is usually drawn with its placement position
02400	approximately at its center of gravity.  However, it is sometimes
02500	hard to draw one this way, especially the first couple times.
     	00100	@sec(Standard Libraries)@label(StdLibs)
00200	
00300	There are two standard library sets known at the time this
00400	document was created.
00500	@enter(itemize)
00600	The CM* drawing libraries, on [X335DP00]
00700	@index([X335DP00])@indexentry(key "X335DP00",entry "[X335DP00]",number)
00800	
00900	The newer body libraries, on [E210DP00]
01000	@index([E210DP00])@indexentry(key "E210DP00",entry "[E210DP00]",number)
01100	@leave(itemize)
01200	
01300	@index(BODLIB[X335DP00])
01400	@index(LIB0-LIB11[X335DP00])
01500	
01600	The CM* body libraries consist of the drawing files LIB0 thru
01700	LIB11 on [X335DP00].  This complete set may be brought in by
01800	loading the library (XGETLIB) called BODLIB[X335DP00].  This set of drawings contains most of the
01900	chips used for the drawings of the CM* project.  This set is
02000	nowhere near complete.
02100	
02200	@index(L0-L52[E210DP00])@index(LIBALL[E210DP00])
02300	The new body libraries consist of the drawing files L0 thru
02400	(at last count) L52 on [E210DP00], with some holes (at last
02500	check, L41-L49 did not exist) left for expansion.  If expansion
02600	is required within the sequence, it is expected that suffices
02700	A-Z will be added, e.g., an expansion of L10 or a requirement for
02800	a library between L10 and L11 would result in an (additional)
02900	file L10A.  
02903	These libraries contain almost the entire TI TTL databook except
02906	for ROMs (@i[PROM]s are included but mask-programmed ROMs are not),
02909	some multiplier chips, and some microcomputer chips.  In addition,
02912	select 8000/8800 TTL (National), 9600 TTL (Fairchild), 3600 RAM
02915	(Intel), and other special categories are included.  
02918	
03000	The complete set of new libraries can be loaded by calling in the
03100	library LIBALL[E210DP00].  Since the libraries are so extensive,
03200	as a practical matter it may be desired to load only the
03300	individual libraries as they are needed.
03400	
     	04600	@sec(Library-related commands)
04700	@enter(description)
04800	@label(LibAlphaI)
04900	@index(I, input body definitions)
05000	@indexentry(key "I, input body definitions",entry "I, input body definitions",number)
05100	@index(Body definitions, inputting)
05200	I   Read body definitions (only) from a file.  Useful when
05300	collecting body definitions from several files into a library.
05400	
05500	@index(I, input body definitions)
05600	@indexentry(key "I, input body definitions",entry "I, input body definitions",number)
05700	
05800	I   Read body definitions.  Like I, except that if a duplicate
05900	body definition is found, replacement is automatically effected
06000	by using a geometric mapping.
06100	
06200	
06300	@index(L, list body types on TTY)
06400	@indexentry(key "L, list body types",entry "L, list body types on TTY",number)
06500	@index(Body types, listing)
06600	L   List body types on TTY.  For library bodies, the library name
06700	is also listed.
06800	
06900	@index(L, list body types on file)
07000	@indexentry(key "L, list body types on file",entry "L, list body types on file", number)
07100	@index(Body types, listing)
07200	L   List body types in a file with default extension .LST.
07300	Also list the plot label strings.
07400	
07500	@index(DELLIB)@index(XDELLIB)
07600	XDELLIB   Deletes a reference to a library; all bodies defined in
07700	the library disappear; see page @pageref(XDELLIB).  To keep
07800	bodies, see LOCLIB (page @pageref(XLOCLIB)).
07900	
08000	@index(DELTYP)@index(XDELTYP)
08100	XDELTYP   Deletes a body definition from a drawing.  See page
08200	@pageref(XDELTYP).
08300	
08400	@index(GETBOD)@index(XGETBOD)
08500	XGETBOD   Extracts a body definition from a drawing file.  See page
08600	@pageref(XGETBOD).
08700	
08800	@index(GETLIB)@index(XGETLIB)
08900	@emphasize[XGETLIB]   Reads in a library of bodies; see page @pageref(XGETLIB).
09000	
09100	@index(LIBMAP)@index(XLIBMAP)
09200	XLIBMAP   Used when converting from one library to a newer one; see
09300	page @pageref(XLIBMAP)
09400	
09500	@index(-LIBMAP)@indexentry(key "LIBMAP-",entry "-LIBMAP",number)@index(X-LIBMAP)@indexentry(key "XLIBMAP-",entry "X-LIBMAP",number)
09600	X-LIBMAP   Clears all LIBMAP mappings.
09700	
09800	
09900	
10000	@index(LOCLIB)@index(XLOCLIB)
10100	XLOCLIB   Deletes a reference to a library, but makes any bodies
10200	defined in it local to the current drawing.
10300	
10400	@index(XRENAME)@index(RENAME)
10500	XRENAME   Renames a body definition in a drawing.   See page @pageref(XRENAME).
10600	
10700	@index(TYPLIB)@index(XTYPLIB)
10800	XTYPLIB   Types all library filenames.
10900	
11000	@leave(description)
     	00100	@chap(Plot box)
00200	The plot box is the drawing identification information.  Not
00300	all of the information actually appears in the drawings
00400	but some appears in the wirelist.
00500	@enter(description)
00600	@emphasize[XAUTHOR]    Sets the "Drawn by" field; see page @pageref(XAUTHOR).
00700	
00800	XDRAWN   Sets the signature for the DRN. box; see page @pageref(XDRAWN).
00900	
01000	XENGINEER   Sets the signature for the ENG. box; see page @pageref(XENGINEER).
01100	
01200	@emphasize[XLTITLE]   Prints all of the plot box information.
01300	
01400	XMODULE   Sets the module name; see page @pageref(XMODULE).
01500	
01600	XNEXTHI   Sets the "Next higher assembly" field; see page @pageref(XNEXTHI).
01700	
01800	XPAGE   Sets the PAGE and OF values; see page @pageref(XPAGE).
01900	
02000	@index(XPREFIX)@index(PREFIX)
02100	XPREFIX   Sets the prefix text for a drawing number; see page @pageref(XPREFIX)
02200	
02300	
02400	@emphasize[XPROJECT]   Sets the project name; see page @pageref(XPROJECT).
02500	
02600	XREVISE   Sets the Revision Level field; see page @pageref(XREVISE).
02700	
02800	XSHEET   Sets the PAGE and OF values; see page @pageref(XSHEET).
02900	
03000	XSITE   Sets the site field; see page @pageref(XSITE).
03100	
03200	@emphasize[XTITLE]   Sets the title text; see page @pageref(XTITLE).
03300	
03400	@index(XVARIABLE)@index(VARIABLE)
03500	XVARIABLE   Sets the variable text for a drawing number; see page
03600	@pageref(XVARIABLE).
03700	@leave(description)
03800	
03900	At CMU, only the following user-supplied information appears in the plot box:
04000	
04100	@enter(itemize)
04200	Author
04300	
04400	Title (first line only!)
04500	
04600	Project
04700	
04800	Page
04900	@leave(itemize)
     	00100	@chap(The naming of DIPs)@label(DIPTYPE)
00200	
00300	In order to be used by the wirelist program W, a DIP definition
00400	@i[must] include the property
00500	@index(DIPTYPE) DIPTYPE.  This is used to make the association
00600	between a body definition and the DIP which represents it.
00700	
00800	Some naming conventions have been adopted for DIPTYPEs, and some
00900	simple naming rules; following these rules will help make your
01000	definitions compatible with the standard libraries.
01100	
01200	DIPTYPE names should be 7 characters or less in length.  This
01300	is because the various support programs, written in a primitive
01400	language like FAIL, take shortcuts to formatting such as
01500	depending upon tab stops every eight positions.  If you use
01600	a DIPTYPE name of 8 or more characters, your output will not
01700	always have all its columns lined up.  However, there seems to
01800	be no harm in long names (it doesn't seem to lose them, or
01900	truncate them).
02000	
02100	When a series has two or three digit suffixes, e.g., as the 7400
02200	TTL series does, @i[it is important to leave a non-numeric
02300	delimiter between the family number and the member number].
02400	Otherwise, we get silly things like "7411" being followed by
02500	"74112" and followed by "7412".  The correct form of names is shown
02600	below:
02700	@enter(example)
02800	Gate	DIPTYPE
02900	7400	7400
03000	74S00	74S00
03100	2901	29 01
03200	29117	29 117
03300	74151	74 151
03400	@leave(example)
03500	
03600	Note that several bodies may have the same DIPTYPE.  For example,
03700	a 7400 NAND gate (positive logic) may be drawn as a body which
03800	represents the negative-input OR function (negative logic).
03900	Although these bodies must have unique names, they do not represent
04000	unique DIPTYPEs, so the DIPTYPE for both would be the same.
04100	
04200	The library drawings for the new user libraries (on [E210DP00])
04300	show @i[both] the DIPTYPE and the body name.
     	00100	@chap(Graphics Display Processor)@label(GDP)
00200	
00300	SUDS runs at CMU on the Graphics Display Processor (GDP-II).
00400	This is equipped with the "Stanford" keyboard
00500	(perpetrated upon an unsuspecting world by a university that
00600	shall remain anonymous).  The GDP runs with the
00800	"Graphics Monitor", around which SUDS must run in circles to accomplish
00900	its task.
01000	
01100	When the D program is run, it downloads a graphics service package
01200	to the GDP.  This service package takes over control of the
01300	GDP keyboard.  To control the graphics monitor from the keyboard,
01400	one uses the "Cokebottle" mode:
01500	
01600	@index(Coke bottle mode)
01700	@index(Graphics monitor)
01800	@index(GDP control)
01900	
02000	@enter(description)
02100	<top><shift><altmode>   Enter GDP control mode
02200	
02300	@indexentry(key "S, GDP mode",entry "S, GDP mode",number)
02400	@index(S, GDP mode)
02500	
02600	S   Enter scroller control mode
02700	
02800	@indexentry(key "I, GDP mode",entry "I, GDP mode",number)
02900	@index(I, GDP mode)
03000	
03100	11I   Adjust intensity.  11 is a good figure given the default intensity
03200	which  SUDS uses.  Note that it is probably better to adjust the brightness of a
03300	drawing to be higher, using the XBRIGHT command (page @pageref(xbright)) which
03400	can be done in an initialization macro.
03500	
03600	@indexentry(key "S, GDP mode",entry "S, GDP mode",number)
03700	@index(S, GDP mode)
03800	nS   Adjust scroller scale.  Set to a comfortable value; initial value is
03900	octal 10.  n=12 is considered comfortable by those who actually try
04000	to read what is being displayed.
04100	
04200	-200Y   Adjust Y-position.  -200 is frequently a good value.  Recall that
04300	the meta key must be held down while typing the - as well as the digits.
04400	
04500	@leave(description)
04600	
04700	To leave this mode, type any character without using
04800	the meta key.
04900	
05000	
05050	@indexentry(key "call, clear GDP program",entry "<call>, clear GDP program",number)
05075	@indexentry(key "call, clear GDP program",entry "<call>, clear GDP program",number)
05100	Typing <call> will clear the SUDS graphics service program and
05200	allow normal use of the graphics keyboard.  Note in particular
05300	that control sequences, such as ^R, ^T and ^C will transmit
05400	as R, T and C.  To type ^C without having to do a
05500	<call>, use the <call> key, which tranmits a ^C to the running
05600	program.
05700	
05800	If you feel a compulsion to switch GDPs, the recommended practice
05900	is to LOG OFF (KJOB) the job on one GDP and log in a new job on the
06000	one you are switching to.  The reasons have to do with how
06100	ATY devices are assigned in the monitor; an ATY is the device across
06150	@index(ATY)
06200	which graphics protocols take place.  If you just Detach your job,
06300	the ATY is left in a confused state and when reattached to
06400	another GDP you will get strange messages from SUDS advising
06500	you that your ATY link cannot be assigned.
06600	
06700	
06750	@indexentry(key "break, GDP control",entry "<break>, GDP control",number)
06775	@indexentry(key "clear, GDP control",entry "<clear>, GDP control",number)
06800	The <break> and <clear> keys may be
06900	used to interrupt (break) output and resume (clear break) output.
07000	These perform the ^S and ^Q functions of the TOPS-10 monitor.
07100	
     	07200	@sec(What do do when the GDP crashes)@label(GDPboom)
07300	
07350	@index(Crash, graphics)@index(Graphics crash)
07400	SUDS exercises the GDPs well beyond their limits.  Occasionally@foot<Frequently.> 
07500	the graphics "crashes".  This is easily  seen by the user since
07600	the display disappears completely and no amount of pushing keys
07700	will bring it back.  Note that this is distinguishable from a
07800	crash of the host, since in that case the display still runs but
07900	no response is obtained from the host.
08000	
08100	Now, in the best of all possible worlds you have done an
08200	XAUTOWRITE (page @pageref(XAUTOWRITE)) command, and haven't
08300	lost very many keystrokes.  However, in reality, either you
08400	forgot to do this, or you were editing a body definition (in
08500	which SUDS "cleverly" disables AUTOWRITE mode!).  To save
08600	your work, perform the following mystical actions:
08700	@enter(itemize)
08750	@enter(multiple)
08800	Ask the operator to attach your job (the job number, in case
08900	you have forgotten it, can be found by the operator).
09000	
09100	If the operator is kind, and the system is happy, you can do
09200	the actions below from the console; otherwise, have the operator
09300	just DETACH your job and you can pick it up on some other terminal.
09400	
09500	@leave(multiple)
09600	
09700	Type "HALT".
09800	
09900	Type "CONT".  You should now get a "*" when you type a
10000	carriage return.
10100	
10200	Type at least one space, in case you were in a move mode.
10300	
10400	Execute an X-DPY (page @pageref(XDPY)) command.
10500	
10600	If you were not in body edit mode, you can now type
10700	@example(@center('W))
10800	to write out your DRW file in its current state.  The
10900	apostrophe is equivalent to  (this is explained on page
11000	@pageref(Apostrophes)).
11100	
11200	If you were in body edit mode, you can leave it by typing
11300	@example(@center('E))
11400	and then typing
11500	@example(@center('W))
11600	as described above.
11700	
11800	Now execute an XEXIT (page @pageref(XEXIT)) command.
11900	
12000	Detach your job.  You may now reboot your GDP.  The DRW 
12100	can now be read back in and you can resume.  Note that any
12200	macros could be saved by having done an XWMACRO (page @pageref(XWMACRO))
12300	command; otherwise they will be lost.
12400	@leave(itemize)
12500	
12600	You @i[must] re-run D after reattaching to your job from your
12700	GDP.  This is because the ATY line used for graphics communication
12800	has been deassigned by the X-DPY comand, and an attempt to REENTER
12900	the D program will simply cause an
13000	@enter(example)
13100	?IO to unassigned channel
13200	@leave(example)
13300	error.
     	00100	@chap(Things I don't know what to do with)
00200	@enter(descriptioN)
00300	
00400	?    Used in conjunction with XIWIRES or XIERRORS commands.
00500	Steps through the signals in the internal list one at a time
00600	which allows you to correct the errors (XIERRORS) or
00700	just look at all signals (XIWIRES).  The XIWIRES is
00800	useful for looking at router errors by run number, since the
00900	run number is determined by the order of the .WDR file.
01000	
01100	XIWIRES   This reads a logic drawing wirelist (asks for the
01200	filename) and builds an internal list of pointers to the
01300	appropriate pins on the PC card (must have already read in
01400	the PC card drawing).  This command is currently only
01500	used with the WROUTE command.  The default extension is
01600	.WDR which is generated by the UML "W" command.
01603	@index(LES extension)@index(Extension LES)
01606	@label(LESD)
01700	
01800	XIERRORS   Reads a file (default extension .LES) in and prints the category title
01900	then a "?".  If you type "Y" it reads in the runs in that
02000	category.  Otherwise it skips that category and goes to the
02100	next one.  Only one category is read in at any one time.
02103	An LES file is produced by the wirelister by using the wirelister
02106	XERRSUM command described on  page @pageref(XERRSUM).
02200	
02300	X-IWIRES   Releases the storage used by the XIWIRES command.
02400	
02500	X-IERRORS   Releases the storage used by the XIERRORS command.
02600	
02700	@enter(multiple)
02800	XIUML   This reads a file for updating the DIP locations and
02900	connector pin numbers.   It asks for a filename.  The default
03000	extension is .UML.  The file is then read in and the
03100	updates are made.  The file format is as follows:
03200	@enter(example)
03300	BODIES<crlf>
03400	<old location> <TAB> <new location> <crlf>
03500	PINS <crlf>
03600	<old pin name> <TAB> <new pin name> <crlf>
03700	END
03800	@leave(example)
03900	
04000	Each time the word "BODIES" or "PINS" is seen, the program
04100	makes a list of the current body or pin locations.  After an
04200	update, the updated body or pin is removed from the list so there
04300	is no chance of confusion.   As many bodies or pins as desired may
04400	be listed under the word "BODIES" or "PINS".  The BODIES section
04500	and the PINS section may be omitted or reversed in order but
04600	the word "END" must be present else an error message will be
04700	forthcoming.
04800	
04900	Since the drawing program was designed to handle the case where
05000	more than one card may appear in a single drawing, if the
05100	permanent card location is set for this drawing, you won't
05200	be asked.  Otherwise you must type the card location of the
05300	bodies and connector pins to be updated.  If the drawing only
05400	contains one card but no permanent card location is set, you
05500	may type <crlf> to the card location question.
05600	@leave(multiple)
05700	
05703	@label(XIPINS)
05800	IPINS   This reads a file from Wagner's partitioning program.
05900	It asks for a file name (probably FOR20.DAT).  It then asks
06000	if you want a filename other than the current default () one.
06100	If the filename which appeared in the "FILE" column of the wirelist
06200	for pins you want is different than the  file, then you
06300	must supply that name explicitly.  <crlf> is the same as
06400	typing "".
06500	
06600	ERROR   Re-enable error display.
06700	
06800	-ERROR   The "." in D&PC (layout version only) and "FLASH" and
06900	"NFLASH" commands in PC.  May attempt to show erroneous pins by
07000	displaying "O_?" with the "O" centered on the pin.  This is
07100	very confusing, so the ERROR command can be enable and disable
07200	the displaying of this indicator.
07300	
07400	XTHICK   Sets a flag so that Z and Q assume that you are
07500	going to plot your file in extra thick mode with P or PCP (the
07600	E command).  It causes it to think that point text in scale 1 and
07700	connector pin text are one bit wider than they ordinarily are.
07800	This doesn't yet do the right thing for body text.
07900	
08000	   Move left along a wire
08100	
08200	   Move right along a wire
08300	
08400	   Move down along a wire
08500	
08600	   Move up along a wire.
08700	
08800	.   Equivalent to . followed by V if in layout version,
08900	otherwise the same as . .
09000	
09100	J<letter>   Finds <letter> of flashing pins and moves cursor
09200	there if possible.  Only works when letters are being shown.
09300	Also works for jumping to "short" errors if you type a
09400	<number> instead of a <letter>.
09500	
09600	J_<number>   Finds the <number>th FLASH connector pin (default
09700	is 1) and jumps to it.
09800	
09900	@leave(descriptioN)
 