@part(SMECO,root "suds.mss");
@chap(Smeco - Generation of Change Lists)

@index(Smeco)
@index(Engineering Change Orders)
@index(Updating Wirelists)
Smeco@foot<
Smeco was written by Richard Swan and is a distant derivative of a
program (ECO) written by Tom McWilliams.>
 (SMart Engineering Change Order) is a Sail program
primarily for maintaining a correct description of a wirelist through
a sequence of changes made via the Stanford Drawing Package.
It is normally used to compare an "old" wirelist with a "new"
wirelist (direct from SUDS) to produce a close to minimal
@i(wrap and upwrap list) plus an updated description of the
physical connections existing on the wirewrap board.
It also has a facilitiy for automatically producing a
pseudo "twisted pair" effect for signals on Edge Connectors
and Jack Pins.
The program will output the wirelist in a variety of forms
suitable for automatic wrapping, manual wrapping, use by an engineer, etc.
If a new wirelist format is needed, Smeco is probably the easiest program
to modify in order to generate it.
@index(Wire list formats, New)
A major objective of the program is to encourage the immediate entering
of changes into the drawings and automatically generating change lists.
The alternative is out of date drawings and random changes written
on the side of coffee cups.

The following subsections give a brief description of some of the
basic operations. A full list of the commands and some examples are 
 given at the end.

@section(Wirelist Comparisons)

A simple wire by wire comparison of wirelists is not an effective way of
producing a change list. One problem is that a small change in the logic design
may cause the routing of unrelated signal runs to change. 
The second problem is that if a connection is added to, or deleted from, an
existing run   then the new routing generated by SUDS is 
likely to differ from the old routing and cause many unnecessary
unwraps and wraps.
When comparing the @i(Old) and @i(New) wirelists, SMECO looks
for electrical equivalence rather than a 1-to-1 wiring equivalence.
When a difference is noted, Smeco will mark for deletion  and addition,
the minimum number of wires necessary to produce electrical equivalence.
Smeco understands wrap levels (Z levels) and whenever marking a wire
for deletion it will also mark any wires wrapped above it.
(It will of course record  them for later  replacement if necessary.)
Smeco does not understand about wirelengths. A pin which must be connected
to an existing run will always be added at the end, since this minimizes
changes. Smeco uses a heuristic based on the new routing from SUDS
to decide which end to place it on. This is not guaranteed to be optimal.
(No problems have been noticed in this area, so far.)

Smeco maintains a  data structure for two complete wirewrap
@index(INPUT, Smeco command)
boards (AugHex). The command  @T(Input) is used to read a wirelist,
@index(/NEW, Smeco switch)@indexentry(key "NEW, Smeco switch",entry "/NEW, Smeco switch",number)
the switch @t(/New) causes the wirelists to be read into the "New"
@index(COMPARE, Smeco command)
data structure. The command @t(Compare) causes a logical signal
by logical signal comparison. The @i(Old) wirelist is updated, in place,
to be electrically equivalent to the @i(New) wirelist.
Three files are produced:
@description{
@index(Extension UNR)@index(UNR extension)@index(Unwrap list)
.UNR    (Unwrap list for manual changes)

@index(Extension RAP)@index(RAP extension)
.RAP    (Wrap list for manual changes)

@index(STT extension)@index(Extension STT)
.STT    (Status list for
wire runs which have been changed. Primarily for peace of mind.)
~

@index(NEW, Smeco command)
The command @t(New) causes the updated wirelist to be output
@index(RUN, extension)@index(Extension RUN)
in  a run list format. (Use extension .RUN.) Note that this
command takes the physical wire connections from the "Old", now updated,
wirelist structure but uses the signal names from the "New" Structure.
Merely changing the name of a run will not cause any wires to be changed.

@section(Grounding for Edge Connector and Jack Pins)
@index(Grounding for Edge Connectors and Jack Pins)
@index(Pseudo twisted pair)
@index(Twisted pair)

It is recommended practice for every signal entering or leaving a
wirewrap board to have an accompanying ground. Externally this might
connect to twisted pair on a back plane or braided ribbon cable
@index(Jack pins, twisted pair)
@index(Alternate grounds, jack pins)
for Jack pins.
 The use of twisted pair for
long signal paths has two distinct advantages:
@itemize{
Cancellation of induced crosstalk. Any noise signal coupled into the
signal line is also coupled into the ground line, which leads to
cancellation.

Common ground reference between transmitter and receiver. 
The signal characteristics, particularly for Schotky and ECL, of the normal
ground path between wirewrap boards mounted in a backplane are often
poor. This path is shared by every signal in the system and so even
a small impedence will result in voltage drops which appear as noise.
A direct, low impedence,  ground connection  between the driver and
receiver ICs significantly reduces noise problems.
~

 Within a wirewrap board it would be ideal if all 
external connections were made from the connector to the driver/receiver
via twisted pair.
 This can not be done with normal automatic wirewrap
machines and is also very slow to do manually.
However, most of the advantages of twisted pair can be obtained
by running a wire from the connector to the ground pin on the
driver/receiver IC. Assuming that twisted pair or braided cable is used
between boards, this achieves function 2 noted above. The run length
on the board is usually short enough that induced cross talk is not a
problem. Smeco provides an automatic mechanism for routing this
kind of pseudo twisted pair connection.

@index(GROUND, Smeco command)
The command @t(GROUND) asks for the name of a first and
last connector pin. (The range mechanism permits a designer to selectively
operate on specific connectors and individual pins.) Within this range it examines each connector
looking for a signal wire that is not GND or VCC. For each signal
it finds, Smeco does the following:
@enumerate{
Looks at the "adjacent" pin. This is the "natural" pin for
a ground connection for this signal. E.g. For a signal on
J1-03 the  "adjacent" pin is J1-16 (26 pin Jack plugs), J1-16 => J1-03,
for a siganl on *FB2 => *FB1, *FB1 => *FB2.
If the adjacent pin already has a signal on it, or it is a "reserved
edge connector"@foot<SMECO has a list of edge connectors reserved
for special purposes, such as GND and VCC, on the LSI-11 bus backplane.
It will not tie grounds to these. It will give a non-fatal warning if
a signal is connected to them.> then forget about this signal.

Follow the signal until it connects to a pin in the main board area.
It is assumed that this is the driver/receiver for this signal.
(Smeco does not know which ICs are on the board and so cannot verify
further.) 

Find the GND pin closest to the point where the signal connects. If it
already has two wraps then follow in both directions to find the closest
pin in the ground run with a single wrap.
(Note that for bused signal it is quite common to have four or more
signals connect to the same driver/receiver. The algorithm given
results in these signals sharing a pair of runs to the appropriate ground.
The newly grounded connector pins will be tied evenly at each end
of the original ground run for the driver/recevier IC.
This is not ideal, but  is usually acceptable.)

Mark a connection between the available ground pin and the "adjacent" pin.
~
@newpage
@section(Smeco Command Summary)

Smeco has a crude input sytax with single letter letter commands,
additional letters in the command name will be ignored.
By default, commands apply to the "old" wirelist. The switch "/N"
forces use of the "new" wirelist.

@display{Command  [File Specification] [/N]~


The commands are:
@enter(description)
@enter(multiple)
ADD  <file name.ext> [/N]      Input wires  (.WLZ or .RUN format) without clearing
the data base. (Conceivably this is useful for entering manual changes,
normally use INPUT.)
@leave(multiple)

@enter(multiple)
@index(COMPARE, Smeco command)
@index(Extension UNR)@index(UNR extension)
@index(Extension RAP)@index(RAP extension)
@index(Extension STT)@index(STT extension)
COMPARE <file name>      Compare Old with New, producing files .UNR, .RAP, .STT.

@leave(multiple)
@index(Extension RAY)@index(RAY extension)
@index(Raytheon wirelists)
@index(F, Smeco command)
@enter(multiple)
F <file name.RAY> [/N]     Output suitable for machine wrapping by Raytheon.
@leave(multiple)

@index(GROUND, Smeco command)
GROUND  [/N]    Pseudo twisted pair grounding of connector pins.

@index(HELP, Smeco command)
HELP    Type this message.

@index(WLZ extension)@index(Extension WLZ)
@index(INPUT, Smeco command)
@enter(multiple)
INPUT <File name.ext> [/N]    Input a .WLZ or .RUN wirelist list

@leave(multiple)
@index(KILL, Smeco command)
KILL     Reinitializes entire data base (used for program development only).

@index(LIST, Smeco command)
LIST [/N]      Prints a single run on terminal. Useful for data retrieval.

@index(NEW, Smeco command)
@enter(multiple)
NEW <file Name.RUN>     Outputs updated wirelist, after Compare, in .RUN format.
@leave(multiple)

@index(OUTPUT, Smeco command)
@enter(multiple)
OUTPUT <file Name.WLZ>    Outputs updated wirelist, after compare, in .WLZ format.
@leave(multiple)

@index(PRINT, Smeco command)
@enter(multiple)
PRINT <file name.run> [/N]   Output specified wirelist in .RUN format.

@leave(multiple)
@index(QUIT, Smeco command)
QUIT    Exit from program.

@index(REF, Smeco command)
@enter(multiple)
REF  <Name File.Ext> [/N]    Output a Pin <=> Signal Name cross reference list.
@leave(multiple)

@index(SAVE, Smeco command)
SAVE    Save current state and exit. Saves much time for rereading wirelists.

@index(TOGGLE, Smeco command)
TOGGLE    Toggle trace flag (for program development only)

@index(V, Smeco command)
@index(Z-levels, inverting)
@index(Exchanging Z-levels)
@index(Inverting Z-levels)
V [/N]    inVert. Exchange Z-levels on one run. 

@index(W, Smeco command)
@index(Signal list, alphabetizing)
W  [/N]    Alphabetize signal list. (Not need when using SUDS input.)

@index(X, Smeco command)
@index(Z-levels, inverting)
@index(Exchanging Z-levels)
@index(Inverting Z-levels)
X  [/N]    eXchange Z-levels of entire wirelist.
@leave(description)


@section(File Formats)

@index(Extension WLZ)@index(WLZ extension)
Smeco will read and output .WLZ files produced by SUDS. In addition
it will both read and write a more human readable format .RUN.
The program will output a card image file suitable for sending to
Raytheon for fully automatic wrapping.

@section(Examples)

For the initial fabrication of a wirewrap board:
@example{
@index(SMECO[X335WL00])
@u[.]RU SMECO[X335WL00]  ! On CMUB
@u[>]input Sloc01.WLZ

@ux[No. of wires read = 18026]

@u[>]ground
@ux[Specify Range for Grounding Pins Adjacent to I/O Signals]
@ux<First Pin [J1-01]:>
@ux<Last  Pin [*FV2]:>
@ux[Number of New GNDS = 46]
@ux[Number of I/O signals = 48]

@u[>]F Sloc01.Ray		! Output a Raytheon compatible wirelist
@ux[No. Wires Output = 18092]	! Note sum of wires read + new GNDs.
@u[>]
@u[>]print  Sloc01.RUN	! Output wirelist in Human and Machine readable form.
@ux[No. Wires Output = 18092]	! Note sum of wires read + new GNDs.
@u[>]save		! Save core image, avoids rereading .RUN file.
@ux[*** Save Me ***]
@u[.]Save Sloc01
~

So far we have just done the special grounding and generated a Raytheon format file.
The important part occurs when a bug is found in the design.
The designer goes back to the drawing package and corrects the error
(or adds a new feature). We now desire to change the minimum
number of wires so that the circuit on the wirewrap board will be 
electrically equivalent to the updated list from SUDS.
This is shown in the example below:

@example{
@u[.]RU SMECO
@u[>]Input  Sloc01.Run		! If we had RU Sloc01, this would not be required.
@ux[No. of wires read = 18092]

@r<! Now have current description of wirewrap board in "Old" wirelist.>

@u[>]input  Sloc02.WLZ /N	! Input version 2 of wirelist from Suds.
@ux[Using New Wirelist]
@ux[No. of wires read = 18036]

@u[>]Ground	/N	! .WLZ file from SUDS does not have new GNDS.
@ux[Using New Wirelist]
@ux[Specify Range for Grounding Pins Adjacent to I/O Signals]
@ux<First Pin [J1-01]:>
@ux<Last  Pin [*FV2]:>
@ux<Number of New GNDS = 46>
@ux<Number of I/O signals = 48>

@ux[>]compare Sloc02 	! Compare New with Old, updating the old wirelist.
@ux[Number of Wires unwrapped = 4]
@ux[Number of Wires wrapped = 15]
! See Sloc02.UNR, Sloc02.RAP and Sloc02.STT for results.
@ux[>]
@u[>]new Sloc02.Run		! Save updated wirelist
@ux[No. of wires Output = 18101]
~

The above procedure can be applied repeatedly for each update to
the wirelist.
    