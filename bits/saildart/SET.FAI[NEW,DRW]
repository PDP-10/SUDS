;<DRAW>SET.FAI.14, 12-NOV-75 20:47:12, EDIT BY HELLIWELL
VERSION(SET,2)
STRTBX:	GETFS(B)		;GET FIRST BLOCK FOR BOX
	EXCH B,SETBOX		;POINT TO IT
	JUMPE B,.+2
	PUSHJ P,PUTFS		;GIVE BACK OLD LIST
	MOVE T,CURSE		;GET CURSOR POSITION
	MOVE A,SETBOX
	MOVEM T,1(A)		;SAVE HERE
	SETZM (A)		;CLEAR LINK
	MOVEM A,ENDBOX		;POINTER TO END OF BOX
	TRO STBOX		;NOW WE ARE DRAWING A BOX
	TRZ ZIGZAG		;ZIG THIS WAY FIRST
	MOVEI T,BIGPG		;FLUSH BIG PHRAMUSES
	JRST HYDPOG

SETALT:	TRZE INMOV		;TURN OFF MOVING
	TRO NEEDCL
	TRZN STBOX		;ARE WE DOING A BOX?
	POPJ P,			;NO
	SKIPE B,SETBOX
	PUSHJ P,PUTFS
	SETZM SETBOX
	TRO NEEDCL
	MOVEI T,ANGLPG
	JRST HYDPOG

SPLUS:	TRZE INMOV
	TRO NEEDCL
	TRNN STBOX		;ARE WE DRAWING A SET BOX
	JRST STRTBX		;NO
	MOVE T,CURSE
FINBOX:	MOVE A,ENDBOX
	CAMN T,1(A)	;ON TOP OF THE PREVIOS CORNER>
	POPJ P,		;YES, IGNORE EXTRA "+"
	TRNE ZIGZAG	;UP THEN OVER?
	HLL T,1(A)	;USE X OF END POINT
	TRCN ZIGZAG	;OVER THEN UP?
	HRR T,1(A)	;USE Y OF END POINT
	GETFS(B)	;GET A BLOCK FOR END
	MOVEM T,1(B)
	SETZM (B)
	MOVEM B,(A)
	MOVEM B,ENDBOX
	POPJ P,

SSPACE:	TRNE STBOX		;DRAWING A BOX?
	TRC ZIGZAG		;YES, COMPLIMENT SENSE OF ZIG
	TRZE INMOV		;MOVING?
	TRO NEEDCL		;YES, FIND CLOSEST AGAIN
	POPJ P,			;NO, JUST RETURN
;SROT, STTFND, STBFND
MPC,<
SROT:	PUSHJ P,GETCLS
	JRST PERRET
	TRO MCHG
	PUSH P,A
	PUSH P,1(A)	;CENTER OF SET
	HLRZ A,(A)	;POINTER TO SET LIST
SROT1:	HRRZ B,1(A)	;GET A POINT
	JUMPE B,NOROTP	;NONE
	MOVE T,1(B)	;LOC OF POINT
	ADJUST(SUB,T,<(P)>)	;OFFSET FROM CENTER OF SET
	XCT XTB1+1
	XCT XTB2+1
	XCT XTB3+1
	TLZ T,1
	ADJUST(ADD,T,<(P)>)	;PUT BACK OFFSET
	MOVEM T,1(B)	;PUT BACK X,Y
NOROTP:	HLRZ B,1(A)	;BODY
	JUMPE B,NOROTB	;NONE
	MOVE T,1(B)
	ADJUST(SUB,T,<(P)>)
	XCT XTB1+1
	XCT XTB2+1
	XCT XTB3+1
	TLZ T,1
	ADJUST(ADD,T,<(P)>)
	MOVEM T,1(B)
	HLRZ B,(B)
	HLRZ T,(B)		;PICK UP ROTATION
	ADDI T,1		;90 DEGREES LEFT
	ANDI T,3		;ONLY 4 STATES
	HRLM T,(B)		;AND PUT BACK
	PUSH P,A
	HLRZ A,1(A)		;GET POINTER TO BODY AGAIN
	PUSHJ P,BODFIX		;FIX POINTS
	POP P,A
NOROTB:	HRRZ A,(A)
	JUMPN A,SROT1
	POP P,(P)	;DON'T NEED TO REMEMBER WHERE SET IS ANY MORE
	POP P,A
;	JRST FEDFIX	;FIX FEED THROUGH'S

FEDFIX:	HLRZ A,(A)
FEDFX1:	HRRZ B,1(A)
	JUMPE B,FEDFX2
	HLRZ T,(B)
	HRRZ TT,1(T)
	MOVE TT,1(TT)	;GET BITS
	TLNN TT,FEEDTH	;FEED THROUGH?
	JRST FEDFX2	;NO
	HLRZ T,(T)	;GET ITS POINTER
	MOVE TT,1(B)	;COPY X,Y
	MOVEM TT,1(T)
FEDFX2:	HRRZ A,(A)
	JUMPN A,FEDFX1
	POPJ P,
>;MPC

STBFND:
STTFND:	OUTSTR[ASCIZ/NOT YET BOSS!
/]
	POPJ P,
STMNS:	TRZN STBOX		;DRAWING A BOX?
	POPJ P,
	MOVE T,SETBOX
	MOVE T,1(T)		;X,Y OF START OF BOX
	PUSHJ P,FINBOX		;FINISH BOX AT END
	MOVE T,SETBOX
	MOVE T,1(T)
	PUSHJ P,FINBOX		;IT TAKES TWO
	MOVEI A,CLOSES		;START SET HERE
	SETZB H,CLOSES		;COLLECT SET IN CLOSES, X IN H
	SETZB F,E		;COLLECT Y IN F
	SKIPE B,PONPNT		;ON SCREEN POINTS
	PUSHJ P,CHKPNT
MPC,<
	TRNN BTHSDS
	JRST ONESID		;ONE SIDED SET
	SKIPE B,PONPN2
	PUSHJ P,CHKPNT
ONESID:
>;MPC
	JRST ENDPNT

CHKPNT:	HLRZ T,(B)	;PONTER TO DATA BLOCK
	HRRZ T,1(T)	;POINTER TO TEXT AND BODY(IF ANY)
	MOVE T,1(T)	;POINTER TO BODY
	TLNE T,MPC,<CPIN!>ISPIN
	JRST NOTINP	;IT'S A PIN IT GOES WITH THE BODY
	MOVE T,1(B)	;USE X,Y OF POINT
	PUSHJ P,INBOX	;IS IT IN SET
	JRST NOTINP	;NO
	GETFS(T)		;GET A BLOCK FOR POINT
	HRRZM B,1(T)		;PUT POINT IN SET
	SETZM (T)		;CLEAR LINK
	HRRZM T,(A)		;LINK ONTO END OF SET
	MOVE A,T		;NEW END
	HRRE T,1(B)
	ADD F,T
	HLRE T,1(B)
	ADD H,T
	ADDI E,1
NOTINP:	HRRZ B,(B)		;NEXT POINT
	JUMPN B,CHKPNT		;CHECK IT
	POPJ P,
;END NEW SET
ENDPNT:	MOVEI A,CLOSES		;BACK TO THE BEGINNING
	MOVEI B,DBODPN		;NOW CHECK BODIES
	JRST NOTINB
CHKBOD:	MOVE T,1(B)		;LOC OF BODY
	PUSHJ P,INBOX		;IN BOX?
	JRST NOTINB		;NO
	HRRZ T,(A)		;NEED ANOTHER BLOCK?
	JUMPN T,NONEED		;NO
	GETFS(T)
	SETZM (T)
	SETZM 1(T)
	HRRZM T,(A)		;LINK ON END
NONEED:	HRRZ A,T		;NEW END
	HRLM B,1(A)		;PUT BODY IN SET
	HRRE T,1(B)
	ADD F,T
	HLRE T,1(B)
	ADD H,T
	ADDI E,1
NOTINB:	HRRZ B,(B)
	JUMPN B,CHKBOD
	SKIPE B,SETBOX
	PUSHJ P,PUTFS		;DON'T NEED BOX ANY MORE
	SETZM SETBOX
	MOVEI T,ANGLPG
	PUSHJ P,HYDPOG		;OR DRAWING OF IT
	SKIPN A,CLOSES		;DID WE MAKE A SET?
	POPJ P,			;NO
	GETFS(B)
	HRLZM A,(B)		;GIVE NEW SET A LIST POINTER AND X,Y
	MOVE A,SETPNT
	MOVEM B,SETPNT
	HRRM A,(B)		;LINK IN NEW SET
	MOVE T,F
	IDIV T,E		;AVERAGE OF Y VALUES
MD,<	TRZ T,1			;CLEAR LOW ORDER BIT
	HRRM T,1(B)
	MOVE T,H
	IDIV T,E		;AVERAGE OF X VALUES
	TRZ T,1			;CLEAR LOW ORDER BIT
>;MD
MPC,<
	ASH T,-1
	IDIV T,STPSIZ
	IMUL T,STPSIZ
	ASH T,1
	HRRM T,1(B)
	MOVE T,H
	IDIV T,E		;AVERAGE OF X VALUES
	ASH T,-1
	IDIV T,STPSIZ
	IMUL T,STPSIZ
	ASH T,1
>;MPC
	HRLM T,1(B)
	MOVE T,B
	JRST SCLOSP		;SET AS CLOSEST AND MOVE THERE
;KILL ALL SETS -- CALLED FROM CLEAR
SBLAST:	TRZ STBOX!INMOV
	TRO NEEDCL
SBLST1:	MOVEI B,SETPNT
	SKIPN A,SETPNT
	POPJ P,			;ALL GONE, DONE
	PUSHJ P,SCLEAR
	JRST SBLST1

;KILL ALL TEXT IN CLOSEST SET
STKILT:	TRNN STBOX
	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ A,(A)
STKIL1:	HLRZ D,1(A)		;BODY
	JUMPE D,STKIL4
	HLRZ D,(D)
	JRST STKIL2
STKIL3:	HLRZ D,(D)
	HRRZ C,1(D)
	HLRZ B,(C)
	JUMPE B,STKIL2
	HRRZS (C)
	TRO MCHG
	PUSHJ P,PUTFS
STKIL2:	HRRZ D,(D)
	JUMPN D,STKIL3
STKIL4:	HRRZ C,1(A)
	JUMPE C,NSTPNT
	HLRZ C,(C)
	HRRZ C,1(C)
	HLRZ B,(C)
	JUMPE B,NSTPNT
	HRRZS (C)
	TRO MCHG
	PUSHJ P,PUTFS
NSTPNT:	HRRZ A,(A)
	JUMPN A,STKIL1
	POPJ P,

;FLUSH THIS SET (LEAVE CONTENTS ALONE)
SETDEL:	TRNN STBOX	;DRAWING A BOX OR MOVEING
	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV
	TRO NEEDCL
	MOVE B,CLAST
SCLEAR:	HRRZ T,(A)
	HRRM T,(B)	;LINK SET OUT
	HLRZS (A)	;LINK UP SET FOR DELETION
	MOVE B,A
	PUSHJ P,PUTFS	;GIVE BACK SET
	CAME A,CURSET
	POPJ P,
	SETZM CURSET
	TRO MCHG
	POPJ P,
;DELETE CONTENTS OF CLOSEST SET
SETKIL:	TRNN STBOX		;MOVING OR DRAWING BOX?
	PUSHJ P,GETCLS
	JRST PERRET		;YES
	TRZ INMOV
	TRO MCHG!NEEDCL
	PUSH P,CLAST
	PUSH P,A		;SAVE SET POINTER FOR DELETION
	MOVE D,[ANDCAM C,1(T)]
	PUSHJ P,STBITA
	MOVE D,[IORM C,1(T)]
	MOVE A,(P)
	PUSHJ P,STBITB
	POP P,A			;THIS SET
	POP P,B			;AND LAST
	PUSHJ P,SCLEAR		;NOW FLUSH SET
	JRST DOSDEL		;NOW DELETE ALL MARKED POINTS AND BODIES

;DELETE COMPLIMENT OF SET
DCOMPL:	TRNN STBOX
	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,CLAST
	HRRZ C,(A)
	HRRM C,(B)
	PUSH P,A
	MOVE D,[IORM C,1(T)]
	PUSHJ P,STBITA		;MARK ALL POINTS AND BODIES
	MOVE A,(P)
	MOVE D,[ANDCAM C,1(T)]
	PUSHJ P,STBITB		;NOW UNMARK OUR SET
	PUSHJ P,SBLST1		;FLUSH ALL OTHER SETS
	PUSHJ P,DOSDEL
	SETZM LSTNAM		;DISABLE TEXISTS
LAY,<	SETZM SAVNAM	>
	PUSHJ P,FILEUP		;UPDATE ON SCREEN
	TRO MCHG
	POP P,SETPNT		;THIS IS NOW ONLY SET
	HLLZS @SETPNT		;CLEAR ITS NEXT POINTE
	POPJ P,

DOSDEL:	MOVEI B,PONPNT
	PUSHJ P,PNTSET
MPC,<	MOVEI B,PONPN2
	PUSHJ P,PNTSET
>;MPC
	MOVEI A,DBODPN
	JRST BODSET

BODST1:	HLRZ T,(A)
	HLRZ T,1(T)
	MOVE T,1(T)
	TLNN T,BTMP1		;NEED TO BE DELETED?
	JRST BODSET
	PUSH P,B		;SAVE POINTER TO LAST
	PUSHJ P,BCLEAR		;YES
	POP P,A
BODSET:	MOVE B,A
	HRRZ A,(A)
	JUMPN A,BODST1
	POPJ P,

PNTST1:	HLRZ T,(B)
	HRRZ T,1(T)
	MOVE T,1(T)
	TLNN T,MPC,<CPIN!>ISPIN	;THESE GO WITH BODY
	TLNN T,1
	JRST PNTSET		;TRY NEXT
	PUSH P,A		;SAVE LAST
	PUSHJ P,DELPNT
	POP P,B			;BACK UP TO LAST SO FORWARD GET NEW POINT
PNTSET:	MOVE A,B
	HRRZ B,(B)
	JUMPN B,PNTST1
	POPJ P,

STBITA:	MOVSI C,1
	SKIPE A,PONPNT
	PUSHJ P,PNTBST
MPC,<	SKIPE A,PONPN2
	PUSHJ P,PNTBST
>;MPC
	SKIPN A,DBODPN
	POPJ P,
	MOVSI C,BTMP1
BODBST:	HLRZ T,(A)
	HLRZ T,1(T)
	XCT D
	HRRZ A,(A)
	JUMPN A,BODBST
	POPJ P,

PNTBST:	HLRZ T,(A)
	HRRZ T,1(T)
	XCT D
	HRRZ A,(A)
	JUMPN A,PNTBST
	POPJ P,

STBITB:	MOVSI C,1
	PUSH P,A
	HLRZ A,(A)
SETBT1:	HRRZ T,1(A)
	JUMPE T,SETBT2
	HLRZ T,(T)
	HRRZ T,1(T)
	XCT D
SETBT2:	HRRZ A,(A)
	JUMPN A,SETBT1
	POP P,A
	MOVSI C,BTMP1
	HLRZ A,(A)
SETBT3:	HLRZ T,1(A)
	JUMPE T,SETBT4
	HLRZ T,(T)
	HLRZ T,1(T)
	XCT D
SETBT4:	HRRZ A,(A)
	JUMPN A,SETBT3
	POPJ P,
;APPEND STUFF TO "CURRENT" SET

;APPEND BODY TO CURRENT SET
APPBOD:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,A
	SETZ E,
	PUSHJ P,APPPB
RECNTC:	SKIPA A,CURSET
RECNTR:	CAMN A,CURSET
	TRO MCHG		;MUST UPDATE CURSET
	HRLM A,(P)
	TRO NEEDCL		;MAY CHANGE CLOSEST
	SETZ TT,
	SETZB B,C
	HLRZ A,(A)
RCNTR1:	HRRZ D,1(A)
	PUSHJ P,ADCNTR
	HLRZ D,1(A)
	PUSHJ P,ADCNTR
	HRRZ A,(A)
	JUMPN A,RCNTR1
	JUMPE TT,CPOPJ
	HLRZ A,(P)
	IDIV C,TT
MD,<	TRZ C,1			;CLEAR LOW ORDER BIT
	HRRM C,1(A)
	IDIV B,TT
	TRZ B,1
>;MD
MPC,<
	ASH C,-1
	IDIV C,STPSIZ
	IMUL C,STPSIZ
	ASH C,1
	HRRM C,1(A)
	IDIV B,TT
	ASH B,-1
	IDIV B,STPSIZ
	IMUL B,STPSIZ
	ASH B,1
>;MPC
	HRLM B,1(A)
	POPJ P,

ADCNTR:	JUMPE D,CPOPJ
	HRRE T,1(D)
	ADD C,T
	HLRE T,1(D)
	ADD B,T
	AOJA TT,CPOPJ

CENALL:	SKIPN A,SETPNT
	POPJ P,
CENAL1:	HRLM A,(P)
	PUSHJ P,RECNTR
	HLRZ A,(P)
	HRRZ A,(A)
	JUMPN A,CENAL1
	POPJ P,

;APPEND POINT TO CURRENT SET
APPPNT:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,A
	HLRZ T,(B)
	HRRZ T,1(T)
	MOVE T,1(T)
	TLNE T,MPC,<CPIN!>ISPIN
	JRST PERRET
	MOVEI E,1
	PUSHJ P,APPPB
	JRST RECNTC

APPPB:	SKIPN A,CURSET		;AND A CURRENT SET?
	JRST [	GETFS (A)
		GETFS (T)
		HRLM T,(A)
		SETZM 1(A)
		SETZM (T)
		SETZM 1(T)
		EXCH A,SETPNT
		HRRM A,@SETPNT
		MOVE A,SETPNT
		MOVEM A,CURSET
		JRST .+1]
	HLRZ A,(A)
	SETZ C,			;THIS WILL POINT TO A PLACE TO PUT HIM
APPPN1:	XCT (E)[HLRZ T,1(A)
		HRRZ T,1(A)]
	CAMN T,B		;ALREADY IN SET?
	POPJ P,			;YES, NOOP
	SKIPN T
	MOVE C,A
	MOVE D,A
	HRRZ A,(A)
	JUMPN A,APPPN1
	JUMPN C,APPPN2
	GETFS(C)
	HRRM C,(D)
	SETZM (C)
	SETZM 1(C)
APPPN2:	XCT (E)[HRLM B,1(C)
		HRRM B,1(C)]
	POPJ P,

;MAKE CLOSEST SET THE CURRENT SET
SETSET:	PUSHJ P,GETCLS
	JRST PERRET
	TRO MCHG
	MOVEM A,CURSET
	POPJ P,

;APPEND CLOSEST SET TO CURRENT SET
APPSET:	SKIPN CURSET		;AND CURRENT ONE?
	JRST SETSET		;NO, DO <META>&
	PUSHJ P,GETCLS		;CLOSEST SET?
	JRST PERRET
	CAMN A,CURSET		;APPENDING TO HIMSELF?
	POPJ P,			;YES, NOOP
	MOVEI E,1		;START WITH POINTS
APPST1:	MOVE F,A
	HLRZ F,(F)
APPST2:	XCT (E)[HLRZ B,1(F)
		HRRZ B,1(F)]
	JUMPE B,APPSKP
	PUSH P,A
	PUSHJ P,APPPB
	POP P,A
APPSKP:	HRRZ F,(F)
	JUMPN F,APPST2
	SOJGE E,APPST1		;LOOP FOR BODIES
	JRST RECNTC		;NOW RE-CENTER SET
;REMOVE POINT FROM CURRENT SET
XPNT:	SKIPE B,CURSET
	PUSHJ P,GETCLS
	JRST PERRET
	EXCH A,B
	MOVEI E,1
	PUSHJ P,XPNBD
	JRST RECNTC

;REMOVE BODY FROM CURRENT SET
XBOD:	SKIPE B,CURSET
	PUSHJ P,GETCLS
	JRST PERRET
	EXCH A,B
	SETZ E,
	PUSHJ P,XPNBD
	JRST RECNTC

XPNBD:	HLRZ A,(A)
XPNBD1:	XCT (E)[HLRZ T,1(A)
		HRRZ T,1(A)]
	CAMN T,B
	XCT (E)[HRRZS 1(A)
		HLLZS 1(A)]
	HRRZ A,(A)
	JUMPN A,XPNBD1
	POPJ P,

;REMOVE MEMBERS OF CLOSEST SET FROM CURRENT SET
XSET:	TRNN STBOX
	SKIPN C,CURSET
	JRST PERRET
	MOVEI E,1
	PUSHJ P,GETCLS
	JRST PERRET
	CAMN C,CLOSES
	JRST PERRET
	TRZ INMOV
	EXCH C,A
XSET2:	PUSH P,C
	HLRZ C,(C)
XSET1:	XCT (E)[HLRZ B,1(C)
		HRRZ B,1(C)]
	JUMPE B,.+3
	MOVE A,CURSET
	PUSHJ P,XPNBD
	HRRZ C,(C)
	JUMPN C,XSET1
	POP P,C
	SOJGE E,XSET2
	JRST RECNTC

;CLEAR CURRENT SET
CLRCUR:	SETZM CURSET
	TRO MCHG		;MUST CHANGE WHOLE THING
	POPJ P,

;REMOVE POINT FROM ALL SETS
XPNTA:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE B,A
	PUSHJ P,REMPNT
	JRST ALCNTR

;REMOVE BODY FROM ALL SETS
XBODA:	PUSHJ P,GETCLS
	JRST PERRET
	PUSHJ P,REMBOD
	JRST ALCNTR

;REMOVE MEMBERS OF THIS SET FROM ALL SETS
;AND DELETE SET
XSETA:	TRNN STBOX
	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV
	TRO NEEDCL
	PUSH P,CLAST
	PUSH P,A
	HLRZ A,(A)
XSETA1:	PUSH P,A
	HLRZ A,1(A)
	JUMPE A,.+2
	PUSHJ P,REMBOD
	MOVE A,(P)
	HRRZ B,1(A)
	JUMPE B,.+2
	PUSHJ P,REMPNT
	POP P,A
	HRRZ A,(A)
	JUMPN A,XSETA1
	POP P,A
	POP P,B
	PUSHJ P,SCLEAR
ALCNTR:	SKIPN E,SETPNT
	POPJ P,
ALCNT1:	MOVE A,E
	PUSHJ P,RECNTR
	HRRZ E,(E)
	JUMPN E,ALCNT1
	POPJ P,

SETJMP:	SKIPN T,CURSET
	JRST PERRET
	TRZ STBOX!INMOV
	JRST SCLOSP
;WRITE CLOSEST SET INTO FILE
SWRITE:	MOVE T,MODE
	TRNN STBOX		;NOT DRAWING BOX, AND
	CAIE T,SETM		;SET MODE ONLY
	JRST PERRET
	PUSHJ P,GETCLS
	JRST PERRET
	PUSH P,A		;SAVE SET POINTER
	MOVE D,[ANDCAM C,1(T)]	;FIRST CLEAR ALL MARK BITS
	PUSHJ P,STBITA
	MOVE A,(P)		;GET SET POINTER
	MOVE D,[IORM C,1(T)]	;NOW MARK THIS SET
	PUSHJ P,STBITB
	POP P,SETFLG		;SETUP FLAG TO THIS SET
	JRST DWRITS		;AND WRITE FILE
;ASSOCIATIVE SET
ASSETP:	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV!INLIN
	PUSHJ P,ASSCLR
	PUSHJ P,ASSPTP
ASSFIN:	MOVEI T,SETM
	PUSHJ P,CHNGMD		;GO INTO SET MODE
	MOVE A,SETPNT
	PUSHJ P,RECNTR		;CALC CENTER
	MOVE A,SETPNT
	MOVE T,1(A)		;LOC OF CENTER
	JRST CHKON

ASSPTP:	HLRZ B,(A)
	HRRZ C,1(B)
	MOVE D,1(C)
	TLOE D,1
	POPJ P,
	MOVEM D,1(C)
	PUSH P,B		;SAVE DATA BLOCK POINTER
	TLNN D,MPC,<CPIN!>ISPIN	;THESE DON'T GO INTO SET
	PUSHJ P,ASPUTP
MPC,<	TRNE BTHSDS		;ONLY IN BOTH SIDES MODE
	TLNN D,FEEDTH
	JRST NOFOLF
	HLRZ A,(B)		;FOLLOW FEEDTHROUGH
	PUSHJ P,ASSPTP
	JRST NOBODF

NOFOLF:
>;MPC
	TLNN D,ISPIN
	JRST NOBODF
	HLRZ A,(B)		;BODY POINTER
	PUSHJ P,ASSPTB
NOBODF:
MD,<	MOVE B,(P)		;PICKUP DATA BLOCK POINTER AGAIN
	HLRZ B,1(B)
	MOVEM B,(P)
	HLRZ A,(B)
	SKIPE A
	PUSHJ P,ASSPTP
	HRRZ A,@(P)
	SKIPE A
	PUSHJ P,ASSPTP
	AOS (P)
	HLRZ A,@(P)
	SKIPE A
	PUSHJ P,ASSPTP
	POP P,A
	HRRZ A,(A)
	JUMPN A,ASSPTP
	POPJ P,
>;MD
MPC,<	POP P,B			;PICKUP DATA BLOCK POINTER AGAIN
	HLRZ B,1(B)
	JUMPE B,CPOPJ
ASSL1:	MOVEI C,2
ASSL2:	XCT (C)[HLRZ A,(B)
		HRRZ A,1(B)
		HLRZ A,1(B)]
	JUMPE A,ASSL3
	HRLM C,B
	PUSH P,B
	PUSHJ P,ASSPTP
	POP P,B
	HLRZ C,B
ASSL3:	SOJGE C,ASSL2
	HRRZ B,(B)
	JUMPN B,ASSL2
	POPJ P,
>;MPC

ASSETB:	PUSHJ P,GETCLS
	JRST PERRET
	TRZ INMOV
	PUSHJ P,ASSCLR
	PUSHJ P,ASSPTB
	JRST ASSFIN

ASSPTB:	HLRZ B,(A)
	HLRZ C,1(B)
	MOVE T,1(C)
	TLOE T,BTMP1		;DONE ALREADY?
	POPJ P,
	MOVEM T,1(C)
	PUSHJ P,ASPUTB
	JRST ASSBP1

ASSBP2:	HLRZ B,(A)
MPC,<	TRNE BTHSDS		;DOING BOTH SIDES?
	JRST ASSBTH		;YES
	HRRZ T,1(B)
	MOVE T,1(T)
	EQV T,SID
	JUMPGE T,ASSBP1		;JUMP IF ON OTHER SIDE
ASSBTH:
>;MPC
	PUSH P,B
	PUSHJ P,ASSPTP
	POP P,B
ASSBP1:	HRRZ A,(B)
	JUMPN A,ASSBP2
	POPJ P,

ASPUTP:	MOVE T,H
ASPTP1:	HRRZ TT,1(T)
	JUMPE TT,ASPTP2
	MOVE TT,T
	HRRZ T,(T)
	JUMPN T,ASPTP1
	GETFS(T)
	HRRM T,(TT)
	SETZM (T)
	SETZM 1(T)
ASPTP2:	HRRM A,1(T)
	POPJ P,

ASPUTB:	MOVE T,H
ASPTB1:	HLRZ TT,1(T)
	JUMPE TT,ASPTB2
	MOVE TT,T
	HRRZ T,(T)
	JUMPN T,ASPTB1
	GETFS(T)
	HRRM T,(TT)
	SETZM (T)
	SETZM 1(T)
ASPTB2:	HRLM A,1(T)
	POPJ P,

ASSCLR:	PUSH P,A
	MOVE D,[ANDCAM C,1(T)]
	PUSHJ P,STBITA
	POP P,A
	GETFS(T)
	SETZM 1(T)
	EXCH T,SETPNT
	GETFS(H)
	HRL T,H
	MOVEM T,@SETPNT
	SETZM (H)
	SETZM 1(H)
	POPJ P,
;REMPNT, REMBOD, INBOX
REMPNT:
	CAMN B,MOVED		;DON'T CHECK LATER IF GOING AWAY
	SETZM MOVED
UML,<	MOVEI D,WIRLST
	JRST ISWL

ISWL1:	HRRZ C,1(D)
ISWL3:	HLRZ T,(C)
	CAMN T,B
	HRRZS (C)
	HRRZ C,(C)
	JUMPN C,ISWL3
ISWL:	HRRZ D,(D)
	JUMPN D,ISWL1
>;UML
	MOVEI D,BLPNTR
	JRST ISBL

ISBL1:	HRRZ T,1(D)
	CAME B,T
	JRST ISBL
	HRRZ T,(D)
	HRRM T,(C)
	FSTRET(D)
	MOVE D,C
ISBL:	MOVE C,D
	HRRZ D,(D)
	JUMPN D,ISBL1
MPC,<
ROUTE,<	CAMN B,RCL1
	SETZM RCL1
	CAMN B,RCL2
	SETZM RCL2
>;ROUTE
>;MPC
SHORT,<	MOVEI D,SHRTER
	JRST SHRTR1

SHRTR2:	HLRZ A,(D)
	HRRZ T,1(D)
	CAMN T,B
	JRST SHRTR3
	HLRZ T,1(D)
	CAMN T,B
	JRST SHRTR3
	HRRZ T,1(A)
	CAMN T,B
	JRST SHRTR3
	HLRZ T,1(A)
	CAME T,B
	JRST SHRTR1
SHRTR3:	FSTRET(A)
	HRRZ T,(D)
	HRRM T,(C)
	FSTRET(D)
	MOVE D,C
SHRTR1:	MOVE C,D
	HRRZ D,(D)
	JUMPN D,SHRTR2
	HLRZ T,SERR1
	HRRZ D,SERR1
	CAME T,B
	CAMN D,B
	JRST SHRTR4
	HLRZ T,SERR2
	HRRZ D,SERR2
	CAME T,B
	CAMN D,B
	JRST SHRTR4
	JRST SHRTR5

SHRTR4:	SETZM SERR1
	SETZM SERR2
SHRTR5:
>;SHORT
	SKIPN C,SETPNT
	POPJ P,
REMP1:	HLRZ D,(C)		;GO DOWN SET
REMP2:	HRRZ E,1(D)		;A POINT
	CAMN E,B		;IS THIS IT?
	HLLZS 1(D)		;YES, CLEAR POINTER
	HRRZ D,(D)		;NEXT MEMBERS
	JUMPN D,REMP2
	HRRZ C,(C)		;NEXT SET
	JUMPN C,REMP1
	POPJ P,

REMBOD:	SKIPN C,SETPNT
	POPJ P,
REMB1:	HLRZ B,(C)		;GO DOWN SET......
REMB2:	HLRZ D,1(B)		;A BODY
	CAMN D,A		;IS THIS IT
	HRRZS 1(B)		;CLEAR POINTER
	HRRZ B,(B)
	JUMPN B,REMB2
	HRRZ C,(C)
	JUMPN C,REMB1
	POPJ P,

INBOX:	MOVE C,SETBOX
	SETZ G,
INBOX1:	HRRZ TT,(C)
	JUMPE TT,INDONE		;FINI
	HLLZ TT,1(TT)		;X,Y OF NEXT POINT
	HLLZ TTT,1(C)		;X,Y OF THIS POINT
	HLLZ D,T		;GET X PART OF T
	CAMN TT,TTT		;SAME X VALUES FOR LINE?
	JRST CKVERT		;YES, SPECIAL CHECK
	CAMG TT,TTT		;WHICH IS GREATER?
	EXCH TT,TTT		;REVERSE
	CAML D,TTT		;NOT IN RANGE?
	CAML D,TT		;	"
	JRST VERT		;DOESN'T MAKE IT
	HRRE TT,1(C)		;Y ONLY
	HRRE D,T		;Y OF POINT IN QUESTION
	CAMN TT,D		;IF ON LINE, IMMEDIATE WIN!
	JRST CPOPJ1
	CAML TT,D		;CHECK IF Y VALUE OF LINE IS GREATER THAN THAT OF POINT
	ADDI G,1		;ANOTHER CROSSING
	JRST VERT

VERT:	HRRZ C,(C)
	JRST INBOX1

CKVERT:	CAME D,TT		;POINT ALSO ON VERTICAL LINE?
	JRST VERT		;NO, SKIP IT
	HRRZ TT,(C)
	HRRE TTT,1(TT)		;GET Y VALUES
	HRRE TT,1(C)		;	"
	HRRE D,T		;Y PART OF T
	CAMG TT,TTT		;WHICH IS GREATER?
	EXCH TT,TTT		;REVERSE
	CAMG D,TT
	CAMGE D,TTT
	JRST VERT		;NOT ON LINE, IGNORE
	JRST CPOPJ1		;IMMEDIATE WIN IF ON VERT LINE

INDONE:	TRNE G,1		;ODD NUMBER OF CROSSINGS?
	AOS(P)			;YES, SKIP RETURN, IT WAS IN THE BOX
	POPJ P,
MD,<
SETCOP:	TRNN STBOX		;ARE WE MOVING OR DRAWING A BOX?
	PUSHJ P,GETCLS		;CURRENT SET
	JRST PERRET		;NOT NOW BROTHER
	TRZ INMOV
	MOVE G,A
	MOVEI T,BIGPG
	PUSHJ P,HYDPOG
	PUSH P,CURSET
	MOVEM A,CURSET
	PUSH P,CURSE
	MOVE T,CURSE
	ADJUST(SUB,T,<1(G)>)	;GET OFFSET TO NEW SET
	MOVEM T,NOFFST		;REMEMBER IT
	MOVE T,PID
	MOVEM T,OLDPID
	MOVE T,BID
	MOVEM T,OLDBID
	HLRZ G,(G)		;START OF OLD SET
	SETZM NEWSET		;COLLECT NEW SET HERE
	MOVEI H,NEWSET		;POINTER TO END OF NEW SET
BODNEW:	GETFS(T)		;NEW BLOCK FOR NEW SET
	SETZM (T)
	SETZM 1(T)		;CLEAR IT
	HRRM T,(H)		;LINK IT IN
	MOVE H,T		;POINT TO IT
	HLRZ B,1(G)		;BODY OF THIS BLOCK
	JUMPE B,NNWBOD		;NONE HERE
	MOVE C,1(B)		;LOC
	ADJUST(ADD,C,NOFFST)	;ADD OFFSET
	MOVEM C,CURSE		;WHERE TO PUT NEW BODY
	HLRZ B,(B)		;POINTER TO POINTERS
	HRRZ C,1(B)		;POINTER TO TYPE
	MOVEM C,CURBOD		;SAVE HERE FOR BPYES
	HLRZ C,1(B)
	PUSH P,C		;SAVE  POINTER TO BID, BITS
	HLRZ C,(B)		;ORIENTATION
	MOVEM C,CURORT		;SAVE HERE FOR BPYES
	PUSHJ P,BPYES		;PLANT THE BODY
	MOVE T,DBODPN		;NEWEST BODY
	HRLM T,1(H)		;TO NEW SET
	HLRZ T,(T)
	HLRZ T,1(T)
	POP P,A			;OLD BODY POINTER TO BID, BITS
	HLRZ C,(A)		;OLD BID
	ADD C,OLDBID		;NEW BODY ID
	HRLM C,(T)		;STUFF IT
	MOVE B,[L1416!R1416!FIXLOC!FIXBLO,,0]
	AND B,1(A)		;GET THESE OLD BITS
	IORM B,1(T)		;COPY TO NEW
	HRRZ B,(A)		;GET OLD LOC POINTER
	JUMPE B,NCPLOC		;SKIP IF NONE
	GETFS(C)
	MOVE TTT,1(B)
	MOVEM TTT,1(C)
	HRRM C,(T)
	GETFS(TTT)
	HRLZM TTT,(C)
	HLRZ B,(B)
	MOVE C,(B)
	MOVEM C,(TTT)
	MOVE C,1(B)
	MOVEM C,1(TTT)
NCPLOC:	HRRZ A,1(A)		;OLD BODY TEXT/PROPERTY LIST
	JUMPE A,NNWBOD
	MOVEI C,1(T)
BDNEW2:	GETFS(T)
	MOVE TTT,1(A)
	MOVEM TTT,1(T)
	HRRM T,(C)
	MOVE C,T
	SETZM (C)
	HLRZ T,(A)
	JUMPE T,BDNEW3
	PUSHJ P,STRCOP
	HRLM B,(C)
	HLRZ T,(A)
	HLRZ T,(T)
	JUMPE T,BDNEW3
	PUSHJ P,LSTCOP
	HLRZ T,(C)
	HRLM B,(T)
BDNEW3:	HRRZ A,(A)
	JUMPN A,BDNEW2
NNWBOD:	HRRZ B,1(G)		;POINT FIELD
	JUMPE B,NNWPNT		;NONE
	HLRZ TTT,(B)
	HRRZ TTT,(TTT)		;OLD POINT ID
	PUSH P,TTT
	MOVE T,1(B)		;LOC
	ADJUST(ADD,T,NOFFST)	;OFFSET
	PUSHJ P,PNTPUT		;MAKE A POINT(ALWAYS)
	HRRM D,1(H)		;PUT IN NEW SET
	HLRZ T,(D)
	POP P,TTT
	ADD TTT,OLDPID		;NEW POINT ID
	HRRM TTT,(T)		;STUFF IT
NNWPNT:	HRRZ G,(G)		;NEXT SET BLOCK
	JUMPN G,BODNEW		;LOOP
;NOW COPY STUFF ONTO NEW POINTS AND BODIES
	MOVE G,CURSET
	HLRZ G,(G)		;POINTER TO SET
	MOVE H,NEWSET		;AND NEW ONE
BODPNS:	HLRZ A,1(G)		;OLD BODY
	JUMPE A,NTPINS
;********************BODY ***********************
	HLRZ A,(A)
	JRST PINDON		;GO DOWN PIN LIST
NXTPIN:	HLRZ A,(A)
	HRRZ B,1(A)
	MOVE T,B		;SAVE POINTER TO TEXT AND BIT BLOCK
	HRRZ B,(B)		;POINTER TO PIN ENTRY IN TYPE (COMMON)
	HLRZ C,1(H)		;NEW BODY
	HLRZ C,(C)
	JRST NEWPN1
PINNUM:	MOVEM C,NEWPNT
	HLRZ C,(C)
	HRRZ D,1(C)		;POINTER TO TEXT, PIN, AND BODY POINTERS
	HRRZ E,(D)		;POINTER TO PIN ENTRY (COMMON)
	CAMN E,B		;IS THIS THE ONE
	JRST THSPIN		;YES
NEWPN1:
	HRRZ C,(C)
	JUMPN C,PINNUM		;LOOP
	JRST PINDON		;OOPS!
THSPIN:	PUSHJ P,PCOPY		;COPY TEXT AND TEXT BITS
NNWTXT:
	HRRZ T,1(A)		;COPY PIN #
	HRRZ T,1(T)
	HRRM T,1(D)
	HLRZ T,1(A)		;^_ POINTER FOR OLD PIN
	MOVEM T,CRUDLR
	HLRZ T,1(C)		;^_ POINTER FOR NEW PIN
	MOVEM T,UDLR
	PUSHJ P,SEGCOP		;MAKE SEGMENTS (USE POINTER IN NEWPNT)
PINDON:
	HRRZ A,(A)
	JUMPN A,NXTPIN		;NEXT PIN OF THIS BODY
NTPINS:	HRRZ A,1(G)		;OLD POINT
	JUMPE A,NNOPNT		;NO POINT HERE
;********************* PIN ********************
	HRRZ C,1(H)		;NEW POINT
	MOVEM C,NEWPNT
	HLRZ A,(A)
	HLRZ C,(C)		;POINTERS TO POINTERS
	HLRZ T,1(A)
	MOVEM T,CRUDLR
	HLRZ T,1(C)
	MOVEM T,UDLR
	HRRZ T,1(A)
	HRRZ D,1(C)
	MOVE TT,1(T)
	TLNN TT,CPIN		;CONNECTOR PIN HERE?
	JRST NOCCPN		;NO
	HRRZ TT,(T)
	GETFS (TTT)
	MOVE B,(TT)
	MOVEM B,(TTT)
	MOVE B,1(TT)
	MOVEM B,1(TTT)
	HRRM TTT,(D)		;STO NEW CPIN BLOCK
	MOVSI TTT,CPIN!FIXCON
	AND TTT,1(T)		;PICKUP FIXCON BIT AS WELL AS CPIN
	IORM TTT,1(D)		;AND MARK IT
NOCCPN:	PUSHJ P,PCOPY		;COPY TEXT AND TEXT BITS
NNOTXT:	PUSHJ P,SEGCOP		;MAKE SEGMENTS
NNOPNT:	HRRZ H,(H)
	HRRZ G,(G)		;NEXT OF NEW AND OLD
	JUMPN G,BODPNS		;NEXT BLOCK
;END FINISH UP
	GETFS(A)		;NEW BLOCK
	MOVE B,SETPNT		;LINK HIM IN
	HRL B,NEWSET		;POINT TO SET
	MOVEM B,(A)		;TO NEW BLOCK
	MOVEM A,SETPNT		;DONE
	MOVE T,A
	HRLI T,SETPNT
	PUSHJ P,SCLOSE
	POP P,CURSE		;RESTORE CURSOR POSITION
	POP P,CURSET
	MOVE T,CURSE
	MOVEM T,1(A)		;PUT SET AT CURSOR
	MOVEI T,SETM
	PUSHJ P,CHNGMD
	PUSHJ P,DOSMOV
	TRO MCHG		;START MOVING AND MARK AS CHANGED
	MOVE T,OLDBID
	MOVEM T,BID
	MOVE T,OLDPID
	MOVEM T,PID
	JRST REEID		;SPREAD NEW ID'S OVER RANGE OLDBID-
DEFINE MAKSEG $ (LOSE,INDEX,GET,PUT)
	<H$GET$RZ T,@UDLR		;ONE THERE ALREADY?
	JUMPN T,LOSE		;YES
	H$GET$RZ	T,@CRUDLR
	JUMPE	T,LOSE
	MOVEI	TTT,(T)
	PUSHJ	P,GETID			;GET POINT ID IN TTT
	PUSHJ	P,FNDID			;FIND BY ID (ALWAYS WORKS RIGHT)
	JRST	LOSE
	H$PUT$RZ T,INDEX(E)
	JUMPN T,LOSE			;ONE AT DESTINATION ALREADY?
	HR$GET$M D,@UDLR
	MOVE	D,NEWPNT
	HR$PUT$M D,INDEX(E)
>

SEGCOP:	MAKSEG(NODOWN,0,L,R)
NODOWN:	MAKSEG(NOUP,0,R,L)
NOUP:	AOS CRUDLR
	AOS UDLR
	MAKSEG(NOLEFT,1,L,R)
NOLEFT:	MAKSEG(CPOPJ,1,R,L)
	POPJ P,

>;MD
MPC,<
SETCOP:	TRNN STBOX		;ARE WE MOVING OR DRAWING A BOX?
	PUSHJ P,GETCLS		;CURRENT
	JRST PERRET		;NOT NOW BROTHER
	TRO MCHG
	TRZ INMOV
	MOVEI T,BIGPG
	PUSHJ P,HYDPOG
	PUSH P,CURSET
	MOVEM A,CURSET
	PUSH P,SID		;SAVE WHICH SIDE WE ARE ON
	PUSH P,CURSE		;SAVE CURSOR POSITION
	MOVE T,PID
	MOVEM T,OLDPID
	MOVE T,BID
	MOVEM T,OLDBID
	MOVE T,CURSE
	ADJUST(SUB,T,<1(A)>)
	MOVEM T,NOFFST		;OFFSET FOR NEW SET
	SETZM NEWSET		;COLLECT NEW SET HERE
	MOVEI G,NEWSET
	HLRZ A,(A)
BODNEW:	PUSH P,A
	GETFS (B)
	HRRM B,(G)
	SETZM (B)
	SETZM 1(B)
	HRRZ G,B
	HLRZ B,1(A)		;POINTER TO BODY FIELD OF THIS SET
	JUMPE B,NNWBOD		;NONE
	MOVE C,1(B)		;LOC
	ADJUST(ADD,C,NOFFST)	;ADD OFFSET
	MOVEM C,CURSE		;SAVE HERE
	HLRZ B,(B)		;POINTER TO POINTERS
	HRRZ C,1(B)		;POINTER TO TYPE
	HLRZ TTT,1(B)
	HLRZ TTT,(TTT)		;GET BID
	PUSH P,TTT
	MOVEM C,CURBOD		;SAVE HERE
	HLRZ C,(B)		;ORIENTATION
	MOVEM C,CURORT		;SAVE HERE
	PUSHJ P,BPYES		;MAKE A BODY THERE
	MOVE C,DBODPN		;THIS POINTS TO NEW BODY
	HRLM C,1(G)		;PUT IN NEW SET
	POP P,TTT		;OLD BODY ID
	ADD TTT,OLDBID		;NEW BODY ID
	HLRZ T,(C)
	HLRZ T,1(T)
	HRLM TTT,(T)
NNWBOD:	MOVE A,(P)		;SET POINTER
	HRRZ B,1(A)		;POINT FROM OLD SET
	JUMPE B,NNWPNT		;MAYBE NONE
	HLRZ T,(B)
	HRRZ TTT,(T)
	PUSH P,TTT		;SAVE POINT ID
	HRRZ T,1(T)
	MOVE T,1(T)
	EQV T,SID
	JUMPL T,PNTNEW		;RIGHT SIDE?
	SWITCH			;NO
PNTNEW:	MOVE T,1(B)		;GET LOC OF OLD POINT
	ADJUST(ADD,T,NOFFST)	;NEW POS
	PUSHJ P,PNTPUT		;MAKE THE NEW POINT
	HRRM D,1(G)		;STORE NEW POINT IN NEW SET
	HLRZ T,(D)
	POP P,TTT
	ADD TTT,OLDPID		;NEW POINT ID
	HRRM TTT,(T)
NNWPNT:	POP P,A
	HRRZ A,(A)
	JUMPN A,BODNEW
	MOVE H,NEWSET		;NEW SET IN H
	MOVE G,CURSET
	HLRZ G,(G)		;OLD IN G
SEGCP1:	HLRZ A,1(G)		;BODY
	JUMPE A,SEGCP2		;ANY?
	HLRZ B,(A)
	JRST SEGCP3
SEGCP4:	HLRZ B,(A)
	HRRZ T,1(B)
	HLL T,1(T)
	HRR T,(T)
	HLR T,(T)		;XWD BITS,PIN#
	HLRZ C,1(H)		;NEW BODY
	HLRZ D,(C)		;POINTER BLOCK
	JRST SEGCP5
SEGCP6:	HLRZ D,(C)
	HRRZ TT,1(D)
	MOVE TTT,1(TT)
	EQV TTT,T
	JUMPGE TTT,SEGCP5
	HRRZ TT,(TT)
	HLRZ TT,(TT)
	CAIE TT,(T)		;SAME PIN #
	JRST SEGCP5		;NO
	PUSH P,B		;SAVE LINK
	PUSHJ P,COPPNT		;COPY POINT STUFF
	POP P,B
	JRST SEGCP3
SEGCP5:	HRRZ C,(D)
	JUMPN C,SEGCP6
SEGCP3:	HRRZ A,(B)
	JUMPN A,SEGCP4
SEGCP2:	HRRZ A,1(G)		;POINT FROM OLD SET
	JUMPE A,SEGCP7		;NO POINT
	HRRZ C,1(H)		;AND FROM NEW ONE
	PUSHJ P,COPPNT		;DO POINT STUFF
SEGCP7:	HRRZ H,(H)
	HRRZ G,(G)
	JUMPN G,SEGCP1
	JRST COPSDN
COPPNT:	MOVEM C,NEWPNT		;STORE NEW POINT POINTER HERE
	HLRZ T,(A)
	HRRZ T,1(T)
	HLRZ TT,(C)
	HRL A,TT		;GRAB DATA BLOCK POINTER OF NEWPNT AND STUFF IT AWAY
	HRRZ TT,1(TT)
	MOVE TTT,[PLANES,,-1]	;COPY PLANES AND PAD TYPE!
	ANDCAM TTT,1(TT)	;CLEAR IN NEW POINT
	AND TTT,1(T)		;GET FROM OLD
	IORB TTT,1(TT)		;SET IN NEW (AND GET FRONT BIT)
	EQV TTT,SID
	JUMPL TTT,COPSID	;RIGHT SIDE?
	PUSH P,T
	SWITCH			;NO, CHANGE
	POP P,T
COPSID:	HLRZ T,(T)		;TEXT POINTER
	JUMPE T,NNOTXT
	PUSHJ P,STRCOP
	HLRZ T,(C)
	HRRZ T,1(T)
	HRLM B,(T)		;STORE NEW TEXT POINTER
NNOTXT:	HLRZ F,(A)
	HLRZ F,1(F)		;NEIGHBOR POINTER
	PUSH P,H		;SAVE H
	JUMPE F,NOSEGS		;NONE AT ALL?
	PUSH P,A		;AND A AND NEIGHBOR POINTER
SEGCOP:	MOVEI H,2
NNTXT1:	XCT (H)[HLRZ T,(F)
		HRRZ T,1(F)
		HLRZ T,1(F)]
	JUMPE T,NOSEG
	MOVEI TTT,(T)
	PUSHJ P,GETID			;GETID INTO TTT
	PUSHJ P,FNDID
	JRST NOSEG
	MOVE B,E
	MOVE A,NEWPNT
	PUSHJ P,FNDLNK		;ALREADY THERE?
	CAIA			;NO, LETS MAKE ONE
	JRST NOSEG		;YES, DON'T MAKE 2 LINES
	HLRZ T,(P)		;GET NEIGHBOR POINTER FROM STACK
	PUSHJ P,FRELNK
	XCT (T)PUTAB
	MOVE T,TTT
	PUSHJ P,FRELNK
	MOVE D,NEWPNT
	XCT (T)PUTAB
NOSEG:	SOJGE H,NNTXT1
	HRRZ F,(F)
	JUMPN F,SEGCOP
	POP P,A			;GET BACK SOURCE POINT
NOSEGS:	HLRZ T,(A)
	HLRZ TTT,(T)
	HRRZ T,1(T)
	MOVE T,1(T)
	TLNN T,FEEDTH		;FEED THROUGH HERE?
	JRST NNPFED		;NO
	SWITCH			;GET TO OTHER SIDE
	PUSHJ P,GETID		;ID OF OTHER POINT(POINTER ALREADY IN TTT)
	PUSHJ P,FNDID		;FIND NEW POINT
	JRST NOFEDY		;NOT YET, CLEAR PLANE BITS, NO ONE ON OTHER SIDE
	MOVE TT,1(T)
	TLNE TT,FEEDTH!CPIN!ISPIN;IS IT FED THROUGH?
	JRST NOFEDX		;YES, DONE ALREADY
	HRR TT,NEWPNT
	HRLM TT,(TTT)
	TLO TT,FEEDTH
	HLLM TT,1(T)
	HLRZ TT,(TT)
	HRLM D,(TT)
	HRRZ TT,1(TT)
	MOVE TTT,1(TT)
	TLO TTT,FEEDTH
	HLLM TTT,1(TT)
NOFEDX:	SWITCH
NNPFED:	POP P,H
	POPJ P,

NOFEDY:	SWITCH
	POP P,H
	MOVE T,NEWPNT
	HLRZ T,(T)
	HRRZ T,1(T)
	MOVSI TT,PLANES
	ANDCAM TT,1(T)		;CLEAR PLANE CONNECTIONS IF NOT FED THROUGH YET!
	POPJ P,
COPSDN:	GETFS(A)		;POINTER BLOCK FOR SET
	MOVE B,SETPNT		;LINK HIM IN
	HRL B,NEWSET		;POINT TO SET
	MOVEM B,(A)		;TO NEW BLOCK
	MOVEM A,SETPNT		;DONE
	MOVE T,A
	HRLI T,SETPNT
	PUSHJ P,SCLOSE
	POP P,CURSE		;RESTORE CURSOR POSITION
	MOVE T,CURSE
	MOVEM T,1(A)		;NEW SET CENTER
	MOVEI T,SETM
	PUSHJ P,CHNGMD		;BACK TO SET MODE
	PUSHJ P,DOSMOV
	TRO MCHG		;AND NOW MOVE IT(THIS CHANGES PIC).
	MOVE T,OLDPID
	MOVEM T,PID
	MOVE T,OLDBID
	MOVEM T,BID
	PUSHJ P,REEID		;SPREAD NEW ID'S OVER RANGE OLDBID-
	POP P,T
	POP P,CURSET
	EQV T,SID
	JUMPL T,CPOPJ
	SWITCH
	POPJ P,
>;MPC
STRCOP:	GETFS (B)		;RETURN POINTER IN B
	MOVE TT,1(T)		;GET OFFSET
	MOVEM TT,1(B)
	HRRZ T,(T)
	HLL TT,(T)		;SIZE
	GETFS(TTT)		;GET A BLOCK FOR IT
	MOVEM TTT,(B)		;LINK IN
	HLLZM TT,(TTT)
	MOVE TT,1(T)
	MOVEM TT,1(TTT)		;SAVE FIRST WORD OF TEXT
LPTXTC:	HRRZ T,(T)		;NEXT BLOCK
	JUMPE T,[	HLLZS(TTT)	;CLEAR LINK
			POPJ P,]
LSTCP1:	GETFS(TT)		;ANOTHER BLOCK
	HRRM TT,(TTT)		;LINK IT IN
	MOVE TTT,TT
	MOVE TT,1(T)
	MOVEM TT,1(TTT)
	JRST LPTXTC		;LOOP

LSTCOP:	SETZ B,
	MOVEI TTT,B
	JRST LSTCP1

MD,<
PCOPY:	HLRZ TT,(T)
	JUMPE TT,CPOPJ		;DON'T BOTHER IF NO TEXT
	MOVSI TTT,FIXTXT!FIXRHT
	AND TTT,1(T)		;GET BITS FROM OLD
	IORM TTT,1(D)		;STORE IN NEW
	HLRZ T,(T)
	PUSHJ P,STRCOP
	HRLM B,(D)		;STORE NEW TEXT IN NEW POINT
	POPJ P,
>;MD
