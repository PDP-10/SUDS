;<DRAW>MOVE.FAI.43, 18-NOV-75 11:42:05, EDIT BY HELLIWELL
VERSION(MOVE,2)
;START MOVING
PBMOV:	TRZA TFLG
PGRAB:	TRO TFLG
	TRNE INMOV
	JRST PERRET
	TRZ MD,<LMOVE!>TMOVE
	MOVE T,MODE
	HRRZ T,STRTMV(T)
	JRST (T)

TXTMOV:	TRNE INMOV
	JRST PERRET
MD,<	TRZ LMOVE	>
	TRO TMOVE
	MOVE T,MODE
	HLRZ T,STRTMV(T)
	JRST (T)

STRTMV:	PERRET,,SMOVE	;SET MODE
MD,<	BMOVET,,BMOVE	;BODY MODE	>
MPC,<	PERRET,,BMOVE	;BODY MODE	>
	PMOVET,,PMOVE	;POINT MODE
	PERRET,,PERRET	;LINE MODE
	PMOVET,,PMOVE	;TEXT MODE
	PERRET,,PERRET	;ALTER MODE
	PERRET,,PERRET	;MACRO ALTER MODE
	PERRET,,PERRET	;SPECIAL POINTER MODE
MD,<	ETMOVT,,ETMOVE	;BODY TEXT MODE
	PERRET,,PERRET	;BODY TEXT ALTER MODE
	EMOVET,,EDINS2	;EDIT MODE (MAKE IT SAME AS <BETA>I)
	PERRET,,PERRET	;EDIT INSERT MODE
	ETMOVT,,ETMOVE	;EDIT TEXT MODE
	PERRET,,EPMOVE	;EDIT PIN MODE
	PERRET,,PERRET	;EDIT GET MODE
	PERRET,,PERRET	;EDIT ALTER MODE
>;MD
REPEAT NUMODES-(STRTMV-.),<PERRET,,PERRET>

DOMOVE:	TRZ TFLG
DOMOVG:	MOVEM TT,MDISP
	TRO INMOV
	TRNN TFLG		;DON'T MOVE CURSOR IN GRAB MODE
	PUSHJ P,SETPOS
	MOVEI T,BIGPG
	JRST HYDPOG
;MOVE POINT
MPC,<
DOPMOV:	MOVE A,CLOSES		;CALLED FROM $B TO MOVE MIDPOINT
	TRZ MD,<LMOVE!>TMOVE!TFLG!INMOV
	JRST PMOVE1
>;MPC

PMOVE:	PUSHJ P,GETCLS
	JRST PERRET
PMOVE1:	MOVE T,1(A)
	HLRZ TT,(A)
	HRRZ TT,1(TT)
	MOVE TT,1(TT)
	TLNE TT,MPC,<CPIN!>ISPIN
	JRST [	TRNN TFLG	;IF NOT GRAB MODE,
		JRST SETPOS	;JUST MOVE CURSOR
		POPJ P,]	;ELSE DO NOTHING
	JSP TT,DOMOVG
;MOVE SUBR
	MOVE A,CLOSES		;GET POINT POINTER
	MOVE T,CURSE		;GET CURSOR POSITION
	CAMN T,1(A)
	POPJ P,
ROUTE,<MPC,<TLZ M,%ROUTE>>;MAKE HIM ROUTE AGAIN
MPC,<	MOVEM T,1(A)	;NEW X,Y
	HLRZ A,(A)
	HLRZ B,(A)	;GET FEED THROUGH POINTER(IF ANY)
	HRRZ A,1(A)
	MOVE A,1(A)
	TLNE A,FEEDTH
	MOVEM T,1(B)	;STORE ALSO IN FEEDTHROUGH
	TRO MCHG
	POPJ P,
>;MPC
MD,<	TRO MCHG
PMOVIT:	HLRZ TT,(A)
	HRRZ TT,1(TT)
	MOVE TT,1(TT)
	TLNE TT,ISPIN	;BODY PIN?
	POPJ P,		;YES, DOESN'T MOVE
PMOVRL:	MOVE TT,T	;HOLD X,Y
	XOR T,1(A)	;COMPARE WITH OLD X,Y
	JUMPE T,CPOPJ	;LEAVE IF NO CHANGE AT ALL
	MOVEM TT,1(A)	;STORE NEW X,Y
	TRNE T,-1	;DID Y CHANGE?
	PUSHJ P,PMOVY	;YES
	TLNE T,-1	;DID X CHANGE?
	PUSHJ P,PMOVX	;YES
;HERE WE CHECK TO SEE IF A SEGMENT LEAVING THIS POINT NEEDS
;TO CHANGE SENSE (HORZ TO VERT OR VERT TO HORZ).
	MOVEI F,3		;4 CASES (F IS TABLE INDEX)
	PUSH P,A		;SAVE OUR POINT
	HLRZ A,(A)
	HLRZ A,1(A)		;POINT TO PIN'S NEIGHBOR BLOCK
HVFLP1:	XCT SEGTAB(F)		;GET THE POINTER FOR SEGMENT WE WANT TO CHECK
	JUMPE T,HVFLP2		;SKIP IT IF NONE
	HLRZ TT,(T)
	HRRZ TT,1(TT)
	MOVE TT,1(TT)
	TLNN TT,ISPIN		;PINS ONLY
	JRST HVFLP2
	MOVE TT,1(T)		;GET IT'S X,Y
	MOVE TTT,(P)
	MOVE TTT,1(TTT)		;GET ORIGINAL POINT'S X,Y
	ADJUST(SUB,TT,TTT)	;GET DELTAS
	PUSH P,TT		;SAVE THEM
	HLRE TTT,TT		;SEPERATE X AND Y
	HRRE TT,TT
	MOVM TTT,TTT		;GET MAGNITUDES ONLY
	MOVM TT,TT
	XCT HVMAG(F)		;SEE IF PAST DIAGONAL
	JRST HVFLP3		;NO
	POP P,TT		;GET BACK SIGNED DELTAS
	TRNE F,1		;DO WE WANT X OR Y DELTA
	MOVS TT,TT		;WE WANT Y DELTA
	SETCM TTT,F		;COMPLEMENT LOW ORDER BIT (CHANGE HORZ TO VERT)
	ANDI TTT,1		;ASSUME POSITIVE
	JUMPGE TT,.+2
	TRO TTT,2		;WELL IT WAS NEGATIVE
	PUSH P,T		;SAVE THIS POINT ALSO
	HLRZ T,(T)
	HLRZ T,1(T)		;POINT TO IT'S NEIGHBOR BLOCK
	XCT HVNEWT(TTT)		;GET POINTER WE WANT TO USE
	JUMPN TT,HVFLP3		;SKIP IF ALREADY IN USE
	XCT HVNEWA(TTT)		;CHECK BOTH ENDS
	JUMPN TT,HVFLP3		;MUST BOTH BE FREE
	MOVE TT,-1(P)		;GET ORIGINAL POINT
	XCT HVSTOT(TTT)		;STORE IT IN NEW POSITION
	MOVE TT,(P)		;GET OTHER POINT
	XCT HVSTOA(TTT)		;STORE IT ALSO
	XCT HVCLRA(F)		;CLEAR OLD POINTER
	XCT HVCLRT(F)		;AT BOTH ENDS
HVFLP3:	POP P,(P)		;FIX STACK
HVFLP2:	SOJGE F,HVFLP1
	POP P,A			;FIX STACK
	POPJ P,

	DEFINE FOO $ (HINST,LOCHW,XY,YX)
<	TRO NEEDCL	;MOVING, MAY NEED NEW CLOSEST
	HLRZ F,(A)	;GET DATA BLOCK POINTER
	HLRZ F,1(F)	;GET _^ BLOCK POINTER
	PUSH P,A	;SAVE A
	PUSH P,T	;SAVE T
	HRRZ A,XY(F)	;GET A _ OR ^
	MOVE T,TT	;GET NEW Y OR X
	HINST T,1(A)	;GET OLD X OR Y (HLL OR HRR)
	PUSH P,TT	;SAVE TT
	JUMPE A,.+2
	PUSHJ P,PMOVIT	;MOVE THE POINT & FRIENDS
	MOVE T,(P)	;GET NEW Y OR X
	MOVE A,-2(P)	;GET A
	HLRZ F,(A)	;GET DATA BLOCK POINTER
	HLRZ F,1(F)	;GET _^ BLOCK POINTER
	HLRZ A,XY(F)	;GET A _ OR ^
	HINST T,1(A)	;GET OLD X OR Y (HLL OR HRR)
	JUMPE A,.+2
	PUSHJ P,PMOVIT	;MOVE THE POINT & FRIENDS
MOV$LOCHW$0:
	MOVE A,-2(P)
	H$LOCHW$RE T,1(A)	;THIS X OR Y
	HLRZ A,(A)
	HLRZ A,1(A)		;^_
	HRRZ F,YX(A)		;^ OR 
	JUMPE F,MOV$LOCHW$1
	H$LOCHW$RE TT,1(F)
	CAMG T,TT
	JRST MOV$LOCHW$1
	HLRZ F,(F)
	HLRZ F,1(F)
	MOVSS TT,YX(A)
	MOVSS TTT,YX(F)
	HLRM TTT,YX(A)
	HRLM TT,YX(F)
	TRNN TT,-1
	JRST .+4
	HLRZ F,(TT)
	HLRZ F,1(F)
	HLRM TT,YX(F)
	MOVSS TTT,TTT
	TRNN TTT,-1
	JRST MOV$LOCHW$0
	HLRZ F,(TTT)
	HLRZ F,1(F)
	HLLM TTT,YX(F)
	JRST MOV$LOCHW$0
MOV$LOCHW$1:
	HLRZ F,YX(A)
	JUMPE F,MOV$LOCHW$2
	H$LOCHW$RE TT,1(F)
	CAML T,TT
	JRST MOV$LOCHW$2
	HLRZ F,(F)
	HLRZ F,1(F)
	MOVSS TT,YX(F)
	MOVSS TTT,YX(A)
	HLRM TTT,YX(F)
	HRLM TT,YX(A)
	TRNN TT,-1
	JRST .+4
	HLRZ F,(TT)
	HLRZ F,1(F)
	HLRM TT,YX(F)
	MOVS TTT,TTT
	TRNN TTT,-1
	JRST MOV$LOCHW$0
	HLRZ F,(TTT)
	HLRZ F,1(F)
	HLLM TTT,YX(F)
	JRST MOV$LOCHW$0

MOV$LOCHW$2:
	POP P,TT
	POP P,T
	POP P,A
	POPJ P,
>

PMOVY:	FOO (HLL,R,1,0)
PMOVX:	FOO (HRR,L,0,1)

SEGTAB:	HRRZ T,(A)
	HRRZ T,1(A)
	HLRZ T,(A)
	HLRZ T,1(A)

HVMAG:	CAMG TTT,TT
	CAMG TT,TTT
	CAMG TTT,TT
	CAMG TT,TTT

HVNEWT:	HLRZ TT,(T)
	HLRZ TT,1(T)
	HRRZ TT,(T)
	HRRZ TT,1(T)

HVNEWA:	HRRZ TT,(A)
	HRRZ TT,1(A)
	HLRZ TT,(A)
	HLRZ TT,1(A)

HVSTOT:	HRLM TT,(T)
	HRLM TT,1(T)
	HRRM TT,(T)
	HRRM TT,1(T)

HVSTOA:	HRRM TT,(A)
	HRRM TT,1(A)
	HRLM TT,(A)
	HRLM TT,1(A)

HVCLRT:	HRRZS (T)
	HRRZS 1(T)
	HLLZS (T)
	HLLZS 1(T)

HVCLRA:	HLLZS (A)
	HLLZS 1(A)
	HRRZS (A)
	HRRZS 1(A)
>;MD
;MOVE TEXT OFFSET, CPIN OFFSET
MD,<
PMOVEL:	TRNE INMOV
	JRST PERRET
	TRO LMOVE		;MOVE CPIN OFFSET
	TRZ TMOVE
>;MD
PMOVET:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,1(A)
	HLRZ A,(A)
	HRRZ A,1(A)
MD,<	TRNN LMOVE
	JRST PMOVT1
	MOVE TT,1(A)
	TLNN TT,CPIN
	JRST PERRET
	TLZ TT,FIXCON		;TURN OFF FIXCON WHEN HE MOVES IT
	MOVEM TT,1(A)		;AND STORE BACK
	HRRZ A,(A)
	JRST PMOVL1

PMOVT1:	MOVSI TT,FIXTXT!FIXRHT	;TURN THESE OFF WHEN HE MOVES TEXT OFFSET
	ANDCAM TT,1(A)
	HLRZ A,(A)
	JUMPE A,PERRET
PMOVL1:	PUSHJ P,TOFSET
>;MD
MPC,<	HLRZ A,(A)	;TEXT POINTER
	JUMPE A,PERRET
	ADJUST(ADD,T,<1(A)>)
>;MPC
	JSP TT,DOMOVE
	MOVE A,CLOSES
	MOVE TT,1(A)
	HLRZ A,(A)
	HRRZ A,1(A)
MD,<	TRNE LMOVE
	JRST [	HRRZ A,(A)	;USE CPIN POINTER IF LMOVE
		JRST TOFMOV]
	HLRZ A,(A)
	PUSHJ P,TOFMOV
	CAMN T,1(A)
	POPJ P,
	MOVE A,CLOSES
	JRST OFFCON		;FIX CON (NOT IF NO MOVE)
>;MD
MPC,<	HLRZ A,(A)	>

TOFMOV:	MOVE T,CURSE
	TLO T,1
	SUB T,TT
	TLZ T,1
MD,<	HLRE TT,T
	HRRE T,T
	SCALE T
	SCALE TT
	HRL T,TT
>;MD
	CAMN T,1(A)
	POPJ P,
	EXCH T,1(A)
	TRO MCHG
	POPJ P,

MD,<
TOFSET:	HLRE TT,1(A)	;CONSTANT OFFSET
	UNSCAL TT
	MOVE TTT,TT
	HRRE TT,1(A)
	UNSCAL TT
	HRL TT,TTT	;UNSCALED OFFSET
	TLZ TT,1
	ADD T,TT	;CURSOR POS
	TDZ T,[1,,1]
	POPJ P,
>;MD
;MOVE BODY AND BODY LOC
BMOVE:	PUSHJ P,GETCLS
	JRST PERRET
BMOVEP:	MOVE T,1(A)
	JSP TT,DOMOVG
;MOVE SUBR
	MOVE A,CLOSES	;GET POINTER TO CLOSEST BODY
	MOVE T,CURSE	;GET CURRENT CURSOR POSITION
	CAMN T,1(A)
	POPJ P,
ROUTE,<MPC,<TLZ M,%ROUTE>>;MAKE HIM ROUTE AGAIN
	MOVEM T,1(A)	;SET BODY POS
	TRO MCHG
	JRST BODFIX	;AND FIX PINS

MD,<
BMOVEL:	TRNN INMOV
	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,1(A)
	HLRZ TT,(A)
	HLRZ TT,1(TT)
	MOVSI TTT,FIXLOC
	ANDCAM TTT,1(TT)		;TURN OFF AUTO POSITION BIT
	HRRZ TT,(TT)
	JUMPE TT,PERRET
	ADJUST(ADD,T,<1(TT)>)
	PUSH P,T
	MOVE T,A
	PUSHJ P,OFFBLO		;IN CASE CHANGED FIXLOC
	POP P,T
	TLNE M,BLOCS
	TRO MCHG		;REDISPLAY IN CASE WE TURNED THIS LOC ON
	TRO LMOVE
	TRZ TMOVE
	JSP TT,DOMOVE
;MOVE SUBR
	MOVE A,CLOSES
	MOVE T,CURSE
	ADJUST(SUB,T,<1(A)>)	;CALC OFFSET FROM BODY
	HLRZ A,(A)
	HLRZ A,1(A)
	HRRZ A,(A)
	CAMN T,1(A)
	POPJ P,
	MOVEM T,1(A)		;STO IN LOC BLOCK
	TRO MCHG
	POPJ P,

BMOVET:	TRNN INMOV
	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,1(A)
	HLRZ A,(A)
	HLRZ A,1(A)
	MOVSI TT,FIXBLO
	ANDCAM TT,1(A)
	HRRZ A,(A)
	JUMPE A,PERRET
	ADJUST(ADD,T,<1(A)>)
	TLNE M,BLOCS
	TRO MCHG
	TRZ LMOVE
	TRO TMOVE
	HLRZ A,(A)
	PUSHJ P,TOFSET
	JSP TT,DOMOVE
;MOVE SUBR
	MOVE A,CLOSES
	MOVE TT,1(A)
	HLRZ A,(A)
	HLRZ A,1(A)
	HRRZ A,(A)
	ADJUST(ADD,TT,<1(A)>)
	HLRZ A,(A)
	JRST TOFMOV
>;MD
;EDIT MOVES
MD,<
EPMOVE:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,1(A)
	JSP TT,DOMOVG
;MOVE SUBR
	MOVE A,CLOSES	;GET POINTER TO CLOSEST PIN
	MOVE T,CURSE	;GET CURRENT CURSOR POSITION
	CAMN T,1(A)
	POPJ P,
	MOVEM T,1(A)
	TRO MCHG
	SKIPN A,PONPNT
	POPJ P,
EDPFIX:	HLRZ C,(A)	;POINTER TO DATA BLOCK
	HRRZ D,1(C)	;POINTER TO TEXT AND BODY POINTER
	HRRZ B,(D)	;POINTER TO PIN DSCR IN TYPE
	CAME B,CLOSES	;IS THIS ONE OF OUR PINS
	JRST NOFIX	;NO
	HLRZ E,(C)	;POINTER TO BODY
	MOVE T,1(B)	;GET PIN X,Y
	HLRZ F,(E)	;DATA BLOCK POINTER OF BODY
	HLRZ F,(F)	;ORIENTATION
	PUSHJ P,ORIENT	;ORIENT IT
	ADJUST(ADD,T,<1(E)>)
	PUSHJ P,PMOVRL	;AND MOVE IT
NOFIX:	HRRZ A,(A)
	JUMPN A,EDPFIX	;NEXT
	POPJ P,

ETMOVE:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,1(A)
	MOVE TT,MODE
	CAIE TT,BTXTM
	JRST NBTXT0
	MOVE TT,BTBODY
	PUSH P,F
	HLRZ F,(TT)
	HLRZ F,(F)
	PUSHJ P,ORIENT
	POP P,F
	ADJUST(ADD,T,<1(TT)>)
NBTXT0:	JSP TT,DOMOVG
;MOVE SUBR
	MOVE A,CLOSES	;GET POINTER TO CLOSEST TEXT
	MOVE T,CURSE	;GET CURSOR POSITION
	MOVE TT,MODE
	CAIE TT,BTXTM	;BODY TEXT MODE?
	JRST NBTXT1
	MOVE TT,BTBODY
	ADJUST(SUB,T,<1(TT)>)
	PUSH P,F
	HLRZ F,(TT)
	HLRZ F,(F)
	MOVE F,UNROT(F)
	PUSHJ P,ORIENT
	POP P,F
NBTXT1:	MOVE TT,1(A)
	TDZ TT,[1,,1]
	TDZ T,[1,,1]
	CAMN T,TT
	POPJ P,
	XOR TT,1(A)	;GET STATE OF AUTO OFFSET BIT AND MARK BIT
	IOR T,TT	;AND MOVE TO NEW X,Y
	MOVEM T,1(A)	;DEPOSIT AS NEW X,Y OF TEXT
	TRO MCHG
	POPJ P,

ETMOVT:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,1(A)
	TRZ T,1
	MOVEM T,1(A)		;CLEAR AUTO OFFSET BIT
	TLZ T,1			;AND MARK BIT
	MOVE TT,MODE
	CAIE TT,BTXTM
	JRST NBTXT2
	MOVE TT,BTBODY
	PUSH P,F
	HLRZ F,(TT)
	HLRZ F,(F)
	PUSHJ P,ORIENT
	POP P,F
	ADJUST(ADD,T,<1(TT)>)
NBTXT2:	HLRZ A,(A)
	PUSHJ P,TOFSET
	JSP TT,DOMOVE
;MOVE SUBR
	MOVE A,CLOSES
	MOVE TT,1(A)
	TDZ TT,[1,,1]
	HLRZ A,(A)
	MOVE T,MODE
	CAIE T,BTXTM
	JRST TOFMOV
	MOVE TTT,BTBODY
	MOVE T,TT
	PUSH P,F
	HLRZ F,(TTT)
	HLRZ F,(F)
	PUSHJ P,ORIENT
	POP P,F
	ADJUST(ADD,T,<1(TTT)>)
	MOVE TT,T
	JRST TOFMOV

EMOVEL:	TRNE INMOV
	JRST PERRET
	MOVE A,CURBOD
	HLRZ A,1(A)
	HLRZ A,(A)
	MOVE T,1(A)		;DEFAULT OFFSET
	TRO LMOVE
	TRZ TMOVE
;MOVE SUBR
	JSP TT,DOMOVE
	MOVE A,CURBOD
	HLRZ A,1(A)
	HLRZ A,(A)
	MOVE T,CURSE
	CAMN T,1(A)
	POPJ P,
	MOVEM T,1(A)	;NEW DEF OFFSET
	TRO MCHG
	JRST UPLOFF		;UPDATE OFFSET FOR ALL INSTANCES WITH FIXLOC ON

EMOVET:	TRNE INMOV
	JRST PERRET
	MOVE A,CURBOD
	HLRZ A,1(A)
	HLRZ TT,(A)
	HRRZ A,(TT)
	JUMPN A,EMOVT1
	GETFS(A)
	HRRM A,(TT)
	SETZM (A)
	SETZM 1(A)
EMOVT1:	MOVE T,1(TT)
	PUSHJ P,TOFSET
	JSP TT,DOMOVE
;MOVE SUBR
	MOVE A,CURBOD
	HLRZ A,1(A)
	HLRZ A,(A)
	MOVE TT,1(A)
	HRRZ A,(A)
	PUSHJ P,TOFMOV
	CAMN T,1(A)
	POPJ P,
	JRST UPLOFF
>;MD
;MOVE SET
DOSMOV:	MOVE A,CLOSES
	TRZ MD,<LMOVE!>TMOVE!TFLG!INMOV
	JRST SMOVE1

SMOVE:	TRNN STBOX		;ARE WE MOVING ALREADY OR DRAWING A BOX
	PUSHJ P,GETCLS		;CURRENT SET
	JRST PERRET		;NONE
SMOVE1:	MOVE T,1(A)		;LOC OF CENTER
	JSP TT,DOMOVG
;MOVE SUBR
	MOVE A,CLOSES			;CURRENT SET
ROUTE,<MPC,<TLZ M,%ROUTE>>		;MAKE HIM ROUTE AGAIN
	MOVE T,CURSE			;CURRENT CURSOR POSITION
	ADJUST(SUB,T,<1(A)>)		;GET DIFFERENCE
	JUMPE T,CPOPJ			;RETURN IF HE DIDN'T MOVE
	MOVE TT,CURSE
	MOVEM TT,1(A)			;NEW SET LOC.
	HLRZ A,(A)			;POINT TO FIRSTSET MEMBERS
	JUMPE A,CPOPJ
	TRO MCHG			;PIC WILL CHANGE
MMSET1:	HRRZ B,1(A)			;POINT
	JUMPE B,NOPNTM			;NO POINT HERE
	MOVE TT,T
	ADJUST(ADD,TT,<1(B)>)		;NEW LOC
	MOVEM TT,1(B)			;SAVE
NOPNTM:	HLRZ B,1(A)			;BODY
	JUMPE B,NOBODM			;NO BODY HERE
	MOVE TT,T
	ADJUST(ADD,TT,<1(B)>)		;NEW LOC
	MOVEM TT,1(B)			;SAVE
	PUSH P,A
	MOVE A,B
	PUSH P,T
	PUSHJ P,BODFIX
	POP P,T
	POP P,A
NOBODM:	HRRZ A,(A)			;NEXT MEMBERS
	JUMPN A,MMSET1
MPC,<	MOVE A,CLOSES			;FIX FEED THROUGHS
	JRST FEDFIX
>;MPC
MD,<	MOVE G,CLOSES
	HLRZ G,(G)
FIXPNT:	HRRZ A,1(G)			;GET A POINT POINTER
	JUMPE A,FXNOPT			;NO POINT HERE
	MOVE TT,1(A)			;X,Y
	PUSHJ P,PMOVY			;MOVE VERTICAL ONES
	PUSHJ P,PMOVX			;MOVE HORIZONTAL ONES
FXNOPT:	HLRZ A,1(G)
	JUMPE A,FXNPNS			;NO BODY
	JRST FIXPN1

FIXPIN:	PUSH P,A
	MOVE TT,1(A)
	PUSHJ P,PMOVX
	PUSHJ P,PMOVY
	POP P,A
FIXPN1:	HLRZ A,(A)
	HRRZ A,(A)		;NEXT PIN OF BODY
	JUMPN A,FIXPIN
FXNPNS:	HRRZ G,(G)			;NEXT SET MEMBERS
	JUMPN G,FIXPNT			;AND LOOP
	POPJ P,
>;MD
;MICRO MOVEMENT COMMANDS
MD,<
LOCTM:	MOVEI T,1
	LSH T,@MODE
	TDNN T,[1TXTM!1PNTM!1EDTTM!1BTXTM]
	JRST PERRET
	TDNN T,[1EDTTM!1BTXTM]
	JRST LOCTM1
	PUSHJ P,GETCLS
	JRST PERRET
	MOVEI T,1
	ANDCAM T,1(A)
	HLRZ B,(A)
	TRO TMOVE		;MOVE T OFFSET
	JRST LOCMTY

LOCTM1:	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ B,(A)
	HRRZ B,1(B)
	MOVSI TTT,FIXTXT!FIXRHT
	ANDCAM TTT,1(B)		;TURN THESE OFF HERE
	HLRZ B,(B)
	JUMPE B,PERRET
	TRO TMOVE
	JRST LOCMTY

BLCLM:	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ A,(A)
	HLRZ A,1(A)
	HRRZ B,(A)
	JUMPE B,PERRET
	MOVSI T,FIXBLO
	ANDCAM T,1(A)
	HLRZ B,(B)
	JRST LOCMTY

ELCLM:	MOVE A,CURBOD
	HLRZ A,1(A)
	HLRZ A,(A)
	HRRZ B,(A)
	TRZ TMOVE
	JUMPN B,LOCMTY
	GETFS(B)
	HRRM B,(A)
	SETZM (B)
	SETZM 1(B)
	JRST LOCMTY

LOCLM:	MOVEI T,1
	LSH T,@MODE
	TDNE T,[1EDTM]
	JRST ELCLM
	TDNE T,[1BODM]
	JRST BLCLM
	TDNN T,[1TXTM!1PNTM]
	JRST PERRET
	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ B,(A)
	HRRZ B,1(B)
	MOVE TTT,1(B)
	TLNN TTT,CPIN
	JRST PERRET
	TLZ TTT,FIXCON
	MOVEM TTT,1(B)
	HRRZ B,(B)		;DO IT
	TRZ TMOVE
LOCMTY:	TRZ INLIN
	TLNN M,DSKACT!MACACT
	OUTSTR[ASCIZ/USE CURSOR MOVE COMMANDS TO MOVE OFFSET.
/]
	TRO INMOV			;TURN ON MOVING SO BIG LETTERS GO AWAY
LOCM:	PUSHJ P,GETCHR
	LDB D,[POINT 2,C,28]
	ANDI C,177
	MOVSI TTT,-MICLEN
LOCM1:	CAME C,MICCHR(TTT)
	AOBJN TTT,.-1
	SETZB T,TT
	XCT MICTAB(TTT)
	ASH T,(D)		;SHIFT BY BITS BEING HELD DOWN
	ASH TT,(D)
	HRRE TTT,1(B)
	ADD TT,TTT
	HLRE TTT,1(B)
	ADD T,TTT
	HRL TT,T
	CAMN TT,1(B)
	JRST LOCM
	MOVEM TT,1(B)		;STO Y
	TRO MCHG		;CHANGES PIC
	JRST LOCM

LOCMDN:	TRZ INMOV		;DONE, TURN OFF MOVING
	POPJ P,			;AND LEAVE

NOSKEY,<
MICCHR:	")"			;RIGHT SMALL
	"("			;LEFT SMALL
	"/"			;UP SMALL
	"\"			;DOWN SMALL
	"]"			;RIGHT BIG
	"["			;LEFT BIG
	""			;UP BIG
	""			;DOWN BIG
	12			;NOOP
	ALTMOD			;LEAVE
	40			;LEAVE
MICLEN__.-MICCHR
>;NOSKEY
SKEY,<
MICCHR:	"9"	;RS
	"8"	;LS
	"6"	;US
	"7"	;DS
	")"	;RB
	"("	;LB
	"&"	;UB
	"'"	;DB
	12		;NOOP
	ALTMOD		;LEAVE
	40		;LEAVE
MICLEN__.-MICCHR
>;SKEY
MICTAB:	MOVEI T,1		;RS
	MOVNI T,1		;LS
	MOVEI TT,1		;US
	MOVNI TT,1		;DS
	MOVEI T,20		;RB
	MOVNI T,20		;LB
	MOVEI TT,20		;UB
	MOVNI TT,20		;DB
	JRST LOCM		;NOOP
	JRST LOCMDN		;LEAVE
	JRST LOCMDN		;LEAVE
	JRST MICERR		;UNKNOWN COMMAND

MICERR:	PUSHJ P,PERRET
	JRST LOCM
>;MD
;MOVE ALONG LINES
LINUP:	MOVEI TTT,2
	JRST DOMLIN

LINDWN:	MOVEI TTT,3
	JRST DOMLIN

LINRT:	TDZA TTT,TTT
LINLFT:	MOVEI TTT,1
DOMLIN:	TRNE INMOV
	JRST [	SKIPN A,CLOSES
		JRST PERRET
		JRST LINMOV]
	PUSHJ P,GETCLS
	JRST PERRET
LINMOV:
MD,<	HLRZ B,(A)
	HLRZ B,1(B)
	XCT PERTAB(TTT)
	JUMPN H,LINMV4		;PERFECT MATCH?
	XCT LASTAB(TTT)
	JUMPE H,PERRET		;ANY SECONDARY CHOICE?
	TLNN H,-1
	JRST LINMV4
	MOVS H,H
	TLNE H,-1
	JRST PERRET
>;MD
MPC,<
	SETZB H,G		;NO CHOICE YET, MAX SLOPE =0 SO FAR
	SETZ F,			;ALSO LAST DITCH CHOICE
	HLRZ B,(A)
	HLRZ B,1(B)
	JUMPE B,PERRET		;LOSE IF NO NEIGHBORS
LINMV1:	MOVEI C,2
LINMV2:	XCT (C)[HLRZ D,(B)
		HRRZ D,1(B)
		HLRZ D,1(B)]
	JUMPE D,LINMV3
	MOVE T,1(D)
	ADJUST(SUB,T,<1(A)>)
	HRRE TT,T		;Y TO TT
	HLRE T,T		;X TO T
	XCT LASTAB(TTT)		;IS IT A SECONDARY CHOICE??
	XCT SIDTAB(TTT)		;IS IT EVEN A CHOICE?
	XCT PERTAB(TTT)		;IS IT A PERFECT LINE?
	TRNE TTT,2		;IF VERT
	EXCH T,TT		;INTERCHANGE X AND Y
	IDIV T,TT		;X/Y (OR Y/X FOR VERT)
	MOVM T,T
	CAMG T,G		;BIGGER?
	JRST LINMV3		;NO
	MOVE H,D
	MOVE G,T
LINMV3:	SOJGE C,LINMV2
	HRRZ B,(B)
	JUMPN B,LINMV1
	JUMPN H,LINMV4		;ERROR IF NO GOOD ONE FOUND
	JUMPLE F,PERRET		;IF NONE, OR TOO MANY, LOSE
	MOVE H,F
	JRST LINMV4

LINMV6:	JUMPE F,.+2
	HRRO D,D		;FLAG TOO MANY
	MOVE F,D
	JRST LINMV3

LINMV5:	MOVE H,D
>;MPC
LINMV4:	HLRZ T,(H)
	HRRZ T,1(T)
	MOVE T,1(T)
	TRNN MD,<LMOVE!>TMOVE	;IF WERE MOVING OFFSETS
	TLNE T,MPC,<CPIN!>ISPIN	;OR THIS PIN
	TRZN INMOV		;STOP MOVING
	CAIA
	TRO NEEDCL
	MOVE T,H
	JRST SCLOSP

MD,<
PERTAB:	HRRZ H,1(B)		;R
	HLRZ H,1(B)		;L
	HRRZ H,(B)		;U
	HLRZ H,(B)		;D

LASTAB:	MOVE H,(B)		;UD
	MOVE H,(B)		;UD
	MOVE H,1(B)		;LR
	MOVE H,1(B)		;LR
>;MD

MPC,<
LASTAB:	JUMPE T,LINMV6		;R
	JUMPE T,LINMV6		;L
	JUMPE TT,LINMV6		;U
	JUMPE TT,LINMV6		;D

SIDTAB:	JUMPLE T,LINMV3		;R	NEG X IS WRONG
	JUMPGE T,LINMV3		;L	POS X IS WRONG
	JUMPLE TT,LINMV3	;U	NEG Y IS WRONG
	JUMPGE TT,LINMV3	;D	POS Y IS WRONG

PERTAB:	JUMPE TT,LINMV5		;R
	JUMPE TT,LINMV5		;L
	JUMPE T,LINMV5		;U
	JUMPE T,LINMV5		;D
>;MPC
       