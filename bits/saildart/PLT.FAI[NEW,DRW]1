;<DRAW>PLT.FAI.47, 15-NOV-75 18:07:25, EDIT BY HELLIWELL
VERSION(PLT,6)
;SETUP

MPC,<
SIGPLT:	SETZM FILNAM
	TLO WFLAG
	JRST SIGPL1
>;MPC

EWPLOT:	MOVSI T,EXTPLT
	PUSHJ P,SETLST		;WILL SKIP IF THERE IS SAVED NAME
	JRST PLOT
NOSTAN,<
MPC,<	MOVE T,[POINT 6,FILNAM]
EWPLT1:	ILDB TT,T
	JUMPE TT,EWPLT2
	TLNE T,770000
	JRST EWPLT1
EWPLT2:	TLNN SID,FRONT
	SKIPA TT,['S']		;BACK IS SOLDER
	MOVEI TT,'C'		;FRONT IS COMPONENT
	DPB TT,T
>;MPC
>;NOSTAN
	CAIA
PLOT:	SETZM FILNAM
MPC,<	TLZ WFLAG		;CLEAR FLAG FOR SIG FILES
SIGPL1:	SETZM CPLANE
	TRNN M,FLIP		;DO WE WARN HIM?
	JUMPL SID,PLPLT1
	TRNE M,FLIP
	JUMPGE SID,PLPLT1
	OUTSTR[ASCIZ/TEXT IS INVALID UNLESS YOU PLOT THIS FLIPPED!
/]
	CAIA
PLPLOT:	SETZM FILNAM		;FLAG NEED TO ASK FILENAME
PLPLT1:	>;MPC
MD,<	MOVEI T,10
	MOVEM T,CSCALE
	SETOM CBOX		;NO DEFAULT BOX SIZE
	CAIA
DPLOT:	SETZM FILNAM
	MOVE T,CSCALE
	IMUL T,CMUL+STDBIG
STAN,<
IFE STDBIG-1,<
	PUSH P,T
>
>;STAN
	IMULI T,CWIDTH
	MOVEM T,LSCALX
STAN,<
IFE STDBIG-1,<
	POP P,T
	IMULI T,CWIDTH+1
	MOVEM T,LSCLX1
>
>;STAN
	MOVE T,CSCALE
	IMULI T,CHGHT
	IMUL T,CMUL+STDBIG
	ASH T,-1
	MOVEM T,LSCALY
>;MD
	SKIPE FILNAM		;ALREADY GOT NAME?
	JRST GOTPNM
	TLNN M,DSKACT!MACACT
	OUTSTR [ASCIZ /PLOT /]
	MOVSI T,EXTPLT
MPC,<	TLNE WFLAG
	MOVSI T,EXTSIG
>;MPC
	PUSHJ P,SETNAM
	POPJ P,
GOTPNM:	ENTPPN
	INIT DAT,10
	SIXBIT /DSK/
	XWD IOHD,0
	JRST [	OUTSTR[ASCIZ/WHERE'S THE DISK!
/]
		POPJ P,]
	PUSHJ P,EXIST	;SEE IF IT ALREADY EXISTS
	POPJ P,		;DON'T OVERWRITE
	OUTSTR[ASCIZ/WRITING /]
	MOVEI A,FILNAM
	JSR FPRINT
	ENTER DAT,FILNAM
	JRST [	OUTSTR [ASCIZ/, ENTER FAILED.
/]
		POPJ P,]
	OUTSTR[ASCIZ/
/]
	MOVEI A,IOBUF
	EXCH A,.JBFF
	OUTBUF DAT,2
	MOVEM A,.JBFF
MPC,<	SETZM MXPADN	>
MD,<	MOVEI TTT,PLTVER	;PUT OUT PLOT VERSION #	>
MPC,<	MOVEI TTT,PCPVER	;PUT OUT PLOT VERSION #	>
	PUSHJ P,PUTWRD
;PUT OUT BODYS
MD,<	MOVE B,DBODPN
	JUMPE B,NOBOSS
PBLP:	HLRZ C,(B)	;GET POINTER TO DATA BLOCK
	TLNN M,BLOCS	;SHALL WE DO DIP NUMBER?
	JRST NOLOC
	HLRZ D,1(C)	;DIP NUMBER BLOCK
	HLRZ T,1(D)	;BODY BITS
	TRNN T,FIXLOC	;IS IT TRACKING DEF?
	JRST DISLC2	;NO, NO CHECK
	HRRZ T,1(C)	;BODY DEF POINTER
	HLRZ T,1(T)
	HLRZ T,(T)
	HLRZ T,(T)	;BODY DEF BITS
	TRNE T,XDISLOC	;SHOULD WE DISPLAY LOC?
	JRST NOLOC	;NO
DISLC2:	HRRZ D,(D)
	JUMPE D,NOLOC	;SKIP IF NO LOC BLOCK
	MOVE T,1(B)	;LOC OF BODY
	ADJUST(ADD,T,<1(D)>)	;OFFSET FOR NLNLN
	HLRZ TTT,(D)
	PUSHJ P,TXTCAL
	PUSHJ P,PUTWRD
	HLRZ D,(D)
	PUSHJ P,STDSIZ	;SMALLEST SIZE
	PUSHJ P,PLTBNM	;PLOT DIP NUMBER
NOLOC:	HRRZ D,1(C)	;GET POINTER TO TYPE
	HLRZ F,(C)	;GET ORIENTATION
	HLRZ E,1(D)	;GET POINTER TO TYPE DATA BLOCK
	HRRZ A,1(E)	;GET POINTER TO TYPE LINES
	JUMPE A,NOLINS	;NONE?
PLOPP1:	MOVE T,1(A)	;GET X,Y OF LINE
	TRZE T,1	;VIS OR INVIS?
	JRST [PUSHJ P,PINVS  ;INVISIBLE
		JRST .+2]
	PUSHJ P,PVIS	;VISIBLE
	HRRZ A,(A)	;GO TO NEXT LINE
	JUMPN A,PLOPP1
NOLINS:	TRNE M,NBTEXT
	JRST NOTINS
	HLRZ A,(B)
	HLRZ A,1(A)
	HRRZ A,1(A)
	JUMPE A,PBTLP0
PBTLP1:	HLRZ T,(A)
	JUMPN T,PBTLP2
	PUSH P,A
	HRRZ A,1(A)
	PUSHJ P,PBTLPX
	POP P,A
	JRST PBTLP3

PBTLP2:	PUSHJ P,PBTLPX
PBTLP3:	HRRZ A,(A)
	JUMPN A,PBTLP1
	JRST NOTINS

PBTLP0:	HLRZ A,1(E)	;GET POINTER TO TEXT
	JUMPE A,NOTINS	;NONE?
PBTLP:	PUSHJ P,PBTLPX
	HRRZ A,(A)	;GET NEXT TEXT
	JUMPN A,PBTLP
NOTINS:	HRRZ B,(B)	;GET NEXT BODY
	JUMPN B,PBLP	;LOOP
	JRST NOBOSS

PBTLPX:	HLRZ T,(A)
	HRRZ T,(T)
	HLRZ T,(T)
	TLNN M,%IDENT
	JUMPE T,CPOPJ
	MOVE T,1(A)	;GET X,Y
	TDZ T,[1,,1]
	PUSHJ P,ORIENT	;ORIENT IT
	ADJUST(ADD,T,<1(B)>);ADD BODY CENTER
	HLRZ TTT,(A)	;GET POINTER TO TEXT DATA BLOCK
	JRST PTXTS	;PLOT TEXT (GENERAL FORMAT)
;CALL POINT SUBRS, DO END STUFF
NOBOSS:	MOVE B,PONPNT	;GET ON-SCREEN POINTER
	PUSHJ P,SETBTS	;SET THE BITS UP
	TLNN M,DIAMONDS	;SHALL WE DO THE DIAMONDS?
	JRST NODIAMONDS
	MOVE B,PONPNT
	PUSHJ P,DODIAMONDS
NODIAMONDS:
	SETZM CIRC	;DON'T DO CLOSED LOOPS YET!
>;MD
	SKIPE B,PONPNT	;GET ON-SCREEN POINTER
	PUSHJ P,DOPNTS	;DO THE POINTS
MD,<	SETOM CIRC	;NOW GET THE CLOSED LOOPS
	SKIPE B,PONPNT
	PUSHJ P,DOPNTA
	AOSG TTT,CBOX		;GET BOX ID
	JRST NOTBOX		;NONE
	MOVE TTT,BTAB-1(TTT)	;GET LETTER FOR THIS BOX
	SUBI TTT,"A"-1		;AND NORMALIZE IT SO A=1
	TLZE TTT,400000		;VERT?
	TRO TTT,200000		;YES
	LSH TTT,1		;MAKE SURE LOW ORDER BIT ISN'T ON!
NOTBOX:	HRLI TTT,400001
	PUSHJ P,PUTWRD
FOR I IN(TAUTHOR,TIT1,TIT2)
<	MOVE T,I
	PUSHJ P,PSTR
>
	MOVE TTT,DRWDAT
	PUSHJ P,WORDOUT		;STUFF DATE INTO FILE AFTER AUTHOR TITLE STUFF
	SKIPN TTT,DRWNAM
	MOVE TTT,FILNAM
	PUSHJ P,WORDOUT
	MOVE TTT,DRWEXT
	PUSHJ P,WORDOUT
	MOVE TTT,DRWPPN
	PUSHJ P,WORDOUT
	PUSHJ P,INIPCH
	HLRZ A,CRDLOC
	PUSHJ P,SLTOUT		;MAKE STRING OF SLOT LOCATION
	PUSHJ P,FINPCZ
	MOVE T,TREV
	PUSHJ P,PSTR
	PUSHJ P,INIPCH
	SKIPE T,TMODULE
	PUSHJ P,PCHRS
	SKIPN T,TVARIABLE
	JRST NOPVAR
	PUTBYT "-"
	PUSHJ P,PCHRS
NOPVAR:	SKIPN T,TPREFIX
	JRST NOPFIX
	PUTBYT "-"
	PUSHJ P,PCHRS
NOPFIX:	PUSHJ P,FINPCZ
FOR I IN(TPROJ,TPAGE,TOF,TDCODE,SITE1,SITE2)
<	MOVE T,I
	PUSHJ P,PSTR
>
DEC,<	MOVE T,TNXTHI
	PUSHJ P,PSTR
FOR @$I IN(DRN,CHK,ENG)
<	SKIPN TTT,I$NAM
	JRST NOP$I
	PUSHJ P,WORDOUT
	MOVE TTT,I$NAM+1
	PUSHJ P,WORDOUT
	MOVE TTT,I$NAM+3
NOP$I:	PUSHJ P,WORDOUT
>
>;DEC
>;MD
MPC,<	HLRZ TTT,SID
	SKIPE CPLANE	;INNER PLANE?
	TRO TTT,200000	;YES
	HRLI TTT,400001
	PUSHJ P,PUTWRD
	TLNE WFLAG
	JRST SIGPL2
	TRNN M,FLIP		;FLIPPED?
	TDZA TTT,TTT
	MOVEI TTT,1		;FLIPPED BIT TO PLOT PROG
	PUSHJ P,PUTWRD
	MOVE TTT,CRDNAM
	PUSHJ P,WORDOUT
	HLLZ TTT,CRDEXT
	PUSHJ P,WORDOUT
	MOVE TTT,CRDPPN
	PUSHJ P,WORDOUT
	PUSHJ P,MXPADQ		;PRINT MAX PAD # SEEN
SIGPL2:
>;MPC
	RELEASE DAT,
	POPJ P,
;POINTS (D)
MD,<
DOPNTS:	HLRZ C,(B)	;GET POINTER TO DATA BLOCK
	HRRZ D,1(C)	;GET POINTER TO BITS AND TEXT BLOCK
	HLL D,1(D)
	TLNE M,CLOCS	;DOING LOCATIONS?
	TLNN D,CPIN	;AND CONNECTOR PIN!?
	JRST CNOPIN	;NO
	MOVE T,1(B)
	HRRZ E,(D)
	HLRZ F,(D)
	JUMPE F,NTXCPN
	HRRZ F,(F)
	HLRZ F,(F)	;GET TEXT SIZE FOR REFERENCE
NTXCPN:	MOVE TTT,E
	PUSHJ P,TXTCAL	;CALC OFFSET
	PUSHJ P,PUTWRD	;WRITE IT
	TLZ TTT,1
	PUSH P,TTT
	PUSHJ P,VSIZES	;CHECKS FOR VERT BIT IN F
	PUSHJ P,PLTCNM
	TRNE M,NOCBOX	;DOING BOX?
	JRST NPTCBX
	MOVE TTT,(P)
	PUSHJ P,PUTWRD	;START BOX
	PUSH P,B	;SAVE B
	MOVE B,E
	PUSHJ P,CONCAL	;CALC LENGTH OF CPIN DESIG
	POP P,B
STAN,<
IFE STDBIG-1,<
	SKIPE XTHICK
	IMUL T,LSCLX1	;SCALE IT FOR WIDE CHARACTER SET
	SKIPN XTHICK
>
>;STAN
	IMUL T,LSCALX	;SCALE IT
	TRNE F,400000	;VERT?
	JRST VCONBX
	MOVSS TTT,T	;MAKE IT X PART
	ADD TTT,(P)	;GO RIGHT
	PUSHJ P,PUTLIN	;+X,0
	HRLZ TT,LSCALX
	ADD TTT,LSCALY
	ADD TTT,TT
	PUSHJ P,PUTLIN	;+X,+Y
	SUB TTT,TT
	ADD TTT,LSCALY
	PUSHJ P,PUTLIN	;-X,+Y
	SUB TTT,T
	PUSHJ P,PUTLIN	;-X,0
	SUB TTT,TT
	SUB TTT,LSCALY
	PUSHJ P,PUTLIN	;-X,-Y
	ADD TTT,TT
	SUB TTT,LSCALY
	PUSHJ P,PUTLIN	;+X,-Y
	JRST NPTCBX

VCONBX:	MOVE TTT,T	;GET IT HERE
	ADD TTT,(P)	;GO UP
	TLZ TTT,1
	PUSHJ P,PUTLIN	;0,+Y
	HRLZ TT,LSCALY
	SUB TTT,TT
	ADD TTT,LSCALX
	TLZ TTT,1
	PUSHJ P,PUTLIN	;-X,+Y
	SUB TTT,TT
	TLO TTT,1
	SUB TTT,LSCALX
	TLZ TTT,1
	PUSHJ P,PUTLIN	;-X,-Y
	TLO TTT,1
	SUB TTT,T
	TLZ TTT,1
	PUSHJ P,PUTLIN	;0,-Y
	ADD TTT,TT
	TLO TTT,1
	SUB TTT,LSCALX
	TLZ TTT,1
	PUSHJ P,PUTLIN	;+X,-Y
	ADD TTT,TT
	ADD TTT,LSCALX
	TLZ TTT,1
	PUSHJ P,PUTLIN	;+X,+Y
NPTCBX:	POP P,(P)
	JRST TSTXT

CNOPIN:	TLNN D,ISPIN
	JRST TSTXT
	TLNN M,PLOCS	;DOING PINS?
	JRST PCKPND	;NO, CHECK ID'S
	HRRZ TT,(D)
	HLRZ TT,(TT)
	HLRZ T,(TT)
	TRNE T,BUSSED
	JRST TSTXT
	HRLZ A,1(D)
	JUMPN A,PLTPNN
	TLNN M,PINIDS
	JRST TSTXT
	HRLZ A,1(TT)
PLTPNN:	HLRZ TT,(C)	;BODY POINTER
	HLRZ TT,(TT)
	HLRZ TT,1(TT)
	HLR A,1(TT)	;BODY BITS
	PUSH P,A
	SETZM CHRCNT
	PUSH P,PUTCHR
	MOVE TTT,[AOS CHRCNT]
	MOVEM TTT,PUTCHR
	PUSHJ P,PINPLS
	POP P,PUTCHR
	MOVN A,CHRCNT	;GET LEN OF PIN #
	HLRZ TT,(C)	;BODY POINTER
	HLRZ TT,(TT)
	HLRZ TTT,(TT)	;GET ORIENTATION
	HRRZ T,(D)	;GET PIN TYPE BLOCK POINTER
	HLRZ T,(T)	;PIN POS, BITS, ETC BLOCK
	PUSHJ P,PINCAL	;CALC X,Y OFFSET FOR PIN #
	PUSHJ P,PNSPOT	;CALC PIN LOC, OUTPUT IT, SWITCH TO SIZE 1 ( OR 2)
	POP P,A
	PUSHJ P,INIPCH
	PUSHJ P,PINPLS
	PUSHJ P,FINPCH
	JRST TSTXT

PCKPND:	TLNN M,PINIDS
	JRST TSTXT
	HRRZ T,(D)	;PIN TYPE BLOCK POINTER
	HLRZ T,(T)	;BITS, NAME, ETC BLOCK
	HLRZ TTT,(C)
	HLRZ TTT,(TTT)
	HLRZ TTT,(TTT)	;ORIENTATION
	PUSHJ P,PIDCAL
	PUSHJ P,PNSPOT
	PUSHJ P,PLTPND
TSTXT:	TRNE M,NPTEXT
	JRST NOPTXT
	HLRZ TTT,(D)	;GET TEXT POINTER
	JUMPE TTT,NOPTXT	;NONE?
	MOVE T,1(B)		;TEXT LOC
	PUSHJ P,PTXTS		;DO IT
NOPTXT:	MOVS E,1(D)	;GET BITS
	ANDI E,17	;CLEAR OTHERS
	PUSH P,B	
	XCT PPTB1(E)	;CALL THE ROUTINE OR NOT
	POP P,B
	HRRZ B,(B)	;GET NEXT ONE
	JUMPN B,DOPNTS
	POPJ P,

PNSPOT:
	IMUL A,CSCALE		;DO CHAR SCALE THING
	IMUL TT,CSCALE
	HRRE TTT,1(B)
	SUB TTT,YOFF
	SCALET (TTT)
	ADD TTT,TT	;Y PART
	TRZE TTT,1
	ADDI TTT,2
	HLRE TT,1(B)
	SUB TT,XOFF
	SCALET (TT)
	ADD TT,A
	HRL TTT,TT
	TLO TTT,1
	PUSHJ P,PUTWRD	;THIS WILL PUT THE PIN # IN THE RIGHT PLACE (I HOPE!)
	JRST STDSIZ
;LINE SUBR (D)
DOPNTA:	HLRZ C,(B)
	HRRZ D,1(C)
	HLRZ E,1(D)
	ANDI E,17		;JUST GOOD BITS
	PUSH P,B		;SAVE THIS GUY
	CAIE E,17		;ALL DONE?
	PUSHJ P,DOPPIT		;NO, FINISH THE BUM
	POP P,B
	HRRZ B,(B)
	JUMPN B,DOPNTA
	POPJ P,

DOPPIT:	HLRZ A,1(C)	;GET POINTER TO ^_ BLOCK
	XCT PPTB2(E)	;GET POINTER TO NEXT (LINE) POINT
	HRLZ C,PPTB3(E)	;TURN ON BIT FOR LINE WE ARE DOING
	ORM C,1(D)	;......
	MOVE T,1(B)	;GET X,Y
	MOVEI TTT,0
	PUSHJ P,PUTXY	;DO THE LINE(BEGGINING POINT)
PLPLOP:	MOVE A,PPTB3(E)	;GET MAGIC BITS
	MOVE B,F	;GET POINTER TO NEXT POINT IN LINE
	HLRZ C,(B)	;GET POINTER TO DATA BLOCK
	HRRZ D,1(C)	;GET POINTER TO BITS AND TEXT BLOCK
	IOR A,1(D)	;TURN ON BIT FOR LINE WE ARE DOING
	HLLM A,1(D)	;STORE
	HLRS A
	ANDI A,17	;GET BITS
	MOVE T,1(B)	;GET X,Y
	MOVEI TTT,1
	PUSHJ P,PUTXY	;DRAW THE LINE
	HRLZ E,PPTB3(A)	;GET MAGIC BITS
	XCT PPTB5(A)	;TO SKIP OR NOT TO SKIP!
	POPJ P,		;QUIT IF NO SKIP!
	ORM E,1(D)	;TURN ON BIT FOR NEXT SEGMENT
	MOVE E,A
	HLRZ A,1(C)	;GET POINTER TO ^_ BLOCK
	XCT PPTB2(E)	;GET POINTER TO NEXT POINT IN LINE
	JRST PLPLOP

SETBTA:	PUSHJ P,SETBTO
	HRRZ B,(B)
SETBTS:	JUMPN B,SETBTA
	POPJ P,

SETBTO:	HLRZ C,(B)	;GET POINTER TO DATA BLOCK
	HLRZ D,1(C)	;GET POINTER TO ^_ BLOCK
	HRRZ E,1(C)	;GET POINTER TO BITS BLOCK
	MOVE F,1(E)	;GET BITS WORD
	TLZ F,17	;TURN OFF THE "SEGMENT DONE" BITS
	MOVE A,(D)	;GET THE ^ POINTER WORD
	TRNN A,-1	;ANY ^?
	TLO F,1		;NO
	TLNN A,-1	;ANY ?
	TLO F,2		;NO
	MOVE A,1(D)	;GET _ POINTER WORD
	TRNN A,-1
	TLO F,4
	TLNN A,-1
	TLO F,10
	MOVEM F,1(E)	;RE-DEPOSIT WORD
	POPJ P,
;DIAMONDS, RANDOM NUMBERS (D)
DODIAMONDS:
	JUMPE B,CPOPJ
	HLRZ A,(B)
	HRRZ A,1(A)
	HLRZ A,1(A)
	ANDI A,17		;THESE ARE THE BITS
	XCT PPTB4(A)		;DISPATCH
	HRRZ B,(B)
	JRST DODIAMONDS

PUTTI3:	TLNN M,JUNC3		;DOING JUNCTIONS OF 3?
	POPJ P,			;NO
PUTTIT:	MOVE T,1(B)
	MOVSI TTT,1
	PUSHJ P,PUTXY
	MOVE TTT,[2,,1]		;CODE FOR DIAMOND
	JRST PUTWRD

PLTPND:	PUSHJ P,INIPCH
	PUSHJ P,OUTPID
	JRST FINPCH

PLTBNM:	PUSHJ P,INIPCH
	PUSH P,A	;I DONT THINK THIS IS NEEDED
	HLRZ A,(D)
	PUSHJ P,SLTOUT
	HRRZ A,(D)
	PUSHJ P,LOCOUT
FNPCHA:	POP P,A
	JRST FINPCH

PLTCNM:	PUSHJ P,INIPCH
	PUSH P,A		;IS THIS NEEDED?
	MOVS A,(E)
	PUSHJ P,CSLTLP
	JRST FNPCHA
;LINE TABLES (D)
PPTB1:	JFCL
	PUSHJ P,DOPPIT
	PUSHJ P,DOPPIT
	JFCL
	PUSHJ P,DOPPIT
	JFCL
	JFCL
	PUSHJ P,DOPPIT
	PUSHJ P,DOPPIT
	JFCL
	JFCL
	PUSHJ P,DOPPIT
	JFCL
	PUSHJ P,DOPPIT
	PUSHJ P,DOPPIT
	JFCL

PPTB2:	HLRZ F,1(A)	;_^		_
	HLRZ F,(A)	;_		
	HRRZ F,(A)	;_^		^
	HLRZ F,1(A)	;_		_
	HLRZ F,1(A)	;_^		_
	HLRZ F,1(A)	;_		_
	HLRZ F,1(A)	;_^		_
	HLRZ F,1(A)	;_		_
	HRRZ F,1(A)	;^		
	HRRZ F,1(A)	;^		
	HRRZ F,1(A)	;		
	HRRZ F,1(A)	;		
	HRRZ F,(A)	;^		^
	HLRZ F,(A)	;		
	HRRZ F,(A)	;^		^
	JRST 4,.	;0		0

PPTB3:	4,,10
	1,,2
	2,,1
	4,,10
	4,,10
	4,,10
	4,,10
	4,,10
	10,,4
	10,,4
	10,,4
	10,,4
	2,,1
	1,,2
	2,,1
	0

PPTB4:	PUSHJ P,PUTTIT		;0
	PUSHJ P,PUTTI3		;1
	PUSHJ P,PUTTI3		;2
	JFCL			;3
	PUSHJ P,PUTTI3		;4
	JFCL			;5
	JFCL			;6
	JFCL			;7
	PUSHJ P,PUTTI3		;10
	JFCL			;11
	JFCL			;12
	JFCL			;13
	JFCL			;14
	JFCL			;15
	JFCL			;16
	JFCL			;17

PPTB5:	SKIPN CIRC
	CAIA
	CAIA
	SKIPN CIRC
	CAIA
	SKIPN CIRC
	SKIPN CIRC
	CAIA
	CAIA
	SKIPN CIRC
	SKIPN CIRC
	CAIA
	SKIPN CIRC
	CAIA
	CAIA
	JFCL		;ALWAYS QUIT ON THIS ONE!!!
>;MD
;POINTS (PC)
MPC,<
DOPNTS:	HLRZ C,(B)	;GET POINTER TO DATA BLOCK
	HRRZ D,1(C)	;GET POINTER TO BITS AND TEXT BLOCK
	MOVE G,1(B)	;X,Y OF POINT
	TLNE WFLAG	;IF SIG FILE
	JRST PNOPIN	;SKIP ALL PADS ETC.
	TRNE M,NPTEXT
	JRST NOPTXT
	HLRZ TTT,(D)	;GET TEXT POINTER
	JUMPE TTT,NOPTXT	;NONE?
	MOVE T,1(B)
	PUSHJ P,PTXTS
NOPTXT:	MOVE E,1(D)
	TLNN E,ISPIN!FEEDTH
	JRST DOPADA
	MOVE T,G
	MOVSI TTT,1
	PUSHJ P,PUTXY
	MOVE TTT,[2,,1]		;DRILL HOLE!
	PUSHJ P,PUTWRD
DOPADA:	TRNN E,-1		;ANY PAD TYPE?
	JRST PNOPIN		;NO
	SKIPN CPLANE
	JRST DOPAD
	LDB T,[POINT 3,E,6]	;PLANE NUMBER
	CAMN T,CPLANE
	JRST PNOPIN
DOPAD:	MOVE T,G
	MOVSI TTT,1
	PUSHJ P,PUTXY
	HRRZ TTT,E
	CAMLE TTT,MXPADN
	MOVEM TTT,MXPADN
	LSH TTT,1
	TDO TTT,[4,,1]		;MARK AS PAD!
	PUSHJ P,PUTWRD
PNOPIN:	PUSH P,B	
	HLRZ B,1(C)
	JUMPE B,PPTB4
PPTB1:	MOVEI H,2
PPTB2:	XCT (H)[HLRZ A,(B)
		HRRZ A,1(B)
		HLRZ A,1(B)]
	JUMPE A,PPTB3
	CAML G,1(A)
	JRST PPTB3
	MOVE TTT,1(A)
	PUSH P,G
	PUSH P,C
	PUSHJ P,PADFIX
	MOVE T,G
	MOVEI TTT,0
	PUSHJ P,PUTXY
	HLRZ C,(A)
	MOVE TTT,-1(P)
	MOVE G,1(A)
	PUSHJ P,PADFIX
	MOVE T,G
	MOVEI TTT,1
	PUSHJ P,PUTXY
	POP P,C
	POP P,G
PPTB3:	SOJGE H,PPTB2
	HRRZ B,(B)
	JUMPN B,PPTB1
PPTB4:	POP P,B
	HRRZ B,(B)	;GET NEXT ONE
	JUMPN B,DOPNTS
	POPJ P,

PADFIX:	TLNE WFLAG		;NO FIX FOR SIG FILES
	POPJ P,
	HRRZ T,1(C)
	MOVE T,1(T)
	CAIE T,1
	CAIN T,3
	TLNN T,ISPIN
	POPJ P,			;ONLY FIX DIP PINS
	HRRZS T
	CAIE T,1		;AND ONLY THE ONES WE KNOW ABOUT
	CAIN T,2
	CAIA
	POPJ P,
	ADJUST(SUB,TTT,G)
	HLRZ T,(C)
	HLRZ T,(T)
	HLRZ T,(T)		;ORIENTATION (WHEW!)
	JRST @(T)[VFIX
		HFIX
		VFIX
		HFIX]
VFIX:	TRNN TTT,-1
	JRST VFIX1
HFIX1:	TRNE TTT,400000
	SKIPA T,[XWD 0,-=8]
	MOVEI T,=8
VHFIX:	ADJUST(ADD,G,T)
	POPJ P,
HFIX:	TLNN TTT,-1
	JRST HFIX1
VFIX1:	SKIPGE TTT
	SKIPA T,[XWD -=8,0]
	MOVSI T,=8
	JRST VHFIX
>;MPC
;OFFSET TEXT ROUTINE
;CALL WITH T CONTAINING ABS LOC
;TTT POINTER TO CONSTANT OFFSET BLOCK
;WRITES X,Y AND RETURNS IT IN TTT

TXTCAL:
MD,<	PUSHJ P,PSETXY
	HRL T,TT
	TDZ T,[1,,1]
	HLRE TT,1(TTT)
	IMUL TT,CSCALE
	HRRE TTT,1(TTT)
	IMUL TTT,CSCALE
	HRL TTT,TT
	TDZ TTT,[1,,1]
	EXCH TTT,T		;LEAVE OFFSET VALUES IN T
	ADD TTT,T
	TLO TTT,1
	POPJ P,
>;MD
MPC,<	ADJUST(ADD,T,<1(TTT)>)
	MOVSI TTT,1
	JRST PUTXY
>;MPC

PTXTS:	PUSH P,TTT
	PUSHJ P,TXTCAL		;CALC LOC+OFFSET AND WRITE IT OUT
MPC,<	POP P,T
	HRRZ T,(T)
	HLRZ TTT,(T)		;SIZE
	LSH TTT,4
	TLZE TTT,10		;TEST VERT BIT
	TRO TTT,400000		;AND COPY TO HERE
	TRO TTT,1		;MARK AS PART OF THIS COMMAND
	PUSHJ P,PUTWRD		;WRITE SIZE
	JRST PSTR		;AND NOW TEXT
>;MPC
MD,<	PUSHJ P,PUTWRD		;WRITE X,Y WORD
	EXCH TTT,(P)		;SAVE X,Y JUST PUT OUT AND GET TEXT POINTER
	MOVEI TT,1(TTT)
	HRLI TT,(<POINT 7,0,35>)
	HRRZ TTT,(TTT)
	HLRZ TTT,(TTT)	;TEXT SIZE
	SKIPN TTT
	MOVEI TTT,STDBIG	;CHANGE 0 TO STANDARD
	MOVE T,TTT
	ANDI TTT,377777
	MOVE TTT,CMUL(TTT)	;GET SIZE MULTIPLIER
	IMUL TTT,CSCALE		;TEXT SCALE
	LSH TTT,1
	PUSH P,TTT	;SAVE THIS HERE
	TRO TTT,1
	TRNE T,400000	;WAS IT VERTICAL?
	TRO TTT,400000	;YES, FLAG AS SUCH
	PUSHJ P,PUTWRD	;PUT OUT SIZE
	EXCH TTT,(P)	;SAVE SIZE TO WRITE OUT
	IMULI TTT,CHGHT
	ASH TTT,-1		;ACCOUNT FOR EARLIER SHIFT
	TRZ TTT,1	;LOW ORDER BIT MUST BE OFF
	TRNN T,400000
	MOVN TTT,TTT
	HRRZS TTT
	TRNE T,400000
	MOVSS TTT
	PUSH P,TTT	;SAVE LF INCREMENT
PTXTS1:	SETZ TTT,	;GATHER TEXT HERE
PTXTS2:	TLNN TT,760000	;END OF WORD?
	JRST [	HRR TT,-1(TT)	;FOLLOW LINK
		TRNE TT,-1	;WAS THERE ONE THERE?
		JRST .+1	;YES
		POP P,(P)
		POP P,(P)	;FIX UP STACK
		POP P,(P)
		JRST PTXTFN]	;NO
	ILDB T,TT
	JUMPE T,PTXTS2		;SKIP NULLS
	CAIN T,DBLARR		;THIS IS REALLY CRLF
	JRST PTXTS3
	TLNE TTT,776000		;TTT FULL?
	PUSHJ P,PTXTFN		;FLUSH IT OUT
	LSH TTT,7
	IOR TTT,T		;OR IN NEW CHAR
	JRST PTXTS2		;LOOP FOR ANOTHER CHAR

PTXTFN:	JUMPE TTT,CPOPJ		;IGNORE NULL WORDS
	JRST PTXTF2
PTXTF1:	LSH TTT,7
PTXTF2:	TLNN TTT,776000
	JRST PTXTF1
	LSH TTT,1
	TRO TTT,1
	PUSHJ P,PUTWRD
	SETZ TTT,		;CLEAR OUT TTT FOR ANOTHER WORD
	POPJ P,

PTXTS3:	PUSHJ P,PTXTFN		;FLUSH OUT CURRENT WORD
	MOVE TTT,-2(P)		;GET LAST X,Y
	TLZ TTT,1
	ADD TTT,(P)		;MOVE ONE LINE
	MOVEM TTT,-2(P)		;SAVE THIS AS LAST
	TLO TTT,1		;MAKE SURE THIS IS ON
	PUSHJ P,PUTWRD
	MOVE TTT,-1(P)		;SIZE WORD
	PUSHJ P,PUTWRD
	JRST PTXTS1
>;MD
;OUTPUT ROUTINES
MD,<
PSETXY:	HLRE TT,T	;GET X
	HRRES T		;GET Y
	SUB TT,XOFF	;OFFSET
	SUB T,YOFF	;OFFSET	
	SCALET (T)
	SCALET (TT)
	POPJ P,
>;MD
PUTXY:
MD,<	PUSHJ P,PSETXY
	TRZ T,1
	TRZ TT,1
	TLO TTT,(TT)
	TRO TTT,(T)
>;MD
MPC,<	TRNN M,FLIP
	JRST PUTXYF
	TLC T,-1	;INVERT X
	ADD T,[2,,0]
PUTXYF:	TDZ T,[1,,1]
	TDO TTT,T
>;MPC
PUTWRD:	SOSG IOHD+2
	OUT DAT,
	CAIA
	OUTSTR[ASCIZ/PLOT FILE OUTPUT ERROR!
/]
	IDPB TTT,IOHD+1
	POPJ P,

PONE:	MOVEI TTT,1
	JRST PUTWRD

PSTR:	JUMPE T,PONE
	MOVE TTT,1(T)
	TRO TTT,1
	PUSHJ P,PUTWRD
	HRRZ T,(T)
	TRNE TTT,376
	JRST PSTR
	POPJ P,

PCHRS:	ADD T,[POINT 7,1]
PCHRS1:	PUSHJ P,GETTT
	POPJ P,
	PUTBYT (C)
	JRST PCHRS1

MD,<
PUTLIN:	TLZ TTT,1
	TRO TTT,1
	JRST PUTWRD

PINVS:	PUSHJ P,ORIENT
	ADD T,1(B)	;GET X,Y
	TDZ T,[(1)1]
	MOVEM T,SAVLOC	;SAVE IT
	POPJ P,
PVIS:	PUSHJ P,ORIENT	;ORIENT IT
	ADD T,1(B)	;ADD IN BODY CENTER
	TDZ T,[(1)1]
	EXCH T,SAVLOC
	MOVEI TTT,
	PUSHJ P,PUTXY
	MOVE T,SAVLOC
	MOVEI TTT,1
	JRST PUTXY

VSIZES:	TRNN F,400000
	JRST STDSIZ
	MOVE TTT,CSCALE
	TROA TTT,200000
STDSIZ:	MOVE TTT,CSCALE
	IMUL TTT,CMUL+STDBIG
	LSH TTT,1	
	TRO TTT,1
	JRST PUTWRD
>;MD

INIPCH:	SETZM PCHBUF
	MOVE TTT,[PUSHJ P,PLTCH]
	EXCH TTT,PUTCHR
	MOVEM TTT,PLTPSV
	POPJ P,

PLTCH:	IOR TTT,PCHBUF
	TLNN TTT,376000
	JRST [	LSH TTT,7
		MOVEM TTT,PCHBUF
		POPJ P,]
	SETZM PCHBUF
PLTCH2:	LSH TTT,1
	TRO TTT,1
	JRST PUTWRD

FINPCZ:	MOVE TTT,PLTPSV
	MOVEM TTT,PUTCHR
	SKIPN TTT,PCHBUF
	JRST PLTCH2
	JRST FNPCH2

FINPCH:	MOVE TTT,PLTPSV
	MOVEM TTT,PUTCHR
	SKIPN TTT,PCHBUF
	POPJ P,
FNPCH2:	TLNE TTT,376000
	JRST PLTCH2
	LSH TTT,7
	JRST FNPCH2
  