;<DRAW>LOWCOR.FAI;116, 29-JUL-75 17:39:46, EDIT BY HELLIWELL
VERSION(LOWCOR,6)
;ASSEMBLY SWITCHES
LAY,<
PASS1,<PCSW__0>
PASS2,<PCSW__1>
>;LAY

PCSW__PCSW

LAY,<
MD,<BEGIN D>
MPC,<BEGIN PC>
>;LAY

MPC,<SID_13>

;TURN SOME THINGS OFF IN CURRENT BLOCK
MPC,<
DEFINE PART<REPEAT 0>
DEFINE NOPART<REPEAT 0>
>;MPC
MD,<
DEFINE SHORT<REPEAT 0>
DEFINE NOSHORT<REPEAT 0>
DEFINE WAG<REPEAT 0>
DEFINE NOWAG<REPEAT 0>
>;MD
;VECTOR
STORAGE(PURE)
DEFINE VECVAL(ADDR,VALUE)
<
PASS1,<^ADDR:>JRST VALUE
>

LAY,<

TWO,<PASS1,<^^LAYBEG:>>

PASS1,<^^LAY1S:>
PASS2,<^^LAY2S:>

TWO,<
PHASE 400000
>;TWO

LIB,<PASS1,<^^LAYBEG:>>

LIB,<
PASS2,<
GLOBAL LAYBEG
PHASE LAYBEG
>;PASS2
>;LIB

	VECVAL	LAYSYM,0		;SYMBOL TABLE POINTER IN THIS HALF
	VECVAL	.STRT,STRT		;NORMAL START
	VECVAL	.STRTL,STRTL		;START ONE SIDE
	VECVAL	SCRSET,DSPOUT		;DISPLAY UPDATE
	VECVAL	.CONT,CNTSAV		;CONTINUE LOC
	VECVAL	.BLCHK,BLCHK		;BLINK CHECK
	VECVAL	.NOFST,NOFSTA		;GETFS
	VECVAL	REENTER,%R		;REE
	VECVAL	.LERRET,LERRET		;LOOKUP ERROR RETURN
	VECVAL	.UUOCON,%UUOCON		;UUO'S
>;LAY
NOLAY,<
.NOFST:	JRST NOFSTA
REENTER:JRST %R
.UUOCON:JRST %UUOCON
>;NOLAY
;DEFINITIONS OF RANDOM PARAMETERS

MD,<
;NULL DIP NAME (BODY FOR VISUAL EFFECT ONLY!)
NULNAM__<ASCIZ/*/>
CABNAM__<ASCIZ/CABLE/>	;ALSO FORCES SIGNAL NAME "\C\" ON WIRE


;DRAWING SIZES ***********
;A	8.5 X 11
AH__=8500
AW__=11000
LABH__=1000	;HEIGHT OF REGULAR LABEL BOX

;X	8.5 X 11 WITH SMALLER LABEL BOX
XH__=8500
XW__=11000
LABX__=300	;HEIGHT OF XGP LABEL BOX

;B	11 X 17
BH__=11000
BW__=17000

;C	17 X 22
CH__=17000
CW__=22000

;D	22 X 34
DH__=22000
DW__=34000
;E	34 X 44
EH__=34000
EW__=44000
>;MD

;MAX STRING LENGTH IN WORDS FOR PERMUT
MXSTLN__=500/5

;BITS RETURNED BY PERMUT IN SAVBIT
GLB1__1		;1 UP ARROW
GLB2__2		;2 UP ARROWS
SGND__4		;GND
SPWR__10	;VCC
SHI__20		;+3
SNC__40		;NC

MPC,<
;MAX PAD TYPE NUMBER THAT DOESN'T PRINT ON INPUT OR OUTPUT
STDMAX__3	;TYPE 3 FOR NOW

;1/2 THE WIDTH OF A CONNECTOR FINGER IN MILS
FWIDTH__=40

WAG,<
;ROUTER SPECIFICATIONS
ROUSCL__=20		;ROUTER HAS 50 MIL RESOLUTION
SIDDIF__=256		;THIS NUMBER IS THE DIFFERENCE BETWEEN SIDES
ROUXMT__=255		;MAXIMUM X VALUE (PER SIDE)
ROUXMM__=128		;OFFSET IN X (BECAUSE CENTER OF BOARD IS 0,0)
ROUXMB__2		;MINIMUM X VALUE
repeat 0,<
NODEC,<
ROUYMT__=199		;MAX Y VALUE
ROUYMM__=100		;OFFSET IN Y
>;NODEC
>;end repeat 0
ROUYMT__=319
ROUYMM__=160
ROUYMB__2		;MINIMUM Y VALUE
ROUANY__ROUYMT+2	;SPECIFIES "ANY" PIN ON THIS EDGE
NEVERC__=1023		;SIGNAL # SPECIFIES NEVER CONNECT HERE
LCEDGE__=6		;FUDGE FOR LEFT CONNECTOR EDGE
NODEC,<RCEDGE__=243	>	;FUDGE FOR RIGHT CONNECTOR EDGE
DEC,<RCEDGE__=205	>
>;WAG
>;MPC

ROUTE,<
BYTSIZ__2		;USE 2 BIT BYTES FOR NOW!
%GRAIN__=50/5*2
%SEPAR__=50/5*2		;50 MILS MINIMUM BETWEEN WIRES!

%STEP__%SEPAR/%GRAIN

%XSIZ__=11000/5*2		;10 INCHES BY
%YSIZ__=16000/5*2		;16 INCHES

%ROW__%XSIZ/(%GRAIN*(=36/BYTSIZ))+1	;# OF WORDS PER ROW

%XCEN__=%XSIZ/2
%YCEN__%YSIZ/2			;CENTER OF ARRAY
;HERE WE SET THE WEIGHTING FACTORS FOR DIFFERENT ROUTINGS!

%CNR__3		;CORNER COST
%FED__3		;FEED THROUGH COST
%BAK__2		;GOING AWAY FROM POINT COST
%SID__2		;ONE STEP ON WRONG SIDE COST
>;ROUTE


UML,<
;TYPE BITS FOUND IN LEFT HALF OF SECOND WORD
;OF WIRE HEADER IN WIRLST
INLD__400000		;INPUT LOAD
OUTLD__200000		;OUTPUT LOAD
NULLD__100000		;NO LOADING AT PRESENT
GND__40000		;GROUND CONNECTION
PWR__20000		;POWER CONNECTION
TRI__10000		;TRI-STATE OUTPUT
SHARE__4000		;SHARE INPUT LOAD BIT
OPENC__2000		;OPEN COLLECTOR OUTPUT
PULL__1000		;THIS OUTPUT IS A PULLUP

CBACK__2		;INTERNAL HEADER BIT FOR BACK STRAP CONNECTOR
CFRONT__1		;INTERNAL HEADER BIT FOR BACK PANEL CONNECTOR
>;UML
;FILE EXTENSIONS
;DEFAULT DISK FILE EXTENSIONS & IO VERSION NUMBERS FOR MAINTAINING CONSISTENCY

MD,<IOVER__25>
MPC,<IOVER__21>

;IOVBRD AND MODIOV ARE DEFINED HERE BECAUSE JARVIS FUCKED UP AND USED IOVER 21
;TO INTRODUCE THE BOARD TYPE WHILE HELLIWELL WAS  USING THE SAME IOVER FOR THE
;NEW MODULE AND REVISION STUFF.  SINCE NO DRW FILES EXIST AT ITS WITH IOVER 22
;THE FOLLOWING KLUDGE WORKS.

ITS,<	BRDIOV__21	MODIOV__23	>
NOITS,<	BRDIOV__21	MODIOV__21	>

MD,<
EXTFIL__<'DRW'>			;DRAWING FILES
EXTEWR__EXTFIL			;EXTENSION FOR EWRITE COMMAND
CMU,<	EXTEWR__<'DRX'> >	;DON'T CLOBBER ORIGINAL IN AUTO EWRITE!
EXTLIB__EXTFIL			;LIBRARY SAME AS DRAWING
EXTBDL__<'LST'>			;BODY DEF LISTING
EXTDIP__<'DIP'>			;DIP DEF FILE
	DIPVER__3		;DIP FILE VERSION NUMBER
EXTWIR__<'WD '>			;WIRE LIST FILES
	WDVER__13	;WD
NODEC,<
EXTPLT__<'PLT'>			;PLOT FILES
>;NODEC
DEC,<
EXTPLT__<'DPL'>			;DEC ALREADY USES PLT
>;DEC
	PLTVER__13	;PLT
EXTPAR__<'DAT'>			;PARTITION OUTPUT FILE
EXTUML__<'UML'>			;UML INPUT FILE
EXTCHG__<'CHG'>			;CHG INPUT FILE
EXTCPN__<'CPN'>			;CPN INPUT FILE
>;MD
MPC,<
EXTFIL__<'PC '>			;DRAWING FILES
EXTEWR__EXTFIL			;EXTENSION FOR EWRITE COMMAND
CMU,<	EXTEWR__<'PD '> >	;DON'T CLOBBER ORIGINAL IN AUTO EWRITE
EXTWIR__<'WPC'>			;WIRE LIST FILES
	WPCVER__400002	;WPC
EXTPLT__<'PCP'>			;PLOT FILES
	PCPVER__5	;PCP
EXTROU__<'DAT'>			;ROUTER DATA FILES
EXTCRD__<'CRD'>			;EXTENSION FOR PC CARD DEFS
	CRDVER__1		;CRD FILE VERSION NUMBER
>;MPC
UML,<
EXTWDR__<'WDR'>			;DRW WIRE LIST FOR ROUTER GENERATION
	WDRVER__1	;WDR
MD,<
EXTLES__<'LES'>			;LOGIC ERROR SUMMARY FROM WL
	LESVER__1	;LES
		LESWIR__1	;CODE FOR WIRES IN LOGIC ERROR SUMMARY
>;MD
>;UML
EXTSIG__<'SIG'>			;SIGNATURE FILE EXTENTSION
EXTSAV__<'DMP'>			;SAVE FILES
EXTDSK__<'TXT'>			;DISK INPUT/OUTPUT
EXTMCR__<'MCR'>			;MACRO FILE EXTENSION

IFN <WAGSW&UMLSW>!PARTSW,<
DATNAM__<'FOR20 '>		;FORTRAN FILENAME (FOR OUTPT)
IPNNAM__<'FOR23 '>		;IPINS FILENAME DEFAULT
>;....
WAG,<
STRTWR__<'WIRE@ '>		;FIRST WIRE FILE -1
>;WAG
;AC 0 FLAG BITS

;RIGHT HALF:::

ATFP__1		;EDIT INSERT IS AT THE FIRST POINT
ATLP__2		; "	"     "	 "  "  LAST POINT
TYPNEG__4	; - TYPED LAST IN EDIT INSERT
TFLG__10	;TEMPORARY FLAG
MCHG__20	;MAIN PICTURE CHANGED -- REDISPLAY IT
INLIN__40	;POINT MODE IS MAKING LINES
ZIGZAG__100	;WHICH WAY THE LINES GO FOLLOWING THE CURSOR
INMOV__200	;WE ARE MOVING SOMETHING (A POINT OR A BODY)
STBOX__400	;WE ARE DRAWING A SETBOX(NO OTHER SET COMMANDS ARE LEGAL)
MAKSET__1000		;USED IN DREAD TO MAKE SET OF APPENDED PIC
VIRGIN__2000		;USED IN DREAD TO INDICATE FIRST PIC
NEEDCL__4000		;NEED TO FIND CLOSEST AGAIN REGARDLESS OF LSTCUR
TMOVE__10000		;SPECIAL, MOVING TEXT OFFSET
BRDINH__20000		;DON'T SET BOARD TYPE WHILE SEARCHING FOR BODY IN LIBRARY
MPC,<
BTHSDS__400000		;DISPLAYING BOTH SIDES OF PC CARD
>;MPC
MD,<
LMOVE__200000		;SPECIAL, MOVING LOCATION OFFSET
>;MD
FSTLIB__400000		;TOP LEVEL LIBRARY, NAME WILL BE PUT ON LIST

;LEFT HALF
ASK__1		;TEMP FLAG IN VARIOUS ROUTINES
WFLAG__2	;		"
NOINIT__4	;SUPPRESS CALLING OF INIT MACRO ON READIN
IGNORE__10	;DOING DEFINITION OR FALSE PART OF ;F
LOCATE__20	;PUT LOCATOR LINES FROM BIG CHAR
DSPOFF__40	;DISPLAY PACKAGE IS CURRENTLY OFF SCREEN
DSPACT__100	;WE ARE CURRENTLY DISPLAYING (COMBINATION OF FLAGS)
;AC M FLAG BITS

;RIGHT HALF

MD,<
NBTEXT__1		;NO BODY TEXT PLEASE
NOCBOX__2		;NO BOX AROUND CONNECTOR PINS, PLEASE
>;MD
MPC,<
NDIPS__1		;USE BOX, INSTEAD OF PADS
FLIP__2			;INVERTING X
XFEED__4		;SUPPRESS DISPLAYING OF FEEDTHROUGHS
XFINGER__10		;SUPPRESS DISPLAYING OF FINGERS
>;MPC

SEXACT__10000		;EXACT MATCH IN SEARCHES
IFN LAYSW!UMLSW,<
ERRORD__20000		;SUPPRESS DISPLAY OF O_??
>;LAYSW!UMLSW
SPACES__40000		;SPACES ARE SIGNIFICANT
NLINES__100000		;NO LINES
CURSOR__200000		;USING BULLSEYE CURSOR
NPTEXT__400000		;NO POINT TEXT PLEASE


;LEFT HALF

PLOCS__1		;DISPLAY PIN NUMBERS
CLOCS__2		;DIPLAY CONNECTOR PIN LOCS!
BLOCS__4		;DISPLAY BODY LOCATIONS!
MD,<UNHIDE__10	>	;MAKE VISIBLE HIDDEN LOCS/PIN #'S, ETC.
XWINDOW__20		;NOT LIMITED TO SCREEN
MD,<RPINID__40	>	;DISPLAY REAL PINIDS (NUMBERS)
TYPREP__100
TYPNLY__200
LWINDOW__400		;WINDOW LINE SEGMENTS!
DSKFLG__1000		;USING DISK INPUT
DSKACT__2000		;DISK INPUT ACTIVE
MACACT__4000		;MACRO INPUT ACTIVE
%IDENT__10000		;PLOT BODYNAMES AND DIPNAMES ON BODIES
MD,<
PINIDS__40000		;DISPLAY DEFAULT PIN NAMES
JUNC3__100000		;DIAMONDS AT JUNCTION OF 3 LINES
DIAMONDS__200000	;PLOT DIAMONDS
>;MD
MPC,<
ROUTE,<
%ROUTE__40000
RDISP__100000		;DISPLAY BIT ARRAY!
>;ROUTE
CRDISP__200000		;DISPLAY CARD
>;MPC
LCENTER__400000		;CENTER ALL THE BLINKING STUFF
;PIN, BODY, LIBRARY, DEF AND NAMED MACRO BITS


;POINT TYPE BITS

MPC,<FRONT__400000	;PIN ON FRONT SIDE.>
ISPIN__200000		;THIS IS A PIN
MD,<FIXTXT__40000	;FIXING TEXT OFFSET
FIXRHT__20000		;WHEN FIXING MOVE LINE RIGHT
FIXCON__10000		;FIX CONNECTOR TO TEXT
DEFPIN__4000		;RESERVED FOR WD OUTPUT TO INDICATE DEFAULTED PIN NAME (BODY PINS ONLY)
CPNBTS__6000		;BITS FOR TERMINATOR RULES (CPINS ONLY)
	CPNBPS__7	;LOW ORDER BIT POS
	CPNBSZ__2	;# OF BITS
>;MD
MPC,<FEEDTH__40000	;FEED THROUGH
PLANES__34000		;PLANE CONNECTIONS
>;MPC
CPIN__1000		;THIS POINT IS ALSO A CONNECTOR PIN
FOUNDP__20		;BIT FOR FIND
;BITS 14-17 ARE USED AS MARK BITS HERE AND THERE


;BODY BITS
MD,<
L1416__1		;LEFT JUSTIFIED 14 PIN DIP IN 16 PIN SOCKET
R1416__2		;RIGHT	  "	 "  "	"   "  "  "	"
FIXLOC__4		;ALWAYS SET BODY LOC OFFSET FROM DEFINITION
FIXBLO__10		;FIX LOC CHAR OFFSET WHE LOC CHANGES
>;MD
FOUNDB__200000		;BIT FOR FIND
BTMP1__400000		;HIGH ORDER BIT IS MARK BIT FOR SET HACKS


;BODY DEF PIN BITS
MD,<
BUSSED__400000	;THIS IS A BUSSED THROUGH PIN, DON'T SHOW PIN #
;200000 AVAILABLE
FOUNDD__100000	;MARK BIT FOR FLPIN COMMAND
DPTMP1__40000	;TEMP MARK BIT
DPTMP2__20000	;ANOTHER
DEC,<
ASSL__2		;ASSERTION LOW
ASSH__1		;ASSERTION HIGH
>;DEC
DEC,<	BASSLH__BUSSED!ASSL!ASSH>
NODEC,<	BASSLH__BUSSED>
>;MD


;PIN POS FIELD DEFINITIONS
XOFFB__7		;LOW ORDER BIT OF X OFFSET
XOFFW__8		;WIDTH OF X FIELD
YOFFB__=14		;LOW ORDER BIT OF Y OFFSET
YOFFW__7		;WIDTH OF Y FIELD
POSB__=17		;LOW ORDER BIT OF POSITION NUMBER
POSW__3			;WIDTH OF POSITION FIELD


;LIBRARY NAME BLOCK BITS (RT HALF OF FIRST WORD OF SECOND BLOCK)
NEEDMR__400000		;NEED TO READ THIS LIRBARY AGAIN TO GET ALL OF DEFINITIONS
TOPLVL__200000		;THIS MARKS A LIBRARY BLOCK READ AT TOP LEVEL


;TYPE DEFINITION BITS
DTMP1__400000		;TEMPORARY MARK BIT
FOUNDL__200000		;THIS BODY HAS BEEN FOUND BY "FLNAME" OR "FLDIP"
XDISLOC__100000	;DON'T DISPLAY BODY LOC IF TRACKING DEFINITION


;MACRO BITS IN LEFT HALF OF NAMED MACRO HEADER BLOCK FIRST WORD
MSAVE__400000		;SAVE THIS MACRO IN DRW OR PC FILE
MACTMP__1		;TEMPORARY MARK BIT


;BITS IN RUNBIT WRITTEN INTO 'WD' FILE.
CABBDY__1		;"CABLE" BODY SEEN ON RUN. (MUST BE SAME AS BIT IN WL)


;PIECE OF GLASS ASSIGNMENTS
ANGLPG__1	;FOR DRAWING RIGHT ANGLES AND ALTER MODE ARROW
BIGPG__2	;FOR PUTTING OUT BIG B OR P OR S OR L
BLPG__3		;BLINKER PAGE!
MAINPG__4	;MAIN DISPLAY PAGE


;SOME RANDOM TABLE LENGTHS
MPDLEN__100
LHASHP__400	;POINT HASH TABLE (POWER OF TWO)
LHASHB__100	;BODY HASH TABLE (ALSO POWER OF TWO)
;MACROS -- GETFS,FSTRET,SCALE,SCALET,UNSCALE,ADJUST,SWITCH
MD,<PDLEN__2000>
MPC,<PDLEN__5000>
;CHECK FOR INPUT DURING DISPLAYING
DEFINE	CHECKIN
<	XCT CINST
	CAIA
	JRST CHARIN
>

;UPDATE PROGRESS THROUGH DISPLAY ROUTINES
DEFINE SOFAR
<	JSR DSPDSP
	CHECKIN
>

GDP,<
DEFINE XSOFAR
		;CMU MAGIC
<	MOVEM C,CHKSVC
	XCT CINST
	CAIA
	PUSHJ P,XCHRIN
>
>;GDP

;GET FREE STORAGE
	DEFINE GETFS (A)
<	SKIPN A,@FSTPNT
	JSR NOFST
	EXCH A,FSTPNT
>

;RETURN FREE STORAGE
	DEFINE FSTRET (A)
<	HLLI A,
	EXCH A,FSTPNT
	HRRZM A,@FSTPNT>

;CONVERT FROM INTERNAL X,Y TO III X,Y
	DEFINE SCALE (AC)
<	IMUL AC,NSCALE
MPC,<	ASH AC,-4	>
MD,<	ASH AC,-2	>
>

;CONVERT FROM INTERNAL X,Y TO P (OR PCP) X,Y
	DEFINE SCALET (AC)
<	IMUL AC,NSCALE
	ASH AC,1
>

;CONVERT FROM III X,Y TO INTERNAL X,Y
	DEFINE UNSCAL (AC)
<
IFDIF<AC><T>
<	PUSH P,T
	MOVE T,AC
>
	PUSHJ P,%UNSCAL
IFDIF<AC><T>
<	MOVE AC,T
	POP P,T
>
>

;ADD 2 HALFWORD X,Y'S (LOW ORDER BIT OFF)
	DEFINE ADJUST(OP,AC,M)
<	IFIDN <OP><SUB><TLO AC,1>
	OP AC,M
	TLZ AC,1
>

;SWITCH SIDES OF PC CARD
	DEFINE SWITCH
<	PUSHJ P,%SWITCH
>
MPC,<
	DEFINE FSWITCH
<
	MOVE T,PHASHP
	EXCH T,PHASH2
	MOVEM T,PHASHP
	SWITCH
>
>;MPC
MD,<DEFINE FSWITCH<SWITCH>>

MD,<
;HERE IS HOW WE HIDE THE PIN NUMBER OFFSET STUFF IN THE X,Y WORD

PXOFF__4000		;JUST GOBBLE 6 BITS FOR NOW
PYOFF__4000
PXMASK__PXOFF*2-1
PYMASK__PYOFF*2-1

DEFINE PXY(AC)
<	AND AC,[PXMASK,,PYMASK]
	TLO AC,1
	SUB AC,[PXOFF,,PYOFF]
	TLZ AC,1
>

DEFINE NXY(AC)
<	ROT AC,4
	ANDI AC,17
>

>;MD
;MODES:

DEFINE SM(A)
<	A__%MODE
%MODE__%MODE+1
>
%MODE__0

;OUTER (DRAW) LEVEL AND SET MODE
SM	SETM
;OUTER (DRAW) LEVEL AND BODY MODE
SM	BODM
;OUTER (DRAW) LEVEL AND POINT MODE
SM	PNTM
;OUTER (DRAW) LEVEL AND LINE MODE
SM	LINM
;OUTER (DRAW) LEVEL AND POINT TEXT MODE!
SM	TXTM
;ALTER TEXT MODE
SM	ALTM
;ALTER MACRO MODE
SM	MALTM
;SPECIAL POINTER MODE (TEMPRORARY)
SM	SPM
MD,<
;BODY TEXT MODE
SM	BTXTM
;BODY TEXT ALTER MODE
SM	BTALTM
;EDIT LEVEL
SM	EDTM
;EDIT LEVEL AND INSERT MODE
SM	EDTIM
;EDIT LEVEL AND TEXT MODE
SM	EDTTM
;EDIT LEVEL AND PIN MODE
SM	EDTPM
;EDIT LEVEL AND GETTING A BODY
SM	EDTGM
;ALL EDIT MODES (EXCEPT EDTAM)
ALLEDM__1EDTM!1EDTIM!1EDTTM!1EDTPM!1EDTGM
;EDIT MODE ALTER TEXT
SM	EDTAM
>;MD

NUMODES__%MODE

;ALL ALTER MODES
ANYALT__MD,<1EDTAM!1BTALTM!>1MALTM!1ALTM

DEFINE MODISP(BITS,ADDR)
<PUSHJ P,[TRNN B,BITS
	JRST PERRET
	JRST ADDR]
>
C0__1
C1__2
C2__4
C3__10
;DATA IN BOTH
;BEGIN TWO PROG DATA AREAS

DEFINE NAMES<

DEC,<
NOPGP,<
SDATA	TMP1,BOTH
SDATA	TMP2,BOTH
>;NOPGP
>;DEC
SDATA	EXPER2,BOTH
SDATA	SIGCHR,BOTH
SDATA	TPTRP,BOTH
SDATA	TTPTRP,BOTH
SDATA	RUNBIT,BOTH
SDATA	LOW2UP,BOTH
SDATA	SAVER0,BOTH
SDATA	SAVERM,BOTH
SDATA	VARLST,BOTH
SDATA	WDOLST,BOTH
SDATA	FNDNUM,BOTH
SDATA	MOVED,BOTH
SDATA	HASHP,BOTH,LHASHP
SDATA	HASHP2,PC,LHASHP
SDATA	HASHB,BOTH,LHASHB		;MUST FOLLOW HASHP
SDATA	PHASH2,PC
SDATA	PHASHP,BOTH
SDATA	CLAST,BOTH
SDATA	CLOSES,BOTH
SDATA	CLOSUP,BOTH
SDATA	MDISP,BOTH
SDATA	FBNSTR,BOTH
SDATA	FBLSTR,BOTH
SDATA	FBDSTR,BOTH
SDATA	FPLSTR,BOTH
SDATA	FPTSTR,BOTH
SDATA	LSTBOD,BOTH
SDATA	LSTPNT,BOTH
SDATA	TPOINT,BOTH
SDATA	IPOINT,BOTH
SDATA	LPNTR,BOTH
SDATA	BLINKN,BOTH
SDATA	ERRP,BOTH
SDATA	SAVP,BOTH
SDATA	FBDLST,BOTH
SDATA	CORLST,BOTH
SDATA	OLDTYPE,BOTH
SDATA	NEWTYPE,BOTH
SDATA	CURPIN,BOTH
SDATA	CURDIS,BOTH
SDATA	CURREP,BOTH
SDATA	SAVEG,BOTH
SDATA	STARLOC,BOTH
SDATA	SPDISP,BOTH
SDATA	STRING,BOTH
SDATA	CRDLOC,BOTH
SDATA	BLBRT,BOTH
SDATA	REMMAC,BOTH
SDATA	PINLEV,BOTH
SDATA	BLPNTR,BOTH
SDATA	AUTOWM,BOTH
SDATA	AUTOWN,BOTH
SDATA	XGO,BOTH
SDATA	YGO,BOTH
SDATA	XDISP,BOTH
SDATA	YDISP,BOTH
SDATA	COUNT2,BOTH
SDATA	MACPNT,BOTH
SDATA	MDPNT,BOTH
SDATA	VARPNT,BOTH
SDATA	NDIG,BOTH
SDATA	PUTCHR,BOTH
SDATA	DSPPSV,BOTH
SDATA	PLTPSV,BOTH
SDATA	GTCHRX,BOTH
SDATA	CDEPPN,BOTH
SDATA	INPNT,BOTH
SDATA	FSTPNT,BOTH
SDATA	MACPDL,BOTH,MPDLEN
SDATA	PDL,BOTH,PDLEN
SDATA	NSCALE,BOTH
SDATA	MODE,BOTH
SDATA	OMODE,BOTH
SDATA	DEFBRT,BOTH
SDATA	L1,BOTH
SDATA	N1,BOTH
SDATA	N2,BOTH
SDATA	L2,BOTH
SDATA	MAXX,BOTH
SDATA	MAXY,BOTH
SDATA	MINX,BOTH
SDATA	MINY,BOTH
SDATA	CURBOD,BOTH
SDATA	CURORT,BOTH
SDATA	LINING,BOTH
SDATA	LETTER,BOTH
SDATA	NUMBER,BOTH
SDATA	NUMBR1,BOTH
SDATA	SAVEA,BOTH
SDATA	SAVEB,BOTH
SDATA	PGLASS,BOTH
SDATA	COUNT,BOTH
SDATA	BITS,BOTH
SDATA	DIFSOF,BOTH
SDATA	DY1,BOTH
SDATA	DY2,BOTH
SDATA	DY3,BOTH
SDATA	DX1,BOTH
SDATA	DX2,BOTH
SDATA	DX3,BOTH
SDATA	SETPNT,BOTH
SDATA	SETFLG,BOTH
SDATA	ENDBOX,BOTH
SDATA	BUFPTR,BOTH
SDATA	BFPTR2,BOTH
SDATA	TTPTR,BOTH
SDATA	PCHBUF,BOTH
SDATA	SETBOX,BOTH
SDATA	NEWSET,BOTH
SDATA	NEWPNT,BOTH
SDATA	CRUDLR,BOTH
SDATA	SIZ,BOTH
SDATA	BRT,BOTH
SDATA	CHRCNT,BOTH
SDATA	LSTNAM,BOTH,3
;LSTNAM IS 3 IN LENGTH AND IS FOLLOWED BY LSTPPN, SO CLRSIG CAN
;BE USED TO GET NAME INTO MACRO
SDATA	LSTPPN,BOTH
SDATA	NEWBOD,BOTH
SDATA	TYPLOC,BOTH
SDATA	THSLOC,BOTH
SDATA	BID,BOTH
SDATA	PID,BOTH
SDATA	OLDBID,BOTH
SDATA	OLDPID,BOTH
SDATA	MAXBID,BOTH
SDATA	MAXPID,BOTH
SDATA	RDVER,BOTH
SDATA	NNAMES,BOTH
SDATA	SAVEXT,BOTH
SDATA	WIRDAT,BOTH
SDATA	THEREXISTS,BOTH
SDATA	PERRSAV,BOTH
SDATA	CURSE,BOTH
SDATA	LSTCUR,BOTH
SDATA	CLXY,BOTH
SDATA	XOFF,BOTH
SDATA	YOFF,BOTH
SDATA	TOP,BOTH
SDATA	BOTTOM,BOTH
SDATA	LEFT,BOTH
SDATA	RIGHT,BOTH
SDATA	DBODPN,BOTH
SDATA	PONPNT,BOTH
SDATA	CURSET,BOTH
SDATA	TOTCNT,BOTH
SDATA	LINCNT,BOTH
SDATA	EOLCHR,BOTH
SDATA	TXTPNT,BOTH
SDATA	ALTLIN,BOTH
SDATA	MODALT,BOTH
SDATA	ALTPNT,BOTH
SDATA	TXTBYT,BOTH
SDATA	TXTCNT,BOTH
SDATA	COMREP,BOTH
SDATA	NOARG,BOTH
SDATA	ALTSTR,BOTH
SDATA	CHRALT,BOTH
SDATA	FSTART,BOTH
SDATA	FLEN,BOTH
SDATA	BEGLIN,BOTH
SDATA	NOFFST,BOTH
SDATA	NOPPNF,BOTH
ITS,<
SDATA	TVDPY,BOTH
>;ITS
IFN UMLSW!LAYSW,<
SDATA	OFFERR,BOTH
SDATA	UPINS,BOTH
>;IFN UMLSW!LAYSW
UML,<
SDATA	WIRLST,BOTH
>;UML
STAN,<
SDATA	XTHICK,BOTH
>;STAN
>;NAMES
;DATA IN ONE OR OTHER
DEFINES NAMES1<

DEFINE FLAGS
<
	FLGMAC	FALSE,BOTH,<JFCL>
	FLGMAC	TRUE,BOTH,<CAIA>
	FLGMAC	CLOSES,BOTH,<PUSHJ P,CLTEST>
	FLGMAC	RITEON,BOTH,<PUSHJ P,ROTEST>
	FLGMAC	EDGE,BOTH
	FLGMAC	AEOL,BOTH
	FLGMAC	ABOL,BOTH
	FLGMAC	FIND,BOTH
	FLGMAC	AFIND,BOTH
	FLGMAC	DSKEND,BOTH
	FLGMAC	ENDMUL,BOTH
	FLGMAC	LSTEXP,BOTH
	FLGMAC	EXPR,BOTH,<PUSHJ P,FEXPR>
>
DEFINE FLGMAC(A,B,C)
<IFIDN<C><><SDATA	A,B>
>
;GENERATE ANY DATA STATEMENTS FOR SIMPLE FLAGS
	FLAGS

PART,<
SDATA	PARNAM,D
>;PART
UML,<
SDATA	%LAST,D
SDATA	ERCODE,D
>;UML
SDATA	FPSSTR,D
SDATA	FLNSTR,D
SDATA	FLDSTR,D
SDATA	FLPSTR,D
SDATA	FLTSTR,D
SDATA	FLRSTR,D
SDATA	FBTSTR,D
SDATA	FBRSTR,D
SDATA	TYPNAM,D
SDATA	OFFCLC,D
SDATA	ERRVAR,D
SDATA	ISVERT,D
SDATA	MODLIB,D
STANFO,<
NOLAY,<
MPC,<
SDATA	GRABUF,PC
>;MPC
>;NOLAY
>;STANFO
SDATA	PONPN2,PC
SDATA	OUTSIDE,D
SDATA	SITE1,D
SDATA	SITE2,D
SDATA	TIT1,D
SDATA	TIT2,D
SDATA	TAUTHOR,D
SDATA	TREV,D
SDATA	TMODULE,D
SDATA	TVARIABLE,D
SDATA	TPREFIX,D
SDATA	TPROJ,D
SDATA	TPAGE,D
SDATA	TOF,D
SDATA	TDCODE,D
DEC,<
SDATA	DRNNAM,D,4
SDATA	CHKNAM,D,4
SDATA	ENGNAM,D,4
SDATA	TNXTHI,D
>;DEC
SDATA	DRWDAT,D
SDATA	DRWNAM,D
SDATA	DRWPPN,D
SDATA	LIBLST,D
SDATA	MAPLST,D
SDATA	LIBTMP,D
SDATA	DEPTH,D
SDATA	LIBNAM,D
SHORT,<
SDATA	SRTLST,PC
SDATA	SHRTER,PC
SDATA	SERR1,PC
SDATA	SERR2,PC
SDATA	CPLAN1,PC
SDATA	CPLAN2,PC
SDATA	PCOP,PC
SDATA	PTOP,PC
SDATA	PTOL,PC
SDATA	LTOL,PC
>;SHORT
WAG,<
SDATA	LASTWR,PC
>;WAG
SDATA	CRDNAM,PC,1,LOW
SDATA	CRDEXT,PC,1,LOW
SDATA	CRDDAT,PC,1,LOW
SDATA	CRDPPN,PC,1,LOW
SDATA	CARDHD,PC,3,LOW
SDATA	CRDBUF,PC,406,LOW
SDATA	STPSIZ,PC
SDATA	CPLANE,PC
SDATA	XUMLPN,PC
SDATA	YUMLPN,PC
SDATA	KEEPIN,D
SDATA	LOWER,D
SDATA	UPPER,D
SDATA	WIDTH,D
SDATA	EDMODS,D
SDATA	EDCURS,D
SDATA	EDSCAL,D
SDATA	EDXOFF,D
SDATA	EDYOFF,D
SDATA	CLSTPN,D
SDATA	CRPPNT,D
SDATA	BTBODY,D
SDATA	GETBOD,D
SDATA	GETORT,D
SDATA	UDLR,D
SDATA	SAVLOC,D
SDATA	PINS,D
SDATA	LINES,D
SDATA	BTEXT,D
SDATA	TYPE,D
SDATA	COPPRP,D
SDATA	BTXLST,D
SDATA	LOSEPT,D
SDATA	ODIPTYP,D
SDATA	DEFOFF,D
SDATA	DEFOF1,D
SDATA	DEFBTS,D
SDATA	UTLIST,D
SDATA	USEFLG,D
SDATA	ALLFLG,D
SDATA	BODPNT,D
SDATA	CRDLST,PC
SDATA	BARLST,PC
SDATA	CIRC,D
SDATA	ITSSCL,D
SDATA	CSCALE,D
SDATA	LSCALX,D
SDATA	LSCALY,D
STAN,<
IFE STDBIG-1,<
SDATA	LSCLX1,D
>
>;STAN
SDATA	CBOX,D
SDATA	SSCALE,D
SDATA	SHEIGHT,D
SDATA	SWIDTH,D
SDATA	MOVFLG,D
SDATA	ULNFLG,D
SDATA	MXPADN,PC
SDATA	SIDSAV,PC
SDATA	BTHBRT,PC
ROUTE,<
SDATA	ROUIDX,PC
SDATA	ARRAYA,PC,%ROW*(%YSIZ/%GRAIN)
SDATA	ARRAYB,PC,%ROW*(%YSIZ/%GRAIN)
SDATA	RCL1,PC
SDATA	RCL2,PC
SDATA	RTCNT,PC
SDATA	RCODE,PC
SDATA	ENDBYT,PC
SDATA	ENDBY2,PC
SDATA	DX,PC
SDATA	DY,PC
SDATA	XCNT,PC
SDATA	YCNT,PC
SDATA	RLIST,PC
SDATA	X1,PC
SDATA	Y1,PC
SDATA	X2,PC
SDATA	Y2,PC
SDATA	PSAV,PC
SDATA	.CNR,PC
SDATA	.FED,PC
SDATA	.BAK,PC
SDATA	.SID,PC
>;ROUTE
>;NAMES1


DEFINE SDATA(LABEL,D.PC,SIZE,SEG)
<
IFIDN<SEG><LOW><STORAGE(LOW);>STORAGE(IMPURE)
IFIDN<D.PC><D><MD,<LABEL:
	IFIDN<SIZE><><0>
	IFDIF<SIZE><><BLOCK SIZE>
>>
IFIDN<D.PC><PC><MPC,<LABEL:
	IFIDN<SIZE><><0>
	IFDIF<SIZE><><BLOCK SIZE>
>>
IFIDN<D.PC><BOTH><
LABEL:
IFIDN<SIZE><><0>
IFDIF<SIZE><><BLOCK SIZE>
>>


SDATA	PATCH1,BOTH,40		;PATCH SPACE
SDATA	DSPDSP,BOTH
	JRST @DSPDSP

ZEROBEGIN:

NAMES
NAMES1

ZEROEND__.-1
;DIP BODY DEFS (PC), BOX TABLES (D)

IFN PCSW!LAYSW,<

%SIP__1000		; bits to give numeric body types unique names
%JACK__2000		; note that for now, this screws up the pin count stuff

DEFINE BODY (NAME,NEXTBOD)
<	=NAME,,NEXTBOD
	.+1
>
DEFINE PIN  (PINID,X,Y,ENDIFZERO)
<	RADIX =10
	PINID,,IFIDN <ENDIFZERO><> <.+2>
	X/5*2,,Y/5*2
	RADIX 8
>
DEFINE DIP (Y,DECPINS,LINK)
<	NUMPINS__=DECPINS
	XWD NUMPINS,LINK
	XWD .+1+NUMPINS*2,.+1
X_=100/5*2
XC_-(((NUMPINS/2)*X-X)/=80)*=40
YC_=Y/5
;PINS
	FOR I_NUMPINS/2,(NUMPINS/2)*2-1
<	XWD I+1,.+2
	XWD X*(I-NUMPINS/2)+XC,-YC
>
	FOR I_0,NUMPINS/2-2
<	XWD -I+NUMPINS/2,.+2
	XWD X*I+XC,YC
>
	XWD 1,0
	XWD X*(NUMPINS/2-1)+XC,YC
	.+2
;APPROX BOX
	XWD X*(NUMPINS/2-1)+XC,YC
	.+2
	XWD X*(NUMPINS/2-1)+XC,-YC
	.+2
	XWD XC,-YC
	.+2
	XWD XC,YC
	0
	XWD X*(NUMPINS/2-1)+XC,YC
>;DIP
;EDGE CONNECTOR BODY FOR MOTHERBOARDS, DIPTYPE 7000+NUMBER OF PINS
;SIMILAR TO A DIP EXCEPT TAKES A GENERAL PIN SPACING IN ADDITION TO ROW SPACING
;NUMBERING PATTERN LOOKS LIKE (TOP (COMPONENT) SIDE VIEW):
; (N-1) (N-3) (N-5) ... 5 3 1
; (N)   (N-2) (N-4) ... 6 4 2
;THE MACRO IS CAREFUL TO PRESERVE PRECISION FOR SPACINGS THAT ARE NOT A
;MULTIPLE OF 5 MILS. PIN 1 IS (0,0) RELATIVE, SO PIN 1 IS DROPPED ON TOP
;OF THE CURSOR WHEN THE BODY IS PLACED.

DEFINE ECB (YE,XE,DECPINS,LINK)
<	NUMPINS__=DECPINS
	XWD =7000+NUMPINS,LINK
	XWD .+1+NUMPINS*2,.+1
YC_(=YE/5)*2
;;PINS
	FOR I_0,(NUMPINS/2)-1		;;LOWER/EVEN PINS
<	XWD NUMPINS-2*I,.+2
	XWD -(((NUMPINS/2-I-1)*=XE)/5)*2,-YC
>
	FOR I_0,NUMPINS/2-2		;;UPPER/ODD PINS EXCEPT PIN 1
<	XWD NUMPINS-2*I-1,.+2
	XWD -(((NUMPINS/2-I-1)*=XE)/5)*2,0

>
	XWD 1,0				;;PIN 1
	XWD 0,0
;APPROX BOX
	.+2
	XWD 0,0
	.+2
	XWD 0,-YC
	.+2
	XWD -((NUMPINS/2-1)*=XE)/5*2,-YC
	.+2
	XWD -((NUMPINS/2-1)*=XE)/5*2,0
	0
	XWD 0,0
>;DIP

;
; A JACK is two rows of pins, spaced .1" apart in both x and y.  numbering is like
; 01 03 05 07 09
; 02 04 06 08 10
;
DEFINE JACK (DECPINS,LINK)
<	NUMPINS__=DECPINS
	XWD %JACK+NUMPINS,LINK
	XWD 0,.+1			; LH  of 0 means that we don't draw a box
	FOR I _ 0,(NUMPINS-1)/2
<		FOR J _ 0,1
<		%PINID _ (I*2)+J+1
		XWD %PINID,IFN (%PINID-NUMPINS) <.+2;> 0
		XWD I*=100/5*2,J*=100/5*2
>;J
>;I		
>;JACK

;
; A SIP is a single row of pins, .1" apart
;
DEFINE SIP (DECPINS,LINK)
<	NUMPINS__=DECPINS
	XWD %SIP+NUMPINS,LINK
	XWD 0,.+1
	FOR I _ 0,NUMPINS-1
<	%PINID _ I+1
	XWD %PINID,IFN (%PINID-NUMPINS) <.+2;> 0
	XWD I*=100/5*2,0
>;I
>;SIP

STORAGE(IMPURE)
MPC,<BODPNT:	>
	FSTBOD

STORAGE(PURE)

FSTBOD:
PIN6:	DIP(300,6,PIN8)
PIN8:	DIP(300,8,PIN14)
PIN14:	DIP(300,14,PIN16)
PIN16:	DIP(300,16,PIN18)
PIN18:	DIP(300,18,PIN20)
PIN20:	DIP(300,20,PIN22)
PIN22:	DIP(400,22,PIN24)
PIN24:	DIP(300,24,PIN25)	; for SLIM 24-pin DIPS. AVB 18-Oct-82
PIN25:	DIP(600,25,PIN28)	; for FAT 24-pin DIPS. AVB 18-Oct-82
PIN28:	DIP(600,28,PIN40)
PIN40:	DIP(600,40,PIN48)
PIN48:	DIP(600,48,PIN52)
PIN52:	DIP(800,52,PIN64)	; for AMD 29116.  AVB 18-Oct-82
PIN64:	DIP(900,64,SIP6)	; for Motorola 68000, etc.  ROB 15-Feb-81
SIP6:	SIP(6,SIP8)
SIP8:	SIP(8,SIP10)
SIP10:	SIP(10,JAK02)
JAK02:	JACK(02,JAK04)
JAK04:	JACK(04,JAK06)
JAK06:	JACK(06,JAK08)
JAK08:	JACK(08,JAK10)
JAK10:	JACK(10,JAK16)
JAK16:	JACK(16,JAK20)
JAK20:	JACK(20,JAK26)
JAK26:	JACK(26,JAK28)
JAK28:	JACK(28,JAK30)
JAK30:	JACK(30,JAK40)
JAK40:	JACK(40,JAK50)
JAK50:	JACK(50,JAK60)
JAK60:	JACK(60,EC86)
EC86:	ECB(200,156,86,TO18.3)
TO18.3:	BODY (183,TO18.4)
	PIN (1,50,0)
	PIN (2,0,50)
	PIN (3,-50,0,0)
TO18.4:	BODY (184,TO5.3)
	PIN (1,50,0)
	PIN (2,0,50)
	PIN (3,-50,0)
	PIN (4,0,-50,0)
TO5.3:	BODY (53,TO5.4)
	PIN (1,100,0)
	PIN (2,0,100)
	PIN (3,-100,0,0)
TO5.4:	BODY (54,TO66.3)
	PIN (1,100,0)
	PIN (2,0,100)
	PIN (3,-100,0)
	PIN (4,0,-100,0)
TO66.3:	BODY (663,TO6631)
	PIN (1,-100,0)
	PIN (2,100,0)
	PIN (3,0,580)
	PIN (3,0,-380,0)
TO6631:	BODY (6631,.3009P)
	PIN (1,-100,0)
	PIN (2,100,0)
	PIN (3,0,-380,0)
	PIN (3,0,580)
.3009P:	BODY (30091,PIN3T)
	PIN (1,-300,0)
	PIN (2,0,-100)
	PIN (3,200,0,0)
PIN3T:	BODY (3,PIN4T)
	PIN (1,100,0)
	PIN (2,0,100)
	PIN (3,-100,0,0)
PIN4T:	BODY (4,0)
	PIN (1,50,0)
	PIN (2,0,50)
	PIN (3,-50,0)
	PIN (4,0,-50,0)
>;PCSW!LAYSW

STORAGE(PURE)
MD,<
WTAB:	(AW-=500)/5		;A
	(XW-=500)/5		;X
	(BW-=1000)/5		;B
	(CW-=1000)/5		;C
	(DW-=1000)/5		;D
	(EW-=1000)/5		;E
	(BH-=1000)/5		;VB
	(CH-=1000)/5		;VC
	(DH-=1000)/5		;VD
	(EH-=1000)/5		;VE

HTAB:	(AH-=500-LABH)/5	;A
	(XH-=500-LABX)/5	;X
	(BH-=1000-LABH)/5	;B
	(CH-=1000-LABH)/5	;C
	(DH-=1000-LABH)/5	;D
	(EH-=1000-LABH)/5	;E
	(BW-=1000-LABH)/5	;VB
	(CW-=1000-LABH)/5	;VC
	(DW-=1000-LABH)/5	;VD
	(EW-=1000-LABH)/5	;VE

BTAB:	"A"
	"X"
	"B"
	"C"
DINDEX__.-BTAB
	"D"
	"E"
HBXLEN__.-BTAB
	SETZ "B"
	SETZ "C"
	SETZ "D"
	SETZ "E"
VBXLEN__.-BTAB-HBXLEN
BOXLEN__.-BTAB
>;MD
STORAGE(PURE)
   