@part(D,Root "SUDS.MSS[A210JN11]")
@majorpart(D: the Drawing program)
@pagefooting(immediate,center "D", right "@title(Chapter)")
@equate(Emphasize=U)
@chap(Introduction)
D is the drawing program of SUDS.  Its primary task is to
lay down @i[bodies] which represent circuit functions, and
to lay down @i[lines] which connect the bodies.  Lines
hardly exist; the primary control is the position of @i[points]
which are used to connect lines.

A @i[body] may be one of several functions in a single
DIP package.  The assignment of bodies to packages and packages
to board positions may be deferred until late in the
design.  Bodies may also be reassigned to packages or packages
reassigned to locations on the board as required.  Bodies
may be moved around on the drawing and the lines connecting
them will follow.

A @i[body] is created in body edit mode, and consists of a set
of @i[points] which are logical pin names (not necessarily
physical pin names) to which signals may be attached.  In addition,
since bodies are intended for use in drawings, a set of lines
may be constructed to represent the logical function, and
text may be added to clarify the purpose of the input and
output pins.  More about this may be found in the discussion
of body-edit mode, chapter @ref(EditMode), page @pageref(editmode).

Although in theory a drawing can be done on a "bare" version
of the drawing program, in practice one does not wish to create
a new body for each function.  Therefore, bodies are collected
into @i[libraries] and the libraries may be loaded to make the
body definitions available.  Libraries are discussed more in
chapter @ref(Libraries), page @pageref(libraries).


Bodies and points may be formed into @i[sets] which represent
pieces of the drawing.  These sets may be moved, stored in
files, copied, or deleted; these all provide powerful editing
facilities at the drawing level.

@sec(Modes and their uses)
While editing a drawing, the program is in one of several 
@i[modes].


@i[Point mode] is used to place points and draw lines (wires)
between them.  Points may be moved around, and if wires or
text (signal names) are attached, these will be moved around
to follow them.  A line can contain several points, and
thus be made of several collinear line segments.  This may
or may not be an advantage.

Signal names are associated with points.  Normally, they are
associated with a point which represents a signal
either entering or leaving a drawing.
For purposes of documentation and explanation, signals
may also appear on points inside the drawing.

@i[Body mode] is used to place the bodies which are 
(normally) connected by the lines one wishes to draw.  Bodies
can be put down, rotated, reflected, moved, etc.  
You also use body mode to assign bodies to IC packages (and thus
assign real pin numbers to them).
IC packages are also assigned to physical board locations in this
mode.


@i[Set mode] is used to define a group of points and bodies
as a set which is to be operated on as a unit.  Usually this is
used to move a set of points around, because they aren't where
they should be, but it is also used to delete sets of points and
bodies, duplicate them,  or to save them on a file (e.g., you have a useful subcircuit you
want to store away so you won't have to redraw it...)

@i[Edit mode] is used to create or edit a body definition.

@i[Body Text/Property mode] is used to edit a particular
instance of a body in a drawing.

@i[Line mode] is used to do some very simple manipulations on
lines.  This consists mostly of inserting points into lines so
the more powerful point mode commands can be used.

Macros are supplied in a rather obscure fashion, and are used 
primarily for repetitive operations, such as laying down busses,
multiple signal wires, etc.

@sec(Notation conventions)

@index(@g(a), defined)
@index(Alpha, defined)
@indexentry(key "Alpha@g(a), defined",entry "@g(a), defined",number)
@index(@g(b), defined)
@index(Beta, defined)
@indexentry(key "Beta@g(b), defined",entry "@g(b), defined",number)
@index(@g(e), defined)
@index(Epsilon, defined)
@indexentry(key "Epsilon@g(e), defined",entry "@g(e), defined",number)

The multiple shift keys of the GDP keyboard are used to
modify the actions taken.  In this manual, the "control"
key is indicated by the symbol "@g(a)", the "meta" key
by the symbol "@g(b)", and the combination of the meta and
control keys by the symbol "@g(e)".  In addition, if you
are trying to run from a standard terminal (such as
producing plot files in case you forgot to do so at a
graphics), the following equivalences may be used:
@enter(description)
@index(', @g(a))
@label(Apostrophes)
@index(Alpha, ')
@index(Apostrophe)
@g(a)   '

@index('', @g(b))
@index(Beta, '')
@g(b)   ''

@index(''', @g(e))
@index(Epsilon, ''')
@g(e)   '''

@index('''', ')
@index(Apostrophe, '''')
'    ''''
@leave(description)

In addition, those commands which are of the most use to a beginner
are emphasized @emphasize[like this] in the enumerations of commands.

@chap(Window operations)
@pagefooting(immediate,left "@g(a)=control, @g(b)=meta, @g(e)=meta-control", center "D", right "@title(Chapter)")

@sec(Motion)@label(windowmotion)
These commands move the picture around in the graphics "window".
You can draw more than you can show on the screen, so this allows
you to move the drawing around@foot<Or move the window around
on the drawing.  It all depends upon how you think about it.
The effect is the same.>.  These commands can be issued
in any mode, at any time.
These commands can be accompanied by scaling factors defined
by the meta (@g(b)), control (@g(a)), or meta-control (@g(e)) keys:
@enter(descriptioN)
(nothing)@\1/8 window

@g(a) (control)@\1/4 window

@g(b) (meta)@\1/2 window

@g(e) (meta-control)@\1 window
@leave(description)

The motion commands are@foot<Note that the "top" key must be used to type these characters.
>:
@enter(description)
@index(Left window) @index(Window, move left) @index(Move window left)
@index(Moving a drawing)
@index(Drawing, moving)
@index(Moving the window)
@index(Window, moving)
@index(_, move window left)
@index(@g(a)_, left window 1/4)
@indexentry(key "_@g(a), left window 1/4",entry "@g(a)_, left window 1/4",number)
@index(@g(b)_, left window 1/2)
@indexentry(key "_@g(b), left window 1/2",entry "@g(b)_, left window 1/2",number)
@index(@g(e)_, left window 1)
@indexentry(key "_@g(e), left window 1",entry "@g(e)_, left window 1",number)
_@\left

@index(Right window) @index(Window, move right) @index(Move window right)
@index(@k(rightarrow), move window Right)
@index(@g(a)@k(rightarrow), right window 1/4)
@indexentry(key "@k(rightarrow)@g(a), right window 1/4", entry "@g(a)@k(rightarrow), right window 1/4",number)
@index(@g(b)@k(rightarrow), right window 1/2)
@indexentry(key "@k(rightarrow)@g(b), right window 1/2", entry "@g(b)@k(rightarrow), right window 1/2",number)
@index(@g(e)@k(rightarrow), right window 1)
@indexentry(key "@k(rightarrow)@g(e), right window 1", entry "@g(e)@k(rightarrow), right window 1",number)
@k(rightarrow)@\right

@index(Up window) @index(Window, move up) @index(Move window up)
@index(^, move window up)
@index(@g(a)^, up window 1/4)
@indexentry(key "^@g(a), up window 1/4",entry "@g(a)^, up window 1/4", number)
@index(@g(b)^, up window 1/2)
@indexentry(key "^@g(b), up window 1/2",entry "@g(b)^, up window 1/2", number)
@index(@g(e)^, up window 1)
@indexentry(key "^@g(e), up window 1",entry "@g(e)^, up window 1", number)
^@\up

@index(Down window) @index(Window, move down) @index(Move window down)
@index(@z(\), move window down)
@index(@g(a)@z(\), down window 1/4)
@indexentry(key "@z(\)@g(a), down window 1/4", entry "@g(a)@z(\), down window 1/4",number)
@index(@g(b)@z(\), down window 1/2)
@indexentry(key "@z(\)@g(b), down window 1/2", entry "@g(b)@z(\), down window 1/2",number)
@index(@g(e)@z(\), down window 1)
@indexentry(key "@z(\)@g(e), down window 1", entry "@g(e)@z(\), down window 1",number)
@z(\)@\down

@index(@g(b)C, center cursor)
@label(BetaC)
@indexentry(key "C@g(b), center cursor",entry "@g(b)C, center cursor",number)
@g(b)C@\Moves the cursor and the point in the drawing at which it
is set to the physical center of the screen.

@index(Drawing, centering)@index(Centering the drawing)
@emphasize[XPICCEN]@\Centers the picture in the box in which it will be
plotted, and centers the box on the display.  See page @pageref(XPICCEN).
@leave(description)

In addition, certain commands, such as @g(a)F in body
or point  mode (see pages @pageref(AlphaFPoint) and @pageref(AlphaFBody)) may cause
the drawing to move under the window in order that the
marked body or point is on-screen.

@sec(Scaling)@label(scaling)

The following commands scale the size of the drawing.  Scale by 
steps of 4 (4,8,12,16) is recommended for actual drawings, but
for screen use anything that is convenient is probably alright.
@enter(description,group)
@index(*, scale smaller)
@index(Scale smaller)
*@\Scale - 1

@index(@g(a)*, scale*.8)
@indexentry(key "*@g(a), scale*.8",entry "@g(a)*, scale*.8",number)
@g(a)*@\Scale * 4/5@\ (.8)

@index(@g(b)*, scale*.67)
@indexentry(key "*@g(b), scale*.67",entry "@g(b)*, scale*.67",number)
@g(b)*@\Scale * 2/3@\ (.67)

@index(@g(e)*, scale*.5)
@indexentry(key "*@g(e), scale*.5",entry "@g(e)*, scale*.5",number)
@g(e)*@\Scale * 1/2@\ (.5)

@index(@z(), scale larger)
@z()@\Scale + 1

@index(@g(a)@z(), scale*1.25)
@indexentry(key "@z()@g(a), scale*1.25",entry "@g(a)@z(), scale*1.25",number)
@g(a)@z()@\Scale * 5/4@\ (1.25)

@index(@g(b)@z(), scale*1.5)
@indexentry(key "@z()@g(b), scale*1.5",entry "@g(b)@z(), scale*1.5",number)
@g(b)@z()@\Scale * 3/2@\ (1.5)

@index(@g(e)@z(), scale*2)
@indexentry(key "@z()@g(e), scale*2",entry "@g(e)@z(), scale*2",number)
@g(e)@z()@\Scale * 2@\

@index(PBOX)@index(XPBOX)

XPBOX@\Asks for the desired box for plotting, then scales the drawing
to fit; see page @pageref(XPBOX).

@index(XSCALE)@index(SCALE)

@emphasize[XSCALE]@\Asks for the desired scale size and scales the drawing to that size.

@index(XSHOWBOX)@index(SHOWBOX)
XSHOWBOX@\Displays the box used for plotting around the drawing.  May
rescale the drawing; see page @pageref(XSHOWBOX).
@leave(description)

@sec(Other window operations)

@enter(description)
@index(@g(e)!, redraw picture)@index(Redraw picture, @g(e)!)
@indexentry(key "!@g(e), redraw picture", entry "@g(e)!, redraw picture",number)

@emphasize[@g(e)!]@\Redraw picture.  This is useful if the program has forgotten
to update the display, or the display has been garbaged by a
flaky GDP or bad transmission of the display list.

@index(Screen, clearing)@index(Clearing the screen)
@index(XCLEAR)@index(CLEAR)

@emphasize[XCLEAR]@\Clears the screen; resets all values to their startup
defaults; see page @pageref(XCLEAR).

@index(XWINDOW)@index(WINDOW)

XWINDOW@\Restricts operations to that portion of drawing that is
visible in the window; see page @pageref(XWINDOW).

@index(X-WINDOW)
@indexentry(key "XWINDOW-",entry "X-WINDOW",number)
@index(-WINDOW)@indexentry(key "WINDOW-",entry "-WINDOW",number)

X-WINDOW   Permits operations to affect the entire drawing, not just
the porition visible in the window.
@leave(description)


@chap(Cursor operations)

The cursor moving is scaled by the following keys:
@enter(description)
<nothing>@\1 step

@g(a)@\2 steps

@g(b)@\4 steps

@g(e)@\8 steps

@i<top>@\16 steps

@g(a)@i<top>@\32 steps

@g(b)@i<top>@\64 steps

@g(e)@i<top>@\128 steps
@leave(description)

The cursor movement commands are selected to be the keys in the
order left,right,up,down.

@enter(description)
@index(Cursor, moving)
@index(Moving the cursor)
@index[(, cursor left]
@index(Left cursor)
@index(Cursor left)
@index<@g(a)(, cursor left 2>
@indexentry<key "(@g(a), cursor left 2",entry "@g(a)(, cursor left 2",number>
@index<@g(b)(, cursor left 4>@indexentry<key "(@g(b), cursor left 4",entry "@g(b)(, cursor left 4",number>
@index<@g(e)(, cursor left 8>@indexentry<key "(@g(e), cursor left 8",entry "@g(e)(, cursor left 8",number>
@index<[, cursor left 16>
@index<@g(a)[, cursor left 32>@indexentry<key "[@g(a), cursor left 32",entry "@g(a)[, cursor left 32",number>
@index<@g(b)[, cursor left 64>@indexentry<key "[@g(b), cursor left 64",entry "@g(b)[, cursor left 64",number>
@index<@g(e)[, cursor left 128>@indexentry<key "[@g(e), cursor left 128",entry "@g(e)[, cursor left 128",number>
(@\Cursor left

@index[), cursor right]
@index(Right cursor)
@index(Cursor right)
@index<@g(a)), cursor right 2>@indexentry<key ")@g(a), cursor right 2",entry "@g(a)), cursor right 2",number>
@index<@g(b)), cursor right 4>@indexentry<key ")@g(b), cursor right 4",entry "@g(b)), cursor right 4",number>
@index<@g(e)), cursor right 8>@indexentry<key ")@g(e), cursor right 8",entry "@g(e)), cursor right 8",number>
@index<], cursor right 16>
@index<@g(a)], cursor right 32>@indexentry<key "]@g(a), cursor right 32",entry "@g(a)], cursor right 32",number>
@index<@g(b)], cursor right 64>@indexentry<key "]@g(b), cursor right 64",entry "@g(b)], cursor right 64",number>
@index<@g(e)], cursor right 128>@indexentry<key "]@g(e), cursor right 128",entry "@g(e)], cursor right 128",number>
)@\Cursor right

@index[/, cursor up]
@index(Cursor up)
@index(Up cursor)
@index<@g(a)/, cursor up 2>@indexentry<key "/@g(a), cursor up 2",entry "@g(a)/, cursor up 2",number>
@indexentry(key "/@g(a), cursor up 2",entry "@g(a)/, cursor up 2",number)
@index<@g(b)/, cursor up 4>@indexentry<key "/@g(b), cursor up 4",entry "@g(b)/, cursor up 4",number>
@indexentry(key "/@g(b), cursor up 4",entry "@g(b)/, cursor up 4",number)
@index<@g(e)/, cursor up 8>@indexentry<key "/@g(e), cursor up 8",entry "@g(e)/, cursor up 8",number>
@indexentry(key "/@g(e), cursor up 8",entry "@g(e)/, cursor up 8",number)
@index<@z(), cursor up 16>
@index<@g(a)@z(), cursor up 32>@indexentry<key "@z()@g(a), cursor up 32",entry "@g(a)@z(), cursor up 32",number>
@indexentry(key "@z()@g(a), cursor up 32",entry "@g(a)@z(), cursor up 32",number)
@index<@g(b)@z(), cursor up 64>@indexentry<key "@z()@g(b), cursor up 64",entry "@g(b)@z(), cursor up 64",number>
@indexentry(key "@z()@g(b), cursor up 64",entry "@g(b)@z(), cursor up 64",number)
@index<@g(e)@z(), cursor up 128>@indexentry<key "@z()@g(e), cursor up 128",entry "@g(e)@z(), cursor up 128",number>
@indexentry(key "@z()@g(e), cursor up 128",entry "@g(e)@z(), cursor up 128",number)
/@\Cursor up

@index[\, cursor down]
@index(Cursor down)
@index(Down cursor)
@index<@g(a)\, cursor down 2>@indexentry<key "\@g(a), cursor down 2",entry "@g(a)\, cursor down 2",number>
@index<@g(b)\, cursor down 4>@indexentry<key "\@g(b), cursor down 4",entry "@g(b)\, cursor down 4",number>
@index<@g(e)\, cursor down 8>@indexentry<key "\@g(e), cursor down 8",entry "@g(e)\, cursor down 8",number>
@index<@k(forall), cursor down 16>
@index<@g(a)@k(forall), cursor down 32>@indexentry<key "@k(forall)@g(a), cursor down 32",entry "@g(a)@k(forall), cursor down 32",number>
@index<@g(b)@k(forall), cursor down 64>@indexentry<key "@k(forall)@g(b), cursor down 64",entry "@g(b)@k(forall), cursor down 64",number>
@index<@g(e)@k(forall), cursor down 128>@indexentry<key "@k(forall)@g(e), cursor down 128",entry "@g(e)@k(forall), cursor down 128",number>
\@\Cursor down
@leave(description)

In addition, the following operations will reposition the cursor:
@enter(description)
@index(@g(a)C, center cursor)
@indexentry(key "C@g(a), center cursor",entry "@g(a)C, center cursor",number)
@index(Cursor, centering)
@index(Centering cursor)
@g(a)C@\Move the cursor to the physical center of the screen.

@index(@g(b)C, center cursor)
@indexentry(key "C@g(b), center cursor",entry "@g(b)C, center cursor",number)
@g(b)C@\Moves the cursor and the point on the drawing on which it is
set to the center of the screen.

@label(EpsilonC)
@index(Offset of drawing)
@index(@g(e)C, center cursor)
@indexentry(key "C@g(e), center cursor",entry "@g(e)C, center cursor",number)
@g(e)C@\Sets the @u[offset] and the cursor position to be (0,0).
Both the cursor and the logical (0,0) are moved to the center of
the screen. 
The @u[offset] represents the part of the drawing which will
be in the center of the screen when the drawing is read in
and first displayed.  The offset is set to the current cursor
position, and then the cursor is moved to the center of
the screen.  The effect of this command is undone by the
XPICCEN command, page @pageref(XPICCEN), which computes the
offset to be the "center of gravity" of the drawing.  The
offset of the drawing may also be changed by the
XOFF (page @pageref(XXOFF)) and YOFF (page @pageref(XYOFF))
commands.

XMOVE@\Moves the cursor in half-grid steps relative to its current
position; asks for the number of steps in the X and Y directions.
See also page @pageref(XMOVE).

@leave(description)

@chap(File manipulation)

It is useful to have TEMP:, or your selected private pack,  first in the search list, as SUDS does
not know how to parse device names.  If DSKC: fills up, you lose.

@sec(File output)

@enter(description)
@index(DRW file, writing)
@index(Extension DRW)
@label(AlphaW)
@index(@g(a)W, write DRW file)
@indexentry(key "W@g(a), write DRW file",entry "@g(a)W, write DRW file",number)
@label(controlW)
@emphasize[@g(a)W]@\Write a drawing file.  If the filename has no extension, the
default extension .DRW is used.  The symbol "exists", @k(exists),
@index(Exists, file)
@index(@k(exists), filename)
@indexentry(key "E, filename",entry "@k(exists), filename",number)
can be used to mean "The last filename used"; this is displayed
at the top of the screen as "@k(exists)=<filename>".  If any filename
other than the last input filename is used, you will asked to
confirm an overwrite.
This command is similar  to the XEWRITE command described on
page @pageref(XEWRITE), except XEWRITE will not prompt for
a file name.  In addition, a @g(a)W can be automatically
performed by setting XAUTOWRITE mode, described on page @pageref(XAUTOWRITE).  This is usually done in an initialization macro.

@index(WD file, writing)
@index(Wirelist file, writing)
@index(Extension WD)
@label(MetaW)
@index(@g(b)W, write wirelist file)
@indexentry(key "W@g(b), write wirelist file",entry "@g(b)W, write wirelist file",number)
@g(b)W@\Write a wirelist file, extension .WD.
This is similar to the XELIST command described on page @pageref(XELIST);
however, if the filename is given as @k(exists),  it will use the
@k(exists)  PPN whereas XELIST ignores the PPN part
of the @k(exists) filename and uses
the login PPN.
See also XMAKEWD (page @pageref(XMAKEWD)).

@index(PLT file, writing)
@index(Plot file, writing)
@index(Extension PLT)
@index(@g(e)W, write plot file)
@indexentry(key "W@g(e), write plot file",entry "@g(e)W, write plot file",number)
@label(metacontrolW)
@emphasize[@g(e)W]@\Write plot file, extension .PLT.
This is similar to the XEPLOT command described on page @pageref(XEPLOT);
however, if the filename is given as @k(exists),  it will use the
@k(exists)  PPN whereas XEPLOT ignores the PPN part
of the @k(exists) filename and uses
the login PPN.
@leave(description)


The following operations produce listings of body types:

@enter(description)
@index(@g(a)L, list body types on TTY)
@indexentry(key "L@g(a), list body types on TTY", entry "@g(a)L, list body types on TTY",number)
@index(Body types, listing)
@g(a)L@\List body types on TTY.  For library bodies, the library name
is also listed.

@index(@g(b)L, list body types on file)
@indexentry(key "L@g(b), list body types on file",entry "@g(b)L, list body types on file",number)
@index(Body types, listing)
@g(b)L@\List body types in a file with default extension .LST.
Also list the plot label strings.
@leave(description)

The following commands are summarized here with references to detailed
descriptions.
@enter(description)
XAUTOSAVE@\Checkpoints by saving the core image (not recommended); see page @pageref(XAUTOSAVE).

@emphasize[XAUTOWRITE]@\Checkpoints drawing with @g(a)W; see page @pageref(XAUTOWRITE).

XELIST@\Similar to @g(b)W; see page @pageref(XELIST)

XEPLOT@\Similar to @g(e)W; see page @pageref(XEPLOT)

XESAVE@\Checkpoints by saving the core image; see page @pageref(XESAVE).

XEWRITE@\Identical to @g(a)W; see page @pageref(XEWRITE)

XMAKEWD@\Generates a WD file if necessary; see page @pageref(XMAKEWD).

XSETWRT@\Writes out the closest set; see page @pageref(XSETWRT)

@emphasize[XWMACRO]@\Writes out macros and variables; see page @pageref(XWMACRO).

XWRTSET@\Same as SETWRT.
@leave(description)

@sec(File input)

@enter(description)
@index(@@, XDSKIN)
@@@\Same as "XDSKIN<crlf>"; see page @pageref(XDSKIN).

@index(@g(a)I, input body definitions)
@indexentry(key "I@g(a), input body definitions",entry "@g(a)I, input body definitions",number)
@index(Body definitions, inputting)
@g(a)I@\Input body definitions from a drawing file.  Normally,
this is @u[not] used for drawings; libraries are used
instead.  See XGETLIB, page @pageref(XGETLIB), and chapter
@ref(Libraries), page @pageref(libraries).    This allows you to
define bodies once and use them in several  drawings.
Also useful for collecting body definitions into a library (see
chapter @ref(libraries), page @pageref(LibAlphaI)).
To extract a specific body definition, see XGETBOD, page @pageref(XGETBOD).

@index(@g(b)I, input a drawing)
@indexentry(key "I@g(b), input a drawing",entry "@g(b)I, input a drawing",number)
@label(BetaI)
@index(DRW file, reading)
@emphasize[@g(b)I]@\Input a drawing, default extension .DRW.

@index(@g(e)I, input body definitions)
@indexentry(key "I@g(e), input body definitions",entry "@g(e)I, input body definitions",number)
@index(Body definitions, inputting)
@g(e)I@\Input body definitions only.  Similar to  @g(a)I, except
that when a conflict arises (body
already exists), replacement is automatically effected by a
geometric mapping.

@index(DSKIN)@index(XDSKIN)

@index(Command input from file)
XDSKIN@\Uses a file instead of the TTY for commands; see page @pageref(XDSKIN).

@index(DSKINH)@index(XDSKINH)
XDSKINH@\A variant of DSKIN; see page @pageref(XDSKINH).

@index(XGETBOD)
@index(GETBOD)
XGETBOD@\Extract a body definition from a file; see page @pageref(XGETBOD).

@index(GETLIB)
@index(XGETLIB)
@emphasize[XGETLIB]@\Reads in body definitions from a library file, see page
@pageref(XGETLIB).

@index(IFLUSH)@index(XIFLUSH)
XIFLUSH@\Flushes unfinished disk input before the EOF; see page @pageref(XIFLUSH).

@index(IMACRO)@index(XIMACRO)
@emphasize[XIMACRO]@\Reads in a macro file; see page @pageref(XIMACRO).
@leave(description)

@chap(Extended commands)
These commands are entered by typing the command X,
@index(X, command)
after which the program asks "Well?" (or some other
snappy question), and then entering the
command name.  Not all commands may be legal in all modes.

Note: due to the inability of the author(s) to write any prose
about any of these commands, some of the descriptions are
quite short.  The editor of this manual was in many cases
unable to determine the purpose of some of these commands
without reading the source code, a task for which time and
knowledge were both lacking.

The current list was determined, in part,  by reading the dispatch table in
the D source, and attempting to execute the commands.
@enter(description)
@label(XAMACRO)
@index(XAMACRO)
@index(AMACRO)
@index(Macro, altering)
@index(Altering macro)
@emphasize[AMACRO]@\Asks for a macro name; if it exists, permits you to
alter it.  This is described more fully in section @ref(Altermode) and
section @ref(macros).

@label(XAUTHOR)
@index(Plot box, Author)
@index(Plot box, Drawn by)
@index(XAUTHOR)
@index(AUTHOR)
@emphasize[AUTHOR]@\Provides the "drawn by" information for the plotting of wirelists.

@index(X-AUTHOR)
@indexentry(key "XAUTHOR-",entry "X-AUTHOR",number)
@index(-AUTHOR)
@indexentry(key "AUTHOR-",entry "-AUTHOR",number)

-AUTHOR@\Stores the author text in a macro.


@label(XAUTOSAVE)
@index(AUTOSAVE)
@index(XAUTOSAVE)
AUTOSAVE@\Asks "How many commands between ESAVEs?" and then
performs an XESAVE every time that many top-level commands have
been processed.
Not implemented at CMU.

@index(X-AUTOSAVE)@indexentry(key "XAUTOSAVE-",entry "X-AUTOSAVE",number)
@index(-AUTOSAVE)@indexentry(key "AUTOSAVE-",entry "-AUTOSAVE",number)
-AUTOSAVE@\Disables XAUTOSAVE mode.

@label(XAUTOWRITE)
@index(AUTOWRITE)
@index(Checkpointing)
@emphasize[AUTOWRITE]@\Asks how many commands between EWRITES? and will then
do an XEWRITE when that many top-level (not in macro) commands have
been processed.  This is the basic checkpointing mechanism.  Recommended
values are between 30 and 50 unless you really trust the GDP.

@index(X-AUTOWRITE)@indexentry(key "XAUTOWRITE-",entry "X-AUTOWRITE",number)
@index(-AUTOWRITE)@indexentry(key "AUTOWRITE-",entry "-AUTOWRITE",number)
-AUTOWRITE@\Disables XAUTOWRITE mode.

@label(XBOARD)
@index(XBOARD)
@index(BOARD)
BOARD@\Defines the board type to be used for the circuit.  This
is important since it controls the format of edge connector
and header pin names.  The currently recognized boards are
described in chapter @ref(boards), page @pageref(boards).

@label(XBOOP)
@index(XBOOP)@index(BOOP)
BOOP@\Asks for the time in seconds after which to BOOP.  If that
many seconds elapse between the input of the last character
and going into input wait for the next, the booper is BOOPed.
Useful to let you know when a long computation has finished.

@index(X-BOOP)@indexentry(key "XBOOP-",entry "X-BOOP",number)
@index(-BOOP)@indexentry(key "BOOP-",entry "-BOOP",number)
-BOOP@\Disables BOOPing.

@label(XBRIGHT)
@index(XBRIGHT)
@index(BRIGHT)
BRIGHT     Sets the normal brightness (one digit, or <cr> for no change)
and the additional blinking brightness (one digit, or <cr> for no change).
The additional blinking brightness refers to the brightness of
flashing items.

@index(X-BRIGHT)@indexentry(key "XBRIGHT-",entry "X-BRIGHT",number)@index(-BRIGHT)@indexentry(key "BRIGHT-",entry "-BRIGHT",number)
-BRIGHT@\Sets the brightness parameters to their initial startup values.


@label(XBTEXT)
@index(XBTEXT)@index(BTEXT)
BTEXT@\Enable body text display independent of XTEXT/X-TEXT mode (page
@pageref(XTEXT)).

@index(X-BTEXT)@indexentry(key "XBTEXT-",entry "X-BTEXT",number)@index(-BTEXT)@indexentry(key "BTEXT-",entry "-BTEXT",number)
-BTEXT@\Disable body text display separate from XTEXT/X-TEXT mode.


@label(XCBOX)
@index(CBOX)
@index(XCBOX)
CBOX@\Enables drawing of boxes around connector pin designations.
To assign connector pins, see @g(a)N in point mode, page @pageref(AlphaNPoint).
This is the default mode.

@index(-CBOX)@indexentry(key "CBOX-",entry "-CBOX",number)@index(X-CBOX)@indexentry(key "XCBOX-",entry "X-CBOX",number)
-CBOX@\Disables XCBOX mode.

@label(XCENTER)
@index(XCENTER)
@index(CENTER)
CENTER@\Centers flashing lines and sets appropriate scale factor to
see all flashing pins.  This is done both when you type the command
(if any pins are flashing) and when any new ones start flashing.

@index(X-CENTER)@indexentry(key "XCENTER-",entry "X-CENTER",number)
@index(-CENTER)@indexentry(key "CENTER-",entry "-CENTER",number)
-CENTER@\Disables XCENTER mode.

@label(XCEXCHANGE)
@index(XCEXCHANGE)
@index(CEXCHANGE)

CEXCHANGE@\Exchanges the backup connector pin name <<What's a backup connector and why should I care??>> with the current connector pin name.
A backup pin name is set whenever the current connector pin name is
a "U" pin and the one being set is not.  

@label(XCHANGE)
@index(XCHANGE)
@index(CHANGE)
@index(Signal name, changing)@index(Renaming a signal)

CHANGE@\Changes a signal name; asks for both the old signal
name and the new signal name.  To change a large number of
signal names, the ICHANGE command (page @pageref(XICHANGE))
may be used.

@label(XCLEAR)
@index(XCLEAR)@index(CLEAR)
@emphasize[CLEAR]@\Deletes "all" bodies, points, sets, and definitions of
all bodies.  Resets the screen parameters to their defaults
of program startup.  Flags like "EXACT" for exact  case match (pages @pageref(XEXACT) and @pageref(Pattern)) or
"OUTSIDE" (pin numbers outside body; page @pageref(XOUTSIDE)) are not reset.
Macro definitions are retained.

@label(XCLOCATE)
@index(CLOCATE)
@index(XCLOCATE)
CLOCATE@\Short dashed lines, one horizontal and one vertical, indicate
the current cursor position.

@index(-CLOCATE)@indexentry(key "CLOCATE-",entry "-CLOCATE",number)@index(X-CLOCATE)@indexentry(key "XCLOCATE-",entry "X-CLOCATE",number)
-CLOCATE@\Disable  XCLOCATE mode.

@label(XCLOCS)
@index(CLOCS)@index(XCLOCS)
CLOCS@\Enable plotting of connector pin locations (if CPINS is enabled).

@index(-CLOCS)@indexentry(key "CLOCS-",entry "-CLOCS",number)@index(X-CLOCS)@indexentry(key "XCLOCS-",entry "X-CLOCS",number)
-CLOCS@\Disable  XCLOCS mode.


@label(XCLOSE)
@index(XCLOSE)@index(CLOSE)
CLOSE@\Closes a file entered by XDSKOUT (page @pageref(XDSKOUT)).

@label(XCOUNT)
@index(XCOUNT)
@index(COUNT)
COUNT@\Tells how many points there are in the entire drawing.  Also
tells how many instances of each type of body in the entire drawing.


@label(XCPINS)
@index(CPINS)@index(XCPINS)
CPINS@\Enable plotting of connector pins.

@index(-CPINS)@indexentry(key "CPINS-",entry "-CPINS",number)@index(X-CPINS)@indexentry(key "XCPINS-",entry "X-CPINS",number)
-CPINS@\Disable plotting of connector pins.

@label(XCURBRT)
@index(CURBRT)
@index(XCURBRT)
@index(Cursor, brightness)
CURBRT@\Sets cursor brightness.

@index(-CURBRT)@indexentry(key "CURBRT-",entry "-CURBRT",number)@index(X-CURBRT)@indexentry(key "XCURBRT-",entry "X-CURBRT",number)
-CURBRT@\Sets cursor brightness to its default startup value.


@label(XCURSOR)
@index(XCURSOR)
@index(CURSOR)
CURSOR@\Enable light pen tracker, or the "X" device displayed  on GDPs.

@index(X-CURSOR)@indexentry(key "XCURSOR-",entry "X-CURSOR",number)@index(-CURSOR)@indexentry(key "CURSOR-",entry "-CURSOR",number)
-CURSOR@\Disable CURSOR.

@label(XDANGLE)
@index(XDANGLE)
@index(DANGLE)
DANGLE@\Finds all of the points in the drawing which satisfy one
of the following conditions:
@enter(itemize)
Two, and only two, collinear lines (point in the middle of a line)

One line, and no text or connector pin associated

Text and no lines

No text or lines

Connector pin and no lines
@leave(itemize)
See also DELNULL, page @pageref(XDELNULL).


@label(XDCODE)
@index(XDCODE)
@index(DCODE)
DCODE@\Sets the drawing code for the plot program.  This string
should be no more than two letters.  It indicates the type of
drawing this is.  If no string is set, "CS"
@index(CS, DCODE value)
will be used, meaning "Circuit Schematic".  Before inventing
a new code, see if one already exists.

@index(X-DCODE)@indexentry(key "XDCODE-",entry "X-DCODE",number)
@index(-DCODE)@indexentry(key "DCODE-",entry "-DCODE",number)
-DCODE@\Stores the drawing code in a macro.


@label(XDDT)
@index(XDDT)
@index(DDT)
DDT@\ Enters DDT, if present.  To return, type R$G.  Foo.


@label(XDEFPINS)
@index(XDEFPINS)
@index(DEFPINS)
@emphasize[DEFPINS]@\ Enable displaying of default pin names from the body definition.  This is used when creating bodies or other times when one is
interested in pin numbers.  Note that "default pin names" are not the
same as "real pin names" if more than one circuit is packed to an IC.

@index(X-DEFPINS)@indexentry(key "XDEFPINS-",entry "X-DEFPINS",number)
@index(-DEFPINS)@indexentry(key "DEFPINS-",entry "-DEFPINS",number)
@emphasize[-DEFPINS]@\ Disable displaying of default pin names.

@label(XDELLIB)
@index(DELLIB)
@index(XDELLIB)
@index(Library, deleting)
@index(Deleting library)
@emphasize[DELLIB]@\ Deletes all references to bodies in the library you name,
and deletes the pointer to the library.  Note that if any of
the bodies in the library have been used in the current drawing,
they disappear.  To delete the library and references without
deleting the bodies in the drawing, see XLOCLIB (page @pageref(XLOCLIB)).

@label(XDELNULL)
@index(DELNULL)
@index(XDELNULL)
@index(Null points, marking)
@index(Marking null points)
@index(Null points, deleting)
@index(Deleting null points)
DELNULL@\ Marks or deletes null points.  Asks which one you wish
to do, then does it.  A null point is one with no lines, no
text, and no pin connections.  If you choose to mark points, use
the @g(a)F command in point mode 
(page @pageref(AlphaFPoint))
@index(@g(a)F, point mode)
to find them afterwards.

@label(XDELSET)
@index(Deleting all sets)
@index(DELSET)
@index(XDELSET)
@index(Sets, deleting)
@index(Deleting sets)
DELSET@\ Deletes all sets.  Does not delete their contents!

@label(XDELTYP)@index(DELTYP)@index(XDELTYP)
@index(Body definition, deleting)@index(Body, deleting)
@index(Deleting a body)@index(Deleting a body definition)
DELTYP@\ Asks for a  body-name, then deletes all instances
of that body type.   If the body type is not from a library, it
will also delete its definition.
In particular, this is used to delete a definition of a body when
editing a library file.  


@label(XDIAMONDS)
@index(XDIAMONDS)
@index(DIAMONDS)
@emphasize[DIAMONDS]@\ This enables the plotting of little blobs (called
"diamonds") at the intersection of four connnected line segments.
Drawing four line segments in which diamonds are required to disambiguate
from a crossover is probably a bad idea anyway.  It also asks if you
want to enable diamonds at the intersection of three lines.  This
produces slightly nicer looking drawings, so it is recommended,
although it is not the default.
To save display space, diamonds are not shown on the screen.

@index(-DIAMONDS)@indexentry(key "DIAMONDS-",entry "-DIAMONDS",number)@index(X-DIAMONDS)@indexentry(key "XDIAMONDS-",entry "X-DIAMONDS",number)
-DIAMONDS@\ Disable XDIAMONDS mode.



@label(XDISLOC)
@index(XDISLOC)@index(DISLOC)
DISLOC@\ See edit mode, page @pageref(DislocStuff).

@index(X-DISLOC)@indexentry(key "XDISLOC-",entry "X-DISLOC",number)@index(-DISLOC)@indexentry(key "DISLOC-",entry "-DISLOC",number)
-DISLOC@\ See edit mode, page @pageref(DisLocStuff).


@label(XDMACRO)
@index(Deleting macro)
@index(Macro, deleting)
@index(XDMACRO)@index(DMACRO)

@emphasize[DMACRO]@\ Delete macro.  Asks for a macro name.  Must be at macro
level 0 to do this (i.e., no macros in progress).

@label(XDPY)
@index(XDPY)@index(DPY)
DPY@\ Enable the display.

@index(-DPY)@indexentry(key "DPY-",entry "-DPY",number)
@index(X-DPY)@indexentry(key "XDPY-",entry "X-DPY",number)

X-DPY@\ Turn off display.  This is the default when running from
a non-GRAPHICs terminal.  

@label(XDRAWN)
@index(Plot box, DRN.)
@index(DRAWN)
@index(XDRAWN)
DRAWN@\ This sets a signature file name (default
extension .SIG)
@index(SIG extension)@index(Extension SIG)
which will be plotted in the "DRN." box by the plot program.
The date on which this command was issued will be plotted
in the "date" box.

@index(X-DRAWN)@indexentry(key "XDRAWN-",entry "X-DRAWN",number)
@index(-DRAWN)@indexentry(key "DRAWN-",entry "-DRAWN",number)
-DRAWN@\ Store the DRAWN text in a macro.


@label(XDSKIN)
@index(XDSKIN)@index(DSKIN)
@index(Extension TXT)@index(TXT extension)

DSKIN@\ Asks for a file name (default extension .TXT).  Then uses the file in place of
TTY input.  Use the same format as input from TTY.  The characters
@g(a), @g(b) and @g(e) can be used for control, meta, and meta-control.
Disk input breaks, where disk input is suspended and
control is given to the terminal,  can be generated by a character specified
in the ;Y macro command (page @pageref(SemicolonY)).  If an error occurs which would cause
a ??? to be generated, an automatic disk input break will
be generated.
Note that "@@" @index(@@, XDSKIN) is equivalent to XDSKIN<crlf>.


@label(XDSKINH)
@index(XDSKINH)@index(DSKINH)
DSKINH@\ DSKIN HOLD.  Exactly like XDSKIN, except that after setting up
the input file, it generates a disk input break.

@label(XDSKOUT)
@index(XDSKOUT)@index(DSKOUT)
DSKOUT@\ Asks for a filename.  All TTY input is copied to the
output file; the file is now in a form to use with XDSKIN.
Use the XCLOSE command (page @pageref(XCLOSE))  to terminate XDSKOUT.


@label(XELIST)
@index(XELIST)@index(ELIST)
@index(Wirelist, writing)
@index(WD file, writing)
ELIST@\Writes a wirelist file (extension .WD) for the current
@k(exists) name.  The  PPN of the @k(exists) name  is @i(not) used; the login
ppn is used instead.  Therefore, this command is not identical
to @g(b)W, described on page @pageref(metaW).

@label(XENAME)
@index(XENAME)@index(ENAME)
@index(@k(exists), changing value of)
@index(Filename, changing)
ENAME@\Accepts a filename to use as the @k(exists) name.  A <cr> will clear
the @k(exists) name.

@index(X-ENAME)@indexentry(key "XENAME-",entry "X-ENAME",number)@index(-ENAME)@indexentry(key "ENAME-",entry "-ENAME",number)
@index(@k(exists), clearing)

-ENAME@\Clears the @k(exists) name.


@label(XENGINEER)
@index(Plot box, ENG.)
@index(XENGINEER)
@index(ENGINEER)
ENGINEER@\Sets a signature file name (default extension .SIG)
@index(SIG extension)
@index(Extension SIG)
which will be plotted in the box labelled "ENG."

@index(X-ENGINEER)@indexentry(key "XENGINEER-",entry "X-ENGINEER",number)
@index(-ENGINEER)@indexentry(key "ENGINEER-",entry "-ENGINEER",number)
-ENGINEER@\Stores the ENGINEER text in a macro.


@label(XEPLOT)
@index(XEPLOT)
@index(EPLOT)
@index(Plot file, writing)
@index(PLT file, writing)
EPLOT@\Writes a plot file (extension .PLT) for the current default
(@k(exists)) name.  The default PPN is @i(not) used; the current
area is used instead.  Therefore, this command is not identical
to @g(e)W, described on page @pageref(metacontrolW).



@label(XESAVE)
@index(Saving core image)
@index(ESAVE)@index(SAVE)@index(Extension DMP)
ESAVE@\Does a SAVE of the core image (extension .DMP)  with the @k(exists) filename.

@label(XEWRITE)
@index(EWRITE)
@index(DRW file, writing)
@index(XEWRITE)
@index(DRX extension)@index(Extension DRX)
EWRITE@\Writes out the drawing (DRX file) with the @k(exists) name.  This is
almost the same as the @g(a)W command (page @pageref(controlW)).
The DRX extension is used instead of the DRW extension so that
an inconsistent drawing will not be written.

@label(XEXACT)
@index(XEXACT)
@index(EXACT)
EXACT@\Makes the match routine for all @g(b)F and @g(e)F commands,
F in alter mode, and "FLASH", XFDIP, etc. do exact compare.
@index(@k(doublearrow), <crlf>)@indexentry(key "Crlf, @k(doublearrow)",entry "<Crlf>, @k(doublearrow)",number)
Does not do case folding  or treat @k(doublearrow) as space.
See also XSPACES, page @pageref(XSPACES).

@index(-EXACT)@indexentry(key "EXACT-",entry "-EXACT",number)
@index(X-EXACT)@indexentry(key "XEXACT-",entry "X-EXACT",number)
-EXACT@\Turns off EXACT mode.  This is the default.
Treats upper and lower case as identical and treats @k(doublearrow) as a space.

@label(xexit)
@index(XEXIT)@index(EXIT)

@emphasize(EXIT)@\Exits to the monitor.  Does not clear the screen.
Use XCLEAR (page @pageref(xclear)) to clear the
screen.


@label(XFDIP)
@index(XFDIP)
@index(FDIP)
@index(Find, of DIPTYPEs)
@index(DIPTYPEs, finding)

FDIP@\Asks for a DIPTYPE name, then finds all bodies in the drawing
which use that dip type, and marks them for use by the @g(a)F command
@index(@g(a)F, body mode)
@indexentry(key "F@g(a), body mode",entry "@g(a)F, body mode",number)
in body mode (page @pageref(AlphaFBody)).

@label(XFIXALL)
@index(XFIXALL)
@index(FIXALL)

FIXALL@\Does a @g(b)F@index(@g(b)F, pin mode) to all bodies (page @pageref(BetaFBody)).

@label(XFIXEM)
@index(XFIXEM)
@index(FIXEM)

FIXEM@\?

@label(XFLASH)
@index(XFLASH)
@index(FLASH)

FLASH@\?

@label(XFLDIP)
@index(XFLDIP)
@index(FLDIP)

FLDIP@\Asks for a DIPTYPE name, then finds all body defintions in the drawing which
have that name.  Use XFLNEXT to edit these bodies.

@label(XFLNAME)
@index(XFLNAME)
@index(FLNAME)

FLNAME@\Asks for a body name, then finds all body definitions in the
drawing which use that name.  Use XFLNEXT to edit these bodies.

@label(XFLNEXT)
@index(FLNEXT)
@index(XFLNEXT)

FLNEXT@\If not already in edit or alter mode, finds the next marked
body located by XFLDIP or XFLNAME, and enters the editor with this body.

@label(XFLPIN)
@index(FLPIN)
@index(XFLPIN)

FLPIN@\Finds a set of pins matching the search string.  See edit-pin mode, page @pageref(PinModeFLPin).

@label(XFLPNEXT)
@index(XFLPNEXT)
@index(FLPNEXT)

FLPNEXT@\Finds the next pin in the set determined by FLPIN.  See edit-pin mode, page @pageref(PinMode).

@label(XFSIGNAL)
@index(XFSIGNAL)
@index(FSIGNAL)

FSIGNAL@\Finds a set of signal names.  

@label(XGETBOD)
@index(XGETBOD)
@index(GETBOD)

GETBOD@\Asks for a body type name and a file name, then will
attempt to read in the body from that file using the normal
body input protocols (may ask about replacement, etc.).


@label(XGETLIB)
@index(GETLIB)
@index(XGETLIB)
@index(Library, inputting)

@emphasize[GETLIB]@\Asks for a library filename (default extension
.DRW), then 
maintains a pointer to the file.  Redundant
library references are ignored when possible.  Once a library
is associated with a drawing, its body definitions will be
available for use each time the drawing is read in (see @g(b)I, page @pageref(BetaI)).  This will
save substantial space in storing the drawing since the
body definitions will not be stored with each drawing.
See also XDELLIB (page @pageref(XDELLIB)) and XLOCLIB (page @pageref(XLOCLIB)).
For more information on libraries, see chapter @ref(libraries), page
@pageref(libraries).

@label(XHELP)@index(XHELP)@index(HELP)

HELP@\Prints a list of the extended commands which are
available.

@label(XHIDE)
@index(XHIDE)
@index(HIDE)
HIDE@\(Whatever this does, UNHIDE (page @pageref(XUNHIDE)) undoes it.

@label(XICHANGE)
@index(XICHANGE)
@index(ICHANGE)

ICHANGE@\Reads a signal-name-change (.CHG) @index(CHG, extension)@index(Extension CHG) file.  Performs an XCHANGE (page @pageref(XCHANGE)) operation
on each signal name pair appearing in the file.

@label(XICPINS)
@index(XICPINS)
@index(ICPINS)

ICPINS@\Reads a connector-pin (.CPN) @index(CPN, extension)@index(Extension CPN) file.


@label(XIDEFS)
@index(XIDEFS)
@index(IDEFS)

IDEFS@\?


@label(XIDENTS)
@index(XIDENTS)
@index(IDENTS)

@emphasize[IDENTS]@\Enables the displaying of "hidden text" associated with a
body.  In particular, the body name and the DIPTYPE property  are usually
hidden, and this causes them to appear.
Text is hidden by the @g(a)K command, page @pageref(AlphaKtpmode).

@index(X-INDENTS)@indexentry(key "XINDENTS-",entry "X-INDENTS",number)
@index(-IDENTS)@indexentry(key "IDENTS-",entry "-IDENTS",number)
@emphasize[-IDENTS]@\Disables the displaying of hidden text.


@label(XIFLUSH)
@index(XIFLUSH)@index(IFLUSH)
IFLUSH@\Flushes disk input of XDSKIN or XDSKINH (page @pageref(XDSKIN)) before the end of the file.

@label(XIMACRO)
@index(XIMACRO)
@index(IMACRO)@index(Macro, reading)
@emphasize[IMACRO]@\Input macro file.  The file must have been written by
XWMACRO (page @pageref(XWMACRO)).  Defines all macros and variables
described by the file.

@label(XINIT)
@index(XINIT)
@index(INIT)
INIT@\Enables the calling of the INIT macro when a drawing is
read in.  This is the default state of this switch.  

@index(X-INIT)@indexentry(key "XINIT-",entry "X-INIT",number)
@index(-INIT)@indexentry(key "INIT-",entry "-INIT",number)
@index(INIT macro, disabling)
-INIT@\Disables the calling of the INIT macro; you do this if
you want to change the INIT macro before it executes (e.g., you've
screwed it up).

@label(XLIBMAP)
@index(XLIBMAP)
@index(LIBMAP)
@index(Library, renaming)
LIBMAP@\Used when converting from one library to another.  Asks for
the old library name and the new library name.  You must type
in an explicit PPN, since the default is set to the login ppn,
@i[not from the current directory path!]  This sets up a mapping
of library names.  When a library name is read from a DRW file,
the LIBMAP list is checked for an old library name that is the
same.  If one is found, the new library name is substituted.  To
clear a single mapping, give a null name for the new library
name.

@index(X-LIBMAP)@indexentry(key "XLIBMAP-",entry "X-LIBMAP",number)
@index(-LIBMAP)@indexentry(key "LIBMAP-",entry "-LIBMAP",number)
-LIBMAP@\Clears all library mappings.
To clear a single mapping, use XLIBMAP and  give a null name for the new library
name.

@label(XLIBPPN)
@index(XLIBPPN)
@index(LIBPPN)
LIBPPN@\Accepts a PPN which is used as the place to find the file
DIPS.DIP.
@index(DIPS.DIP)
This file contains all the DIP definitions: loading, fanout, etc.
The drawing program D uses it only to map pin numbers when assigning
bodies to IC packages.

@index(X-LIBPPN)@indexentry(key "XLIBPPN-",entry "X-LIBPPN",number)
@index(-LIBPPN)@indexentry(key "LIBPPN-",entry "-LIBPPN",number)
-LIBPPN@\Resets LIBPPN to null; will look at login ppn and
current directory path.

@label(XLIBTYP)
@index(XLIBTYP)
@index(LIBTYP)

LIBTYP@\Types out the names of all of the libraries; identical to
XTYPLIB (page @pageref(XTYPLIB)).


@label(XLINES)
@index(LINES)@index(XLINES)
LINES@\Enable displaying of lines.  This is the default mode.

@index(-LINES)@indexentry(key "LINES-",entry "-LINES",number)@index(X-LINES)@indexentry(key "XLINES-",entry "X-LINES",number)
-LINES@\Disable displaying of lines.  This is useful if you want to
check out body placement without actually seeing all the interconnects.

@label(XLMOVE)
@index(XLMOVE)
@index(LMOVE)
LMOVE@\This functions similarly to  XTMOVE (page @pageref(XTMOVE)) except
it applies to connector pin location offsets.

@label(XLOCATE)
@index(XLOCATE)@index(LOCATE)
LOCATE@\Dashed lines, slightly longer than those used in XCLOCATE,
are used to locate the "closest" thing.

@index(X-LOCATE)@indexentry(key "XLOCATE-",entry "X-LOCATE",number)@index(-LOCATE)@indexentry(key "LOCATE-",entry "-LOCATE",number)
-LOCATE@\Disable XLOCATE mode.

@label(XLOCLIB)
@index(XLOCLIB)
@index(LOCLIB)
LOCLIB@\Deletes all references to bodies in the library which is
named, and deletes a reference to the library file.  However,
any body which is currently being used in the drawing is made
local to the drawing, instead of disappearing as in XDELLIB 
(see page @pageref(XDELLIB)).


@label(XLOCS)
@index(LOCS)@index(XLOCS)
LOCS@\Enable display and plotting of body locations (physical locations on the board).

@index(X-LOCS)@indexentry(key "XLOCS-",entry "X-LOCS",number)@index(-LOCS)@indexentry(key "LOCS-",entry "-LOCS",number)
-LOCS@\Disable XLOCS mode.

@label(XLOWER)@index(XLOWER)@index(LOWER)

LOWER@\Sets the mode where lower-case letters are signficant
on input.

@index(X-LOWER)@indexentry(key "XLOWER-",entry "X-LOWER",number)@index(-LOWER)@indexentry(key "LOWER-",entry "-LOWER",number)

-LOWER@\Disables LOWER mode (default).  Lower case will be
folded to upper case on input.

@label(XLPROPS)
@index(LPROPS)
@index(XLPROPS)

@index(Properties, printing)

@emphasize[LPROPS]@\Prints out the properties associated with
the nearest body, or the current body being edited.  

@label(XLSIGNALS)
@index(LSIGNALS)
@index(LSIGNALS)
LSIGNALS@\Types out all the signal names associated with wires
in WIRLST@\<<What's WIRLST and how does anything get on it?>>


@label(XLTITLE)
@index(LTITLE)
@index(XLTITLE)
@emphasize[LTITLE]@\Lists all of the information for the plot box.
This includes project, title, and all other variables that have been
set.

@label(XLWINDOW)
@index(LWINDOW)
@index(XLWINDOW)
LWINDOW@\Any line segment which has one or more endpoints off the screen
is windowed by software.  This causes a noticeable increase in the
computing required to generate a picture, so do it only if you
are willing to pay the price!

@index(-LWINDOW)@indexentry(key "LWINDOW-",entry "-LWINDOW",number)@index(X-LWINDOW)@indexentry(key "XLWINDOW-",entry "X-LWINDOW",number)
-LWINDOW@\Disable XLWINDOW (and save time!)


@label(XMACRO)
@index(Macros, listing)
@index(Listing macros)
@index(XMACRO)
@index(MACRO)
@emphasize[MACRO]@\Lists the names of all defined macros.  If a "*" appears,
the macro will be saved with the drawing (see XSMACRO).


@label(XMAKEWD)
@index(XMAKEWD)@index(MAKEWD)
@index(WD file, writing)
MAKEWD@\This command is intended to be used as part of some macro or
command file which guarantees integrity of the wirelists with their
drawings.  When executed, it first sets body mode and does a clear.
It then asks for a drawing filename.  If the date of the WD file
which corresponds to the DRW file indicates that the DRW file is
newer, it reads the DRW file and produces a new WD file.  Of course
this can all be done interactively, but command files and macros
are clearly what was intended.  For an example of how to use
MAKEWD, see page @pageref(MAKEWDexample).

@label(XMAPLIB)
@index(MAPLIB)@index(XMAPLIB)

MAPLIB@\Same as XLIBMAP (page @pageref(XLIBMAP)).

@label(XMODLIB)
@index(XMODLIB)
@index(MODLIB)
MODLIB@\Caveat Emptor!!!  This command must be used @i[very] carefully.
It allows you to edit a body definition even though the body comes
from a library!  Note that this does not change the body definition
in the library, only in the local drawing.  The changes are not
permanent; unless you go back and make @i[exactly] the same changes
in the library, you are in trouble.


@label(XMODULE)
@index(Plot box, module)
@index(XMODULE)
@index(MODULE)
MODULE@\This sets the string for the module name.  This appears
in the plots in the "number" box, and will appear on the front of
wirelists.  It will be checked for consistency on each card.

@index(X-MODULE)@indexentry(key "XMODULE-",entry "X-MODULE",number)
@index(-MODULE)@indexentry(key "MODULE-",entry "-MODULE",number)
-MODULE@\Stores the module text in a macro


@label(XMOVE)
@index(XMOVE)
@index(MOVE)
MOVE@\Moves the cursor X,Y in half grid steps relative to its current
position.

@label(XMUNG)
@index(XMUNG)
@index(MUNG)
@emphasize[MUNG]@\Massage picture.  Tries to make all lines in the
drawing either horizontal or vertical.


@label(XNEXTHI)
@index(Plot box, Next higher rev.)
@index(XNEXTHI)
@index(NEXTHI)
NEXTHI@\Sets a string to appear in the "next higher assembly" box
in the plot box.

@index(-NEXTHI)@indexentry(key "NEXTHI-",entry "-NEXTHI",number)
@index(X-NEXTHI)@indexentry(key "XNEXTHI-",entry "X-NEXTHI",number)
-NEXTHI@\Stores the NEXTHI string in a macro.


@label(XNEWID)
@index(NEWID)@index(XNEWID)
NEWID@\Re-allocate all body and point ids.  This may be necessary
if a lot of set copying and deleting has been done.  


@label(XOFFALL)
@index(XOFFALL)@index(OFFALL)
@index(@g(e)Q, body mode)@index(@g(e)Z, body mode)
@indexentry(key "Q@g(e), body mode",entry "@g(e)Q, body mode",number)
@indexentry(key "Z@g(e), body mode",entry "@g(e)Z, body mode",number)
OFFALL@\Does a @g(e)Q and @g(e)Z to every point in the drawing.
See pages @pageref(EpsilonQPoint) and @pageref(EpsilonZpoint).

@label(XOFFLOCS)
@index(XOFFLOCS)
@index(OFFLOCS)

OFFLOCS@\This causes the location offsets for all body locations
currently set in this drawing to be set to a value from the body
definition;
  it also sets a flag which causes this offset of remain
with that of the definition.


@label(XOFFRIGHT)
@index(OFFRIGHT)
@index(XOFFRIGHT)
OFFRIGHT@\Causes any @g(e)Z commands to also set a flag which causes
the line to be moved to the right instead of moving the point to the
left.

@index(-OFFRIGHT)@indexentry(key "OFFRIGHT-",entry "-OFFRIGHT",number)@index(X-OFFRIGHT)@indexentry(key "XOFFRIGHT-",entry "X-OFFRIGHT",number)
-OFFRIGHT@\Turns off the OFFRIGHT feature (default).

@label(XOUTSIDE)
@index(XOUTSIDE)
@index(OUTSIDE)
OUTSIDE@\Sets a mode to put pin numbers on the outside during
pin placement.  See page @pageref(AlphaFPin).

@index(X-OUTSIDE)@indexentry(key "XOUTSIDE-",entry "X-OUTSIDE",number)@index(-OUTSIDE)@indexentry(key "OUTSIDE-",entry "-OUTSIDE",number)
-OUTSIDE@\Sets a mode to put pin numbers on the inside during
auto placing (default mode).

@label(XPAGE)
@index(Plot box, page)
@index(XPAGE)
@index(PAGE)
PAGE@\Sets the PAGE and OF values; these appear in the plot and
on the wirelist to show what print of a group this is.

@index(X-PAGE)@indexentry(key "XPAGE-",entry "X-PAGE",number)
@index(-PAGE)@indexentry(key "PAGE-",entry "-PAGE",number)
-PAGE@\Store the PAGE and OF values in a macro, separated by <crlf>.

@label(XPBOX)
@index(XPBOX)
@index(PBOX)
PBOX@\Asks for the box size (type a single letter A-D; you may
precede the letter with a V to get a vertical style box).
This scales the drawing and text to just fit into the box but
pretends to maintain the ratio between text and lines which is shown
on the screen.  It will not be scaled larger than that scale
which produces size 3 on the plotter.  Tells the scales before
asking for the file name.

@label(XPICCEN)
@index(Drawing, centering)@index(Centering the drawing)
@index(XPICCEN)
@index(PICCEN)
@emphasize[PICCEN]@\Moves the entire drawing so that the "center of gravity" of the
picture is in the center of the screen.


@label(XPINS)
@index(XPINS)@index(PINS)
PINS@\Enable display and plotting of pin numbers; this includes connector pins.

@index(X-PINS)@indexentry(key "XPINS-",entry "X-PINS",number)@index(-PINS)@indexentry(key "PINS-",entry "-PINS",number)
-PINS@\Disable XPINS mode.


@label(XPMACRO)
@index(XPMACRO)
@index(PMACRO)
@index(Macro, printing)
@emphasize[PMACRO]@\Print macro.  Asks for name of macro and displays it
on the terminal.

@label(XPREFIX)
@index(XPREFIX)
@index(PREFIX)
PREFIX@\Sets a string which is the reference part of the drawing number.
This appears after the variable part of the drawing number and is
separated by a dash.  At some point this may actually be checked against
all signal names which originate on this drawing to see that they
are prefixed correctly.

@index(X-PREFIX)@indexentry(key "XPREFIX-",entry "X-PREFIX",number)@index(-PREFIX)@indexentry(key "PREFIX-",entry "-PREFIX",number)
-PREFIX@\Stores the prefix text in a macro.

@label(XPROJECT)
@index(Plot box, project)
@index(XPROJECT)
@index(PROJECT)
@emphasize[PROJECT]@\Asks for a project name.  This is plotted in the plot box
in the "Project" box.  Although the program issues an error message
if the project is longer than eight characters, this error message
doesn't seem to affect the operation at all.

@index(X-PROJECT)@indexentry(key "XPROJECT-",entry "X-PROJECT",number)
@index(-PROJECT)@indexentry(key "PROJECT-",entry "-PROJECT",number)
-PROJECT@\Stores the PROJECT text in a macro.

@label(XPTEXT)
@index(XPTEXT)@index(PTEXT)
PTEXT@\Enable display of point text separate from body text.

@index(X-PTEXT)@indexentry(key "XPTEXT-",entry "X-PTEXT",number)@index(-PTEXT)@indexentry(key "PTEXT-",entry "-PTEXT",number)
-PTEXT@\Disable display of point text separate from body text.

@label(XRENAME)
@index(RENAME)@index(XRENAME)
@emphasize[RENAME]@\Asks for a current body name and a new body name.  If
the new body name is not already in use, the current body name
is changed to the new body name.  This is useful particularly to
people who are designing new bodies.


@label(XREVISE)
@index(Plot box, revision)
@index(XREVISE)@index(REVISE)
REVISE@\Set a string which is the revision level of the drawing.  This
string will also appear in plots in the box marked "Rev." and in
the front of wirelists.

@index(-REVISE)@indexentry(key "REVISE-",entry "-REVISE",number)@index(X-REVISE)@indexentry(key "XREVISE-",entry "X-REVISE",number)
-REVISE@\Store the revision line in a macro.


@label(XQUIT)
@index(XQUIT)
@index(QUIT)
@emphasize[QUIT]@\Leave macro alter mode (XAMACRO, page @pageref(XAMACRO)) without modifying
the original macro definition (changes are discarded).

@label(XRMACRO)
@index(XRMACRO)@index(RMACRO)
@index(Macro, renaming)
@emphasize[RMACRO]@\Rename a macro.  Ask for old name, then new name.
New name must not already be in use.

@label(XRPINID)
@index(XRPINID)@index(RPINID)
RPINID@\ Enable displaying of internal pin ids.  These are @i[not]
related to pin numbers, default pin numbers, etc., but are entirely
internal.  They are used, among other cases, when one is swapping
wires between two pins.

@index(-RPINID)@indexentry(key "RPINID-",entry "-RPINID",number)
@index(X-RPINID)@indexentry(key "XRPINID-",entry "X-RPINID",number)
-RPINID@\  Disable XRPINID mode.

@label(XRSPINID)
@index(XRSPINID)
@index(RSPINID)

RSPINID@\?

@label(XSCALE)
@index(SCALE)@index(XSCALE)
@emphasize[SCALE]@\Sets the scale factor.  Initial scale is 16, 12 is
usually better for most drawings, really complex ones would like 8.
Will ask for the desired scale factor.  Scale factor may also be
changed by the * and @z() commands; see page @pageref(Scaling).

@label(XSETCEN)
@index(XSETCEN)
@index(SETCEN)
SETCEN@\Recalculates the center of all sets.  See chapter @ref(Setmode), page @pageref(XSETCEN2).



@label(XSETLOC)
@index(XSETLOC)
@index(SETLOC)
SETLOC@\Sets the card slot for location of this card on the
backplane.  Asks if this is a permanent card location for this
drawing.  If it is, the information is stored in one place, otherwise
the information is spread through all locations of bodies and
connector pins in this drawing.
Not generally useful at CMU.

@index(X-SETLOC)@indexentry(key "XSETLOC-",entry "X-SETLOC",number)@index(-SETLOC)@indexentry(key "SETLOC-",entry "-SETLOC",number)
-SETLOC@\Not what you expect.  This clears the locations on
all bodies in the drawing.  If you want to undo SETLOC, type
"XSETLOC" and give a null reply!



@label(XSETPINS)
@index(XSETPINS)
@index(SETPINS)
SETPINS@\Does a @g(b)P to all bodies in the drawing; see page @pageref(BetaPBody).

@index(X-SETPINS)@indexentry(key "XSETPINS-",entry "X-SETPINS",number)
@index(-SETPINS)@indexentry(key "SETPINS-",entry "-SETPINS",number)
-SETPINS@\Clears all pin numbers so default pin names get used.  This is used if one plans to repack logic symbols into packages.


@index(DRW file, writing)
@index(Set, writing)
@label(XSETWRT)
@index(XSETWRT)@index(SETWRT)
SETWRT@\Performs a @g(a)W (see page @pageref(controlW) or @pageref(XEWRITE))
operation, but @i[only the pins and bodies in the closest set are written
to the file].

@label(XSHEET)
@index(Plot box, sheet)
@index(XSHEET)
@index(SHEET)
SHEET@\Sets the PAGE and OF values; these appear in the plot and
on the wirelist to show what print of a group this is.

@index(-SHEET)@indexentry(key "SHEET-",entry "-SHEET",number)
@index(X-SHEET)@indexentry(key "XSHEET-",entry "X-SHEET",number)
-SHEET@\Stores the PAGE and OF values in a macro, separated by <crlf>.

@label(XSHOWBOX)
@index(XSHOWBOX)
@index(SHOWBOX)
SHOWBOX@\Asks for input conforming to the syntax
@center(@example(<box style><drawing scale>/<plot scale>))
which indicate which box will be used, the drawing scale
at which the plot file will be made (the one it looks
good at) and the plot scale you will use later (usually
controlled by the character size you want).  This puts up
a box exactly where the plot program will plot it.  It
does not include the ID box at the bottom of the drawing, just
the usable space.  The box does not change relative to the
drawing when you shift or scale it.  If the drawing scale is
left out, the current scale is used.  If the plot scale is
left out, 2 is used.  The boxes may be A-E or VB-VE.

@label(XSITE)
@index(Plot box, Site)
@index(XSITE)@index(SITE)
SITE@\Asks for two strings, "Site line 1" and "Site line 2"; this
is used in the plotting program to identify the site.  This is
not used at CMU.

@index(X-SITE)@indexentry(key "XSITE-",entry "X-SITE",number)@index(-SITE)@indexentry(key "SITE-",entry "-SITE",number)
-SITE@\Stores the site information in a macro.


@label(XSIZE)
@index(XSIZE)
@index(SIZE)
SIZE@\Asks for the plotting scale, then tells the height and width
of the drawing and the smallest box which will fit around it.  Values
given are relative to the current drawing SCALE.

@label(XSLICE)@index(SLICE)@index(XSLICE)

XSLICE@\?

@label(XSMACRO)
@index(XSMACRO)@index(SMACRO)
@index(Macro, marking for saving)
@emphasize[SMACRO]@\Enable macro saving.  Asks for a macro name.  The
macro will then be saved in the DRW file.  The macro named
INIT @index(INIT, macro) is sometimes automatically given an XSMACRO.
See page @pageref(INITmacro) for how to use an INIT macro.

@index(X-SMACRO)@indexentry(key "XSMACRO-",entry "X-SMACRO",number)@index(-SMACRO)@indexentry(key "SMACRO-",entry "-SMACRO",number)
@emphasize[-SMACRO]@\Disables macro saving for the macro name given.

@label(XSPACES)
@index(XSPACES)
@index(SPACES)
SPACES@\Makes spaces significant characters in all comparisons.
This applies to all @g(a)F commands (see pages @pageref(AlphaFpoint), @pageref(AlphaFBody)), "FLASH", XFDIP, F in alter mode, etc.
See also page @pageref(pattern) and the XEXACT command, page @pageref(XEXACT).

@index(X-SPACES)@indexentry(key "XSPACES-",entry "X-SPACES",number)@index(-SPACES)@indexentry(key "SPACES-",entry "-SPACES",number)
-SPACES@\Spaces will not be significant, and @k(doublearrow) is treated as a space.

@label(XSTART)
@index(XSTART)
@index(START)

START@\?

@label(XTEXT)
@index(XTEXT)@index(X-TEXT)@indexentry(key "XTEXT-",entry "X-TEXT",number)
TEXT@\Enables the displaying of text.  This is the default mode.

@index(X-TEXT)@indexentry(key "XTEXT-",entry "X-TEXT",number)@index(-TEXT)@indexentry(key "TEXT-",entry "-TEXT",number)
@emphasize[-TEXT]@\Disable the displaying of text.  This is useful if you
have scaled a drawing down and want to see what it looks like without
signal names and other text cluttering it up.  See also XPTEXT (page
@pageref(XPTEXT)) and XBTEXT (page @pageref(XBTEXT))
if this seems like overkill.

@label(XTITLE)
@index(Plot box, title)
@index(XTITLE)
@index(TITLE)
@emphasize[TITLE]@\Asks for two strings, "Title line 1" and "Title line 2".
These are used in the plotting of the file for the drawing title.
At CMU, only the first title line is plotted so the second line can
(and should ) be null.  To see the current title, use XLTITLE.

@index(X-TITLE)@indexentry(key "XTITLE-",entry "X-TITLE",number)@index(-TITLE)@indexentry(key "TITLE-",entry "-TITLE",number)
-TITLE@\Stores the title lines in a macro, separated by <crlf>.


@label(XTMOVE)
@index(XTMOVE)
@index(TMOVE)
@emphasize[TMOVE]@\Move text offset.  This is the basic command for moving
text around!  The same cursor moving commands are used, but the offset 
is changed directly.  The cursor move command is not scaled, but
is 1, 2, 4, 8, 16, 32 or 64 increments (1 increment = 1/8 of a size 1
character width).  To exit this mode, type a <space> or <escape>.  Any
other character is an error.  This works for both point text and
edit text.
For connector pin location offsets, see XLMOVE, page @pageref(XLMOVE).


@label(XTRANSPOSE)
@index(XTRANSPOSE)@index(TRANSPOSE)
TRANSPOSE@\Asks for a body name, then an "L" or "R", and does a
@index(@g(b)T, transpose)
@g(b)T for all bodies of that name in the drawing.
See also page @pageref(BetaTBody).


@label(XTSLICE)@index(XTSLICE)@index(TSLICE)

TSLICE@\?

@index(X-TSLICE)@indexentry(key "XTSLICE-",entry "X-TSLICE",number)@index(-TSLICE)@indexentry(key "TSLICE-",entry "-TSLICE",number)

-TSLICE@\-?
@label(XTYPDEL)
@index(XTYPDEL)
@index(TYPDEL)
TYPDEL@\See XDELTYP, page @pageref(XDELTYP).

@label(XTYPLIB)
@index(XTYPLIB)
@index(TYPLIB)
@index(Library, listing names of)
TYPLIB@\Types all library filenames.

@label(XUNDERLINE)
@index(XUNDERLINE)@index(UNDERLINE)

UNDERLINE@\Sets a mode so that signal names (text) associated
with a point which terminates a line is adjusted so that
they are   underlined by the
signal wires they are attached to.


@index(-UNDERLINE)@index(X-UNDERLINE)
@indexentry(key "XUNDERLINE-",entry "X-UNDERLINE",number)
@indexentry(key "UNDERLINE-",entry "-UNDERLINE",number)

-UNDERLINE@\Turns off XUNDERLINE mode.


@label(XUNHIDE)@index(XUNHIDE)@index(UNHIDE)

UNHIDE@\Undoes an XHIDE (page @pageref(XHIDE)).

@label(XVARIABLE)
@index(XVARIABLE)
@index(VARIABLE)
VARIABLE@\Sets the string which is the variable part of the
drawing number.  It appears after the module name, separated by a
hyphen.

@index(X-VARIABLE)@indexentry(key "XVARIABLE-",entry "X-VARIABLE",number)
@index(-VARIABLE)@indexentry(key "VARIABLE-",entry "-VARIABLE",number)
-VARIABLE@\Stores the VARIABLE line in a macro.


@label(XWINDOW)
@index(XWINDOW)
@index(WINDOW)
WINDOW@\Limits operations to the on-screen portion of the drawing
(default).

@index(X-WINDOW)@indexentry(key "XWINDOW-",entry "X-WINDOW",number)
@index(-WINDOW)@indexentry(key "WINDOW-",entry "-WINDOW",number)
-WINDOW@\All operations apply to the entire drawing, not just
the visible portion.


@index(MCR file, writing)
@index(Macros, writing)
@label(XWMACRO)
@index(XWMACRO)
@index(WMACRO)
@index(Extension MCR)@index(MCR extension)

@emphasize[WMACRO]@\Writes all currently defined and named macros into
a file (default extension .MCR), and writes out all variable
definitions.


@label(XWRTSET)@index(WRTSET)@index(XWRTSET)

WRTSET@\Same as XSETWRT (page @pageref(XSETWRT)).

@label(XXOFF)
@index(XXOFF)@index(XOFF)
XOFF@\Sets absolute X offset.@\ For explanation of the
offset, see the @g(e)C command, page @pageref(EpsilonC).

@label(XYOFF)@index(XYOFF)@index(YOFF)
YOFF@\Sets absolute Y offset.
@leave(description)

@chap(Body mode)@label(BodyMode)
To enter body mode, type @g(e)B.
@index(@g(e)B, enter body mode)
@indexentry(Key "B@g(e), enter body mode",entry "@g(e)B, enter body mode",number)

@enter(description)
@index(@g(a)@z(), body mode)
@indexEntry(key "@z()@g(a), body mode",entry "@g(a)@z(), body mode",number)
@indexentry(key "Body mode, @z()@g(a)",entry "Body mode, @g(a)@z()",number)
@g(a)@z()@\Trace all pins on this body to the next point.  If this
point is not a pin on another body, put it in a set
with this body.  Then enter set mode (section @ref(setmode)) and
put the cursor at the center of the set.

@index(@g(a)", body mode)
@indexEntry(key <"@g(a), body mode>,entry <@g(a)", body mode>,number)
@indexentry(key <Body mode, "@g(a)>,entry <Body mode, @g(a)">,number)
@index(Macro, storing body name)@index(Body name, storing in macro)

@g(a)"@\Store the body name in a macro

@index(@g(b)", body mode)
@indexEntry(key <"@g(b), body mode>,entry <@g(b)", body mode>,number)
@indexentry(key <Body mode, "@g(b)>,entry <Body mode, @g(b)">,number)
@index(Macro, storing location)@index(Location, storing in macro)

@g(b)"@\Stores the location text in a macro; if no location text, a null macro body is stored.
The format of the location text is dependent upon the board type.
See chapter @ref(boards).



@index(@g(a)#, body mode)@indexEntry(key "#@g(a), body mode",entry "@g(a)#, body mode",number)@indexentry(key "Body mode, #@g(a)",entry "Body mode, @g(a)#",number)
@index(Deleting body from set)
@index(Set, deleting body)

@g(a)#@\Removes the body from the current set.

@index(@g(b)#, body mode)@indexEntry(key "#@g(b), body mode",entry "@g(b)#, body mode",number)@indexentry(key "Body mode, #@g(b)",entry "Body mode, @g(b)#",number)
@g(b)#@\Removes the body from all sets.


@index(@g(a)&, body mode)@indexEntry(key "&@g(a), body mode",entry "@g(a)&, body mode",number)@indexentry(key "Body mode, &@g(a)",entry "Body mode, @g(a)&",number)
@index(Set, adding body)@index(Body, adding to set)

@g(a)&@\Adds the closest body to the current set.

@index(@g(b)&, body mode)@indexEntry(key "&@g(b), body mode",entry "@g(b)&, body mode",number)@indexentry(key "Body mode, &@g(b)",entry "Body mode, @g(b)&",number)
@g(b)&@\Trace connections to this body through points and bodies
and put everything found in a set.  Enters set mode
(section @ref(setmode)) and places the cursor to the set center;
it makes certain the set center is on the screen.

@index(@g(e)&, body mode)@indexEntry(key "&@g(e), body mode",entry "@g(e)&, body mode",number)@indexentry(key "Body mode, &@g(e)",entry "Body mode, @g(e)&",number)
@g(e)&@\Clears the current set.

@index(@g(a)D, body mode)@indexEntry(key "D@g(a), body mode",entry "@g(a)D, body mode",number)@indexentry(key "Body mode, D@g(a)",entry "Body mode, @g(a)D",number)
@index(Body, deleting)@index(Deleting a body)
@emphasize[@g(a)D]@\Delete the closest body.
Lines and text attached to the body are also deleted.

@index(@g(b)D, body mode)@indexEntry(key "D@g(b), body mode",entry "@g(b)D, body mode",number)
@indexentry(key "Body mode, D@g(b)",entry "Body mode, @g(b)D",number)
@g(b)D@\Delete the closest body.  Body attachment pins are turned
into points instead of being deleted.


@label(AlphaEBody)
@index(@g(a)E, body mode)
@indexEntry(key "E@g(a), body mode",entry "@g(a)E, body mode",number)
@indexentry(key "Body mode, E@g(a)",entry "Body mode, @g(a)E",number)
@index(Body, editing)@index(Body, altering)
@index(Editing a body)@index(Altering a body)
@index(@g(a)E, enter body editor)
@indexentry(key "E@g(a), enter body editor",entry "@g(a)E, enter body editor",number)

@emphasize[@g(a)E]@\Edit the definition of the closest body.  This can be done only if
either the body is defined in this file, or an XMODLIB (page @pageref(XMODLIB))
has been done.
Note that body definitions read in from a library may be made local to a file
by using the XLOCLIB command (page @pageref(XLOCLIB)).
  Mostly,
this is used when you are editing bodies in a library file;
see chapter @ref(libraries).

@label(EpsilonEBody)
@index(@g(e)E, body mode)@indexEntry(key "E@g(e), body mode",entry "@g(e)E, body mode",number)
@indexentry(key "Body mode, E@g(e)",entry "Body mode, @g(e)E",number)@index(Body, creating)
@index(Body, editing)@index(Editing a body)@index(Altering a body)
@index(@g(e)E, enter body editor)
@indexentry(key "E@g(e), enter body editor",entry "@g(e)E, enter body editor",number)

@emphasize[@g(e)E]@\Edit or create a body definition.
  Mostly,
this is used when you are editing bodies in a library file;
see chapter @ref(libraries).
  Asks for the body name.  If the body
has not been defined in any library or in the current drawing,
allows you to create a new body.  This is the basic command for
creating new bodies.  


@label(AlphaFBody)
@index(@g(a)F, body mode)
@indexEntry(key "F@g(a), body mode",entry "@g(a)F, body mode",number)
@indexentry(key "Body mode, F@g(a)",entry "Body mode, @g(a)F",number)
@index(Bodies, finding)
@index(Finding bodies)

@g(a)F@\Find and unmark the next body that has been marked.  If a body is marked,
the cursor is placed on it and it is brought onto the screen if
it was offscreen.

@label(BetaFbody)
@index(@g(b)F, body mode)
@indexEntry(key "F@g(b), body mode",entry "@g(b)F, body mode",number)
@indexentry(key "Body mode, F@g(b)",entry "Body mode, @g(b)F",number)

@g(b)F@\Asks for a search string.  If <escape> is typed, the command
is aborted.  If a null string is given, the previous non-null
search string is used.  Converts the location information of each
body to a string and matches it against the search string.  All
bodies which contain the search string as a substring of
their location are marked for subsequent retrieval by @g(a)F.

@index(@g(e)F, body mode)@indexEntry(key "F@g(e), body mode",entry "@g(e)F, body mode",number)@indexentry(key "Body mode, F@g(e)",entry "Body mode, @g(e)F",number)
@g(e)F@\Asks for a search string.  If <escape> is typed, the command
is aborted.  If a null string is given, the previous non-null
search string is used.  For each body, the body name is matched
against the search string.  If the search string is
a substring of the body name, the body is marked for subsequent
retrieval by @g(a)F.

@label(AlphaMBody)
@index(@g(a)M, body mode)
@indexEntry(key "M@g(a), body mode",entry "@g(a)M, body mode",number)
@indexentry(key "Body mode, M@g(a)",entry "Body mode, @g(a)M",number)
@index(Body, moving)@index(Moving a body)

@emphasize[@g(a)M]@\Move the closest body.  The cursor is put at the center of
the body.
Then the cursor commands are used to move the body; all pins are
massaged as the body is moved.  Any character other than cursor
and screen movement leaves this mode; typically you use a 
<space>.

@label(AlphaNBody)
@index(@g(a)N, body mode)
@indexEntry(key "N@g(a), body mode",entry "@g(a)N, body mode",number)
@indexentry(key "Body mode, N@g(a)",entry "Body mode, @g(a)N",number)
@index(Body, positioning)
@index(Section numbers)

@g(a)N@\"Number" the closest body, i.e., assign it a position on the
board.  The position syntax is board-dependent; see chapter
@ref(Boards).  However, it may be terminated with
any of the following suffixes:
@enter(example)
-#
L
R
-#L
-#R
@leave(example)
If the location information
is followed by "-#", then # is used as a "section designator"
as in @g(e)N
(see page @pageref(EpsilonNbody)) to this body.  If the
location information additionally has an "L" or "R" following it,
this is used to do a @g(b)T (see page @pageref(BetaTBody)) to the
body.
The text offset of the location information is set to that
in the body definition; in addition, a flag is set so that any
changes  made to that offset in the body definition (see page
@pageref(BetaNedit)) will be reflected in each body.  If a
@g(b)N command is given in body mode, this flag is turned off.

@index(@g(b)N, body mode)@indexEntry(key "N@g(b), body mode",entry "@g(b)N, body mode",number)@indexentry(key "Body mode, N@g(b)",entry "Body mode, @g(b)N",number)
@g(b)N@\Legal only if an @g(a)N command has just been done.  Puts the
cursor at the current offset for the location information
text, and lets you move it with the cursor motion commands.
This motion is scaled by drawing size, not character size.  This
command also turns off the flag which causes the location text
to follow the offset defined in the body definition.

@index(Package section, assigning)@index(Pin numbers, assigning)
@label(EpsilonNbody)
@index(@g(e)N, body mode)@indexEntry(key "N@g(e), body mode",entry "@g(e)N, body mode",number)@indexentry(key "Body mode, N@g(e)",entry "Body mode, @g(e)N",number)

@g(e)N@\If the  DIPTYPE property is set, it reads the definition from file
@index(DIPS.DIP)
DIPS.DIP on the library area (to control the library area
specification, see the XLIBPPN command on page @pageref(XLIBPPN)).
It then asks which section of the package you want the body assigned
to, and uses the default pin names as a mask to select the actual
pin numbers and set them.
@index(Section numbers)
Section numbers are zero-based, so a four-body IC has sections
numbered 0, 1, 2 and 3.  A letter may also be used, where
A=0, B=1, etc.  This may also be done implicitly in the @g(a)N
command, page @pageref(AlphaNbody).
If only one section is defined for the DIP, the @g(b)P command,
page @pageref(BetaPBody), may be used to assign pin numbers from
the default pin numbers.

@index(@g(a)O, body mode)@indexEntry(key "O@g(a), body mode",entry "@g(a)O, body mode",number)
@indexentry(key "Body mode, O@g(a)",entry "Body mode, @g(a)O",number)@index(Body, rotating)
@index(Rotating a body)

@emphasize[@g(a)O]@\ Rotate the closest body 90@+[o] counterclockwise.  After
four rotations, mirror image the body.  Thus it takes eight
@g(a)O commands to return a body to its original orientation.
Note that this can be done inside a move operation (e.g., @g(a)M) and
will not terminate the move.

@index(@g(a)P, body mode)@indexEntry(key "P@g(a), body mode",entry "@g(a)P, body mode",number)@indexentry(key "Body mode, P@g(a)",entry "Body mode, @g(a)P",number)
@index(Body, placing)@index(Placing a body)
@emphasize[@g(a)P]@\Place a body at the current cursor position.
The body will follow the cursor as if a move command (@g(a)M, page
@pageref(AlphaMBody)) had been done.  Terminate the move with
a <space>.

@label(BetaPBody)
@index(@g(b)P, body mode)@indexEntry(key "P@g(b), body mode",entry "@g(b)P, body mode",number)@indexentry(key "Body mode, P@g(b)",entry "Body mode, @g(b)P",number)
@index(Pin numbers, assigning)
@index(Section numbers)

@g(b)P@\Set pin numbers from the default pin names.  For a package
with only one body, this is the same as doing an @g(e)N command
(see page @pageref(epsilonNbody)).  If you accidently
type this command, you can undo it by doing an X-PINS command
on the body; see page @pageref(XPINS).

@index(Body, replacing)@index(Replacing a body)
@g(a)R@\Replace the closest body.  You will be asked for
a new body name, then asked to select the replacement mode.
The replacements modes are:
@enter(description)
C@\The closest  geometric mapping is used, but pin names may differ.

E@\An exact match is done by default pin name.

L@\An exact@\geometric mapping is used to replace the body.
If each pin cannot be matched to another, the replacement is
aborted.

M@\Requests that default pin names be maintained.  
This precedes other commands.

N@\A closest match by default pin name is performed.

P@\Copy the body text and properties only.

<cr>@\You are asked for a pin-by-pin correspondence.
Any unspecified pins on the old body are deleted; any unspecified
pins on the new body are created.

<escape>@\Abort the command.
@leave(description)

@index(@g(b)R, body mode)@indexEntry(key "R@g(b), body mode",entry "@g(b)R, body mode",number)@indexentry(key "Body mode, R@g(b)",entry "Body mode, @g(b)R",number)
@g(b)R@\Replace some.  Asks for the old body name, then the new
body name, then the correspondence mode as in @g(a)R.  Proceeds to
put a star on each instance of the old body in the drawing, 
and asks "This one?".  If you say "Y", that body is replaced;
otherwise it is not.  Use <escape> to abort this mode.
This mode applies only to bodies which are visible on the
screen, independent of the setting of WINDOW (see page @pageref(XWINDOW)).

@index(@g(e)R, body mode)@indexEntry(key "R@g(e), body mode",entry "@g(e)R, body mode",number)@indexentry(key "Body mode, R@g(e)",entry "Body mode, @g(e)R",number)
@g(e)R@\Replace all.@\Like @g(b)R, except the replacement is done
to all bodies selected  without asking for confirmation.


@index(@g(a)S, body mode)@indexEntry(key "S@g(a), body mode",entry "@g(a)S, body mode",number)@indexentry(key "Body mode, S@g(a)",entry "Body mode, @g(a)S",number)
@index(Swap, pin numbers)

@emphasize[@g(a)S]@\Swap.  Asks for two pin ids.  All lines, text, and
anything else associated with the pin ids are swapped.
@u[Note that these are pin ids, not default pin numbers!].
Pin ids are unique integers associated with each pin, and
can be displayed with the XRPINID command (see page @pageref(XRPINID)).
If you plan to swap a lot of pins, you should display the pin ids,
write down what you want to do, and then turn off pin ids.  The
program will send down a new picture with pin ids displayed each
time a @g(a)S command is issued, even if RPINIDS are already
displayed.  Since typeahead aborts the sending of a picture, if
you type lots of @g(a)S commands quickly you can save the screen
updating, but only if you already know the pin ids you want to swap.

@index(@g(b)S, body mode)@indexEntry(key "S@g(b), body mode",entry "@g(b)S, body mode",number)@indexentry(key "Body mode, S@g(b)",entry "Body mode, @g(b)S",number)
@g(b)S@\Similar to @g(a)S; swap pin numbers.  Wires remain connected
as they were before the swap.

@index(@g(a)T, body mode)
@indexEntry(key "T@g(a), body mode",entry "@g(a)T, body mode",number)
@indexentry(key "Body mode, T@g(a)",entry "Body mode, @g(a)T",number)


@g(a)T@\Place text in the body.  For details, such as vertical
plotting and character scale, see page @pageref(AlphaTtpMode).

@index(@g(b)T, body mode)@indexEntry(key "T@g(b), body mode",entry "@g(b)T, body mode",number)@indexentry(key "Body mode, T@g(b)",entry "Body mode, @g(b)T",number)
@label(BetaTBody)

@g(b)T@\This command is used if you do not have a universal board,
but instead have a board with only 16-pin sockets on it.
It allows you to offset a 14-pin package in the 16-pin
socket.  This command wants one of the following responses:
@enter(description)
L@\Pin 1 of the DIP goes in pin 2 of the socket

R@\Pin 1 of the DIP goes in pin 1 of the socket

*@\Turn off the previous L or R.
@leave(description)
This command sets flags which are passed to the wirelister.  If
a pin number needs 1 added to it to get the socket pin number, then
a "+" will be displayed after it; if it needs 2 added to it,
a "+2" will be displayed after it.

@index(LPROPS)@index(XLPROPS)@index(Properties, printing)

XLPROPS@\Displays all local and definition properties associated
with the nearest body.


@index(@g(a)Y, body mode)@indexEntry(key "Y@g(a), body mode",entry "@g(a)Y, body mode",number)@indexentry(key "Body mode, Y@g(a)",entry "Body mode, @g(a)Y",number)
@g(a)Y@\Place a body property (new or old).  See page @pageref(AlphaYtpMode).

@index(@g(b)Y, body mode)@indexEntry(key "Y@g(b), body mode",entry "@g(b)Y, body mode",number)@indexentry(key "Body mode, Y@g(b)",entry "Body mode, @g(b)Y",number)
@g(b)Y@\Replace an old body property.  See page @pageref(BetaYtpMode).

@index(@g(e)Y, enter body text/property mode)
@indexentry(key "Y@g(e), enter body text/property mode",entry "@g(e)Y, enter body text/property mode",number)
@index(@g(e)Y, body mode)@indexEntry(key "Y@g(e), body mode",entry "@g(e)Y, body mode",number)
@indexentry(key "Body mode, Y@g(e)",entry "Body mode, @g(e)Y",number)
@index(Body text/property mode, entering)
@index(Text/property mode, entering)

@g(e)Y@\Enter body text/property mode.  The closest body becomes the
one whose text and properties are being manipulated.  See section
@ref(tpMode), page @pageref(tpMode).
@leave(description)

@chap(Point mode)
@label(PointMode)

@index(@g(e)P, enter point mode)
@indexEntry(key "P@g(e)", Entry "@g(e)P",number)
To enter point mode, type @g(e)P.

The following commands also apply if the last primitive search command
was @g(e)P or @g(e)T:

@enter(description)

@indexEntry(key <"@g(a), point mode>, Entry <@g(a)", point mode>,number)
@index(@g(a)", point mode)@index(Macro, storing pin text into)
@indexentry(key <Point mode, "@g(a)>,entry <Point mode, @g(a)">,number)
@g(a)"@\If there is text on this point, it is stored in a macro.  You
are asked for the macro name.  If no text, a null macro body
is stored.

@label(BetaQuotePoint)
@index(@g(b)", point mode)@index(Point mode, @g(b))
@indexEntry(Key <"@g(b), point mode>, Entry <@g(b)", point mode>,number)

@g(b)"@\Stores@\a string for the pin name in a macro; you are asked
for a macro name.  If the current point does not have
a pin name, a null string is stored. 
The exact form of the text string is dependent upon the board type;
the board type is set by the XBOARD command (page @pageref(XBOARD)).
For the known formats, see Chapter @ref(Boards), page @pageref(boards).

@index(@g(a)#, point mode)@indexentry(key "Point mode, #@g(a)",entry "Point mode, @g(a)#",number)
@indexEntry(Key "#@g(a), point mode", Entry "@g(a)#, point mode",number)
@index(Point, deleting from set)@index(Deleting point from a set)
@index(Set, deleting point from)

@g(a)#@\Removes the point from the current set.
To indicate the "current set", see @g(b)& in set mode, page @pageref(BetaAmpersandSet).

@indexEntry(Key "#@g(b), point mode", Entry "@g(b)#, point mode",number)
@index(@g(b)#, point mode)@indexentry(key "Point mode, #@g(b)",entry "Point mode, @g(b)#",number)
@g(b)#@\Removes the point from all sets.


@index(@g(a)&, point mode)@indexentry(key "Point mode, &@g(a)",entry "Point mode, @g(a)&",number)
@indexentry(Key "&@g(a), point mode",Entry "@g(a)&, point mode",number)
@index(Set, adding point to)
@index(Point, adding to set)@index(Adding point to set)

@g(a)&@\Adds the closest point to the current set.  The point may
not be a body attachment point.  For set operations, see
also section @ref(Setmode).

@index(@g(b)&, point mode)@indexentry(key "Point mode, &@g(b)",entry "Point mode, @g(b)&",number)
@indexEntry(Key "&@g(b), point mode",Entry "@g(b)&, point mode",number)
@g(b)&@\Trace connections to this point through bodies and points
and put everything found in a set.  Enter set mode, and
move the cursor to the set center and make sure the
set center is on the screen.  For more information, see
section @ref(setmode).

@index(@g(e)&, point mode)@indexentry(key "Point mode, &@g(e)",entry "Point mode, @g(e)&",number)
@indexentry(Key "&@g(e)",Entry "@g(e)&",number)

@g(e)&@\Clears the current set.

@index(@g(a)., point mode) @indexentry(key "Point mode, .@g(a)",entry "Point mode, @g(a).",number)
@index(Wires, tracing)@index(Tracing wires)
@indexEntry(Key ".@g(a)", Entry "@g(a).",number)
@indexEntry(Key "period",Entry "@g(a)<period>, point mode",number)

@g(a).@\(@g(a)<period>).  Trace the wires attached to this point and flash them.
@index(Flashing wires)
Tracing includes wires with the same signal names.  If any connectors
are attached to the wires, but are off screen, one of them is
flashed in the upper right corner of the screen.

@index(@g(a)A, point mode)@indexentry(key "Point mode, A@g(a)",entry "Point mode, @g(a)A",number)@index(Point, attaching)
@indexEntry(Key "A@g(a), point mode",Entry "@g(a)A, point mode",number)
@index(Attaching point to line)@index(Line, attaching to)

@emphasize[@g(a)A]@\Attach the closest point to the closest other point.  A
star is placed on the "other point" and you are asked "This one?".
Type "Y" to attach it.  You may not attach two body points.

@index(@g(b)A, point mode)
@indexEntry(Key "A@g(b), point mode", Entry "@g(b)A, point mode",number)
@indexentry(key "Point mode, A@g(b)",entry "Point mode, @g(b)A",number)@index(Point, attaching)
@label(BetaAPoint)
@emphasize[@g(b)A]@\Attach a point to a line segment.  This is how lines
get connected!  Puts a star on the closest line and asks "This one?".
If you type "Y" then this point becomes the intersection point of the
line.  When drawing a line (see +, above), the closest other
line is given a point at the place where the line you are
drawing would intersect it.  A "-" is then done to that point
to complete the line.

@index(@g(e)A, point mode)@indexEntry(Key "A@g(e), point mode", Entry "@g(e)A, point mode",number)@indexentry(key "Point mode, A@g(e)",entry "Point mode, @g(e)A",number)
@index(Signal name, altering)@index(Text, altering)
@index(Altering signal name)@index(Altering point text)

@g(e)A@\If the closest point has text on it, you are put into
alter mode.  See chapter @ref(Altermode) on page @pageref(Altermode).

@index(@g(a)B, point mode)@indexEntry(Key "B@g(a), point mode", Entry "@g(a)B, point mode",number)@indexentry(key "Point mode, B@g(a)",entry "Point mode, @g(a)B",number)
@g(a)B@\If the closest point has three lines attached to it, one of
the two collinear lines is broken off from the point and attached
to a new point.  The new point is then connected to the old point
by a segment in the other direction.  If the closest point
has four lines attached to it, the UP and RIGHT lines are
reconnected to a new point which is then joined to the old point by
a horizontal segment.  If the closest point has two horizontal
or two vertical lines, it is handled like the case of three 
lines.  If it does  not have two, three or four lines, this
command is illegal.
Note that the result of executing this command is two points, one
on top of the other!  This is normally a very bad idea, but
it is assumed that you are about to move one of them horizontally.

@index(@g(b)B, point mode)@indexEntry(Key "B@g(b), point mode", Entry "@g(b)B, point mode",number)@indexentry(key "Point mode, B@g(b)",entry "Point mode, @g(b)B",number)

@g(b)B@\This is like @g(a)B, except that in the case of four lines, the
new segment is vertical instead of horizontal.
It is assumed that you are about to move one of the points vertically.

@label(AlphaDPoint)
@index(@g(a)D, point mode)@indexEntry(Key "D@g(a), point mode", Entry "@g(a)D, point mode",number)
@indexentry(key "Point mode, D@g(a)",entry "Point mode, @g(a)D",number)@index(Point, deleting)
@index(Deleting a point)
@emphasize[@g(a)D]@\Delete the closest point and all lines and text directly attached to
it.  If the point is just a body attachment point, it doesn't really
go away; just the lines and text associated with it.


@index(@g(b)D, point mode)@indexEntry(Key "D@g(b), point mode", Entry "@g(b)D, point mode",number)@indexentry(key "Point mode, D@g(b)",entry "Point mode, @g(b)D",number)
@g(b)D@\The same function as @g(a)D, except that collinear line segments
are merged; this undoes a @g(b)B operation done in line mode (see page @pageref(BetaBLine)).

@index(@g(e)E, point mode)@indexEntry(Key "E@g(e), point mode", Entry "@g(e)E, point mode",number)@indexentry(key "Point mode, E@g(e)",entry "Point mode, @g(e)E",number)
@emphasize[@g(e)E]@\See @g(e)E on page @pageref(EpsilonEbody).


@label(AlphaFPoint)
@index(@g(a)F, point mode)
@indexEntry(Key "F@g(a), point mode", Entry "@g(a)F, point mode",number)
@indexentry(key "Point mode, F@g(a)",entry "Point mode, @g(a)F",number)
@index(Finding marked points)
@index(Marked points, finding)

@g(a)F@\Find and unmark a marked point.  If it is on the screen, move the cursor
there; if off screen, move it to the center of the screen and move
the cursor there.
This command is used, for example,
 to find (in turn) each of the points located
by @g(b)F or @g(e)F, or
 with the "find" option of
DELNULL (page @pageref(XDELNULL)).

@index(@g(b)F, point mode)@indexEntry(Key "F@g(b), point mode", Entry "@g(b)F, point mode",number)@indexentry(key "Point mode, F@g(b)",entry "Point mode, @g(b)F",number)
@g(b)F@\Asks for a search string (if ended with <escape>, nothing
is done).  If a null string is given, the previous non-null
string will be used.  Searches for all connector pins and
body pins whose names (as converted to strings as in @g(b)", see
page @pageref(BetaQuotePoint))  contain
the search string as a substring.  Special characters are
allowed as described in the alter mode F command, page @pageref(PAttern).
If a match is found, the point is marked for later retrieval.


@index(@g(e)F, point mode)@indexEntry(Key "F@g(e), point mode", Entry "@g(e)F, point mode",number)@indexentry(key "Point mode, F@g(e)",entry "Point mode, @g(e)F",number)
@g(e)F@\Asks for a search string (if ended with <escape>, nothing
is done).  If null string is given, the previous non-null
string will be used.  Searches for all points whose text contains
the search string as a substring.  Special characters are
allowed as described in the alter mode F command, page @pageref(Pattern).
If a match is found, the point is marked for later retrieval.


@label(AlphaKpoint)
@index(@g(a)K, point mode)@indexEntry(Key "K@g(a), point mode", Entry "@g(a)K, point mode",number)
@indexentry(key "Point mode, K@g(a)",entry "Point mode, @g(a)K",number)@index(Text, deleting)
@emphasize[@g(a)K]@\If the closest point has text on it, the text is deleted.


@index(@g(a)M, point mode)@indexEntry(Key "M@g(a), point mode", Entry "@g(a)M, point mode",number)
@indexentry(key "Point mode, M@g(a)",entry "Point mode, @g(a)M",number)@index(Moving a point)
@index(Point, moving)
@emphasize[@g(a)M]@\Puts the cursor on the closest point.  The point will
then move with  the cursor until a <space> is typed.  The lines are
massaged as the point moves.

@index(@g(b)M, point mode)@indexEntry(Key "M@g(b), point mode", Entry "@g(b)M, point mode",number)@indexentry(key "Point mode, M@g(b)",entry "Point mode, @g(b)M",number)
@g(b)M@\Puts the cursor at the current text offset (if any text) and
allows you to move the text offset by moving the text.  The
offset is relative to the character size.  This also turns off
the flags set by @g(e)Z (see page @pageref(EpsilonZpoint).  NOTE: @g(b)M is obsolete; use
XTMOVE described on page @pageref(XTMOVE)!

@index(@g(e)M, point mode)@indexEntry(Key "M@g(e), point mode", Entry "@g(e)M, point mode",number)@indexentry(key "Point mode, M@g(e)",entry "Point mode, @g(e)M",number)
@g(e)M@\Similar to @g(a)M, except that it first moves the point to the cursor.


@label(AlphaNPoint)
@index(@g(a)N, point mode)
@indexEntry(Key "N@g(a), point mode", Entry "@g(a)N, point mode",number)
@indexentry(key "Point mode, N@g(a)",entry "Point mode, @g(a)N",number)
@index(Connector pin, setting)

@g(a)N@\This sets either a connector pin or a body pin number:
@enter(itemize)
For a connector pin, the pin number has a syntax
which is board-dependent; see chapter @ref(Boards).
If this point was not previously
a connector pin, an @g(e)Q (page @pageref(EpsilonQPoint)) will be
performed.

For a body attachment point, just type the pin number
@leave(itemize)

@index(@g(b)N, point mode)@indexEntry(Key "N@g(b), point mode", Entry "@g(b)N, point mode",number)@indexentry(key "Point mode, N@g(b)",entry "Point mode, @g(b)N",number)
@g(b)N@\Obsolete; use XLMOVE (page @pageref(XLMOVE)) instead.
For connector pins only; puts you at the current offset for the location
text and lets you move it.  The offset is relative to the character
size of the location text, not the picture scale.  Illegal if
an @g(e)Q (page @pageref(EpsilonQPoint)) has been done to this point.


@index(@g(a)P, point mode)
@indexEntry(Key "P@g(a), point mode", Entry "@g(a)P, point mode",number)
@indexentry(key "Point mode, P@g(a)",entry "Point mode, @g(a)P",number)

@g(a)P@\Place a point at the current cursor position.

@index(+, start a right angle)@index(Point mode, +)@index(+, point mode)
+@\Start a right angle (start drawing a line) which follows the
cursor.  Start from the closest point.  A star is placed at the
closest point excluding the one you are drawing from.  The
following commands may now be given:
@enter(description)
@indexentry(key "Escape, point mode",entry "<Escape>, point mode",number)
@index(Point mode, <escape>)
@index[$ <escape>, point mode]@index[Point mode $ <escape>]
@indexentry[key "Escape, point mode",entry "<Escape>, point mode",number]

$@\(<escape>)  Stop the right angle without placing any more points.
The blinking line segment is discarded.

@index(Point mode, +) @index(+, point mode)
+@\Make the corner of the angle into a point (freezes the next-to-last
blinking line segment) and start a new right angle from there.

@indexentry(key "Space, point mode",entry "<Space>, point mode",number)
@indexentry(key "Point mode, space",entry "Point mode, <space>",number)

<space>@\Causes the sense of the right angle to change.

@index(-, point mode)@index(Point mode, -)
-@\Attach the right angle to the closest point (found above, and
marked with a star).  If this would require the deletion of an
existing line, ?? is typed and nothing is done.  To attach
to an existing line, see @g(b)A (page @pageref(BetaAPoint)).

@index(@k(not), point mode)@index(Point mode, @k(not))
@label(NotPointMode)
@k(not)@\Make a single line segment from the point which
the right angle is coming from to the closest point.
This may not be a horizontal or vertical line, so you
must straighten it.  See also the MUNG command, page @pageref(XMUNG).

@emphasize[@g(b)A]@\Attach the line to the nearest line segment; see @g(b)A
described on page @pageref(BetaAPoint).
@leave(description)
@index(@g(b)Q, point mode)
@indexEntry(Key "Q@g(b), point mode", Entry "@g(b)Q, point mode",number)
@indexentry(key "Point mode, Q@g(b)",entry "Point mode, @g(b)Q",number)
@index(Connector pin text offset)
@index(Text offset, connector pin)

@g(b)Q@\Turns off the flag set by @g(e)Q

@label(EpsilonQPoint)
@index(@g(e)Q, point mode)
@indexEntry(Key "Q@g(e), point mode", Entry "@g(e)Q, point mode",number)
@indexentry(key "Point mode, Q@g(e)",entry "Point mode, @g(e)Q",number)
@index(Connector pin text offset)
@index(Text offset, connector pin)

@g(e)Q@\Calculates a good offset for the connector pin designation under
the same conditions as @g(e)Z (page @pageref(epsilonZpoint)).  Also
sets a flag to cause the connector pin designation to follow the text
(or the point, if no text) when either the connector pin number or 
the text is changed.


@index(@g(a)T, point mode)
@indexEntry(Key "T@g(a), point mode", Entry "@g(a)T, point mode",number)
@indexentry(key "Point mode, T@g(a)",entry "Point mode, @g(a)T",number)@index(Text, attaching to point)


@g(a)T@\Asks for text, and then attaches the text to the point.
For details such as vertical plotting and scaling of text,
see @g(a)T on page @pageref(AlphaTtpmode).

@index(@g(b)T, point mode)
@indexEntry(Key "T@g(b), point mode", Entry "@g(b)T, point mode",number)
@indexentry(key "Point mode, T@g(b)",entry "Point mode, @g(b)T",number)

@emphasize[@g(b)T]@\The same as @g(a)T, followed by @g(e)Z.  This is the preferred
command for attaching text (signal names)  to a point.
For details such as vertical plotting and scaling, see @g(a)T on
page @pageref(AlphaTTpmode).


@index(@g(b)Z, point mode)
@indexEntry(Key "Z@g(b), point mode", Entry "@g(b)Z, point mode",number)
@indexentry(key "Point mode, Z@g(b)",entry "Point mode, @g(b)Z",number)
@g(b)Z@\Disables the flag set by @g(e)Z.

@index(@g(e)Z, point mode)
@indexEntry(Key "Z@g(e), point mode", Entry "@g(e)Z, point mode",number)
@indexentry(key "Point mode, Z@g(e)",entry "Point mode, @g(e)Z",number)
@label(EpsilonZPoint)
@g(e)Z@\Calculates a good offset for the text if the point has only
one segment attached to it.  It also sets a flag which causes this
offset to be updated when the text changes.  If in
OFFRIGHT state (see page @pageref(XOFFRIGHT)), a flag is set to
cause the point to move right instead of the text to move left
when the line leaves going to the right.
@leave(description)

@chap(Edit mode)
@label(EditMode)

Edit mode is used to create bodies for a drawing.  Any drawing
may contain its own private body definitions, although it is
considered far more courteous to create library files which can
later be shared by others.  After all, if someone had done that
already you probably wouldn't have to be drawing that body anyway.

The most important feature on a body is a @i[point], since this
is what is used to connect the wires.  In theory, a body could
consist of nothing but points, but as a practical matter this
wouldn't look very well on a drawing.  Therefore, a collection
of lines is also created which outline the body and provide some
indication of its function (e.g., inverting symbols for active-low
inputs or active-low outputs).  In addition to drawing simple lines,
existing shapes may be brought in to add to the body, e.g., 
the inversion bubble is a standard shape (called "DIAMOND") from
one of the libraries.  A body may also be created by copying an
existing body (e.g., for creating the LSTTL version of a chip
from the STTL or TTL version).  Text may be added to the body,
frequently near a connection point, to provide some explanation
of what is going on (e.g., "CLK", "Q", "D" for a flip-flop).  However,
the text is not associated with the point by the drawing program
and if the point is moved or deleted the text must be moved or
deleted explicitly.

Note: before constructing a body, you should really read and
understand chapter @ref(diptype), on the DIPTYPE property.
Most knowledge about DIPTYPE is folklore.

The trick to use is to draw the body, and if you don't like
where its "center" is positioned, you
@enter(itemize)
Rename the body to some useless name, such as "foo".  See XRENAME,
page @pageref(XRENAME).

Create a new body with the old name; see the @g(e)E command in body
mode, page @pageref(EpsilonEbody).

Get a copy of the old body by using the @g(a)G command in body
edit mode (page @pageref(AlphaGedit)) to fetch the old body (e.g., "foo").

Use the cursor motion commands to move the body around until it
is placed where you want it, then type <space> to discontinue
the movement.

Exit the editor with @g(a)E (page @pageref(AlphaEedit)).

Delete the old body with XDELTYP (page @pageref(XDELTYP)).
@leave(itemize)

During edit mode, a star indicates the closest point in the
body lines for use with @g(a)R, @g(a)M, @g(b)I or @g(a)D commands.

Edit mode is entered by typing @g(a)E or @g(e)E in body mode; see
page @pageref(AlphaEbody).

Within edit mode, there are several submodes.
@i[Body edit] submode allows you to perform operations on
the entire body.  
@i[Insert] submode allows you to add or
delete lines from the body shape, or move them around.
@i[Pin] submode allows you to place pins, sometimes called
"body attachment points", name them, and change them.
@i[Text/Property] submode allows you to place text or
text named by a property name in the body.  Text which is
named by property name is used so that the text may be
retrieved or examined not by position but by name.  Some
property names, such as DIPTYPE, have special meanings.
User-defined properties could be used to group bodies
together by function (e.g., a property could be called
"FUNCTION" and have  text like "SELECTOR", "ADDER",
"FLOP", etc.)
or family (e.g., define a property "FAMILY" with text
like "ECL", "MOS", "LSTTL", etc.).

@index(LPROPS)@index(XLPROPS)
The properties associated with a body may be displayed
by using the XLPROPS command.  Note that the properties
associated with a body definition may be changed for any
instantiation of a body, and new properties associated
with that instantiation may be added.


A @i[body] is an ordered list of visible and invisible vectors,
pins, properties and text.  The ordering of vectors, in particular,
shows up in many commands which talk about the "next" and "previous"
points, or the vector "entering" or "leaving" a point.  Although
the user has no control of the exact order of vectors, the
knowledge that they @i[are] ordered is important.

Caution:  Within edit mode, AUTOWRITE mode (page @pageref(XAUTOWRITE))
is effectively disabled.  Therefore, you should return to drawing
level frequently and perform an @g(a)W command (page @pageref(alphaW))
to save the drawing and therefore the body definition you have worked
so hard at.



@sec(Techniques for drawing bodies)

There are some techniques which are otherwise undocumented and
are useful to know about.  You won't really understand this section
until you start building bodies, but if it were placed at the end
of this chapter you might miss it.

Moving lines around:  If you have drawn a body too small, or
have put another body (such as the inversion bubble) in the
wrong place, all is not lost.  The cursor movement commands in
insert mode will drag the lines along with the cursor.  The
space and backspace commands can be used to move along the
vector list, and when you get to the endpoint you wish to move,
use the cursor commands to move it.  Since @g(a)I always starts you
at the front of the vector list, it might take a long time to get
to where you want to be, so use @g(a)M instead.  This places you
immediately at the nearest point.

Adding lines:  Sometimes you want to add some lines to a drawing,
either because you forgot them or because you have copied an
almost-similar drawing from another body.  Of course, if you
want to draw a shape that already exists, you should just use
the @g(a)G command to grab it.  However, to add lines you usually
get near where you want to draw them and then start drawing
an invisible vector, followed by as many visible ones as you want,
as often as desired.  A startling event is that the cursor may pick
up some other line of the drawing and drag it along.  If this is
not too disturbing, just let it follow the cursor; when you have
added your lines, place one last invisible vector to return the line to where it
belongs.  Another technique is to draw an invisible vector of
some length (e.g., one @g(b) distance) then terminate it and start another
invisible vector in the opposite direction for the same distance.
This returns the visible line that had been dragged along with the
cursor to its original point.  Now type a <backspace> command to
move back one vector (invisible) and now start moving to the
desired point and drawing the desired lines.  You are really
dragging around the invisible vectors, but of course they
don't appear and get in your way.

Text: Body text should be moved around with the @g(a)M command, and
the final fine adjustment made with XTMOVE.  The name of the
body, e.g., "74132", is manipulated in this manner.  The DIPTYPE
property should be made invisible by using @g(a)K.  The DIPTYPE should
also contain a space separating the family name from the type
when no other delimiter intervenes, e.g., the DIPTYPE of
"74132" is "74@ 132".  However, the DIPTYPE of "74LS132" is
"74LS132".  This is so the DIPTYPEs will sort correctly in
final reports.  If you don't believe this, accept it on faith.

Pin text should have its anchor point either on the pin (if the pin
is on the main line of the body), on the main line of the body
in line with the pin (e.g., where an inversion bubble intersects
the main rectangle of the body), or, in the case of a clock signal,
at the end point of the triangle defining the clock input.  The
text is normally centered around the anchor point, so will look
really bad.  Use XTMOVE to move the text so that it is positioned
correctly.  This technique will cause the text to maintain a
fixed distance from the pin or rectangle, independent of scaling.
It makes larger and smaller drawings look consistent and cleaner.
In particular, for large scale factors it insures that the
text for a pin is not floating somewhere in the middle of the body.


@sec(Body edit submode)
@enter(description)

@index(@g(a)", edit submode)
@indexentry(key <"@g(a), edit submode>,entry <@g(a)", edit submode>,number)
@indexentry(key <Edit submode, "@g(a)>,entry <Edit submode, @g(a)">,number)
@index(Macro, storing body name)

@g(a)"@\Stores the name of the body you are editing in a macro.  This
is useful if you want to have a macro that can do the same thing
to a number of bodies.


@index(@g(a)D, edit submode)
@indexentry(key "D@g(a), edit submode",entry "@g(a)D, edit submode",number)
@indexentry(key "Edit submode, D@g(a)",entry "Edit submode, @g(a)D",number)

@emphasize[@g(a)D]@\Delete the closest point.  Use this carefully.  It is
the only way to delete a portion of the body of a drawing, even
those portions obtained from a standard shapes library with
@g(a)G (page @pageref(alphaGedit)).  One point (and thus one line) at
a time can be deleted.  If you delete too many points you may have
to redraw them.  Frequently an unexpected visible line will appear
connected (apparently) at random.  This is a former invisible vector
which is now connected to nothing.  You want to @g(a)D it also.

@label(AlphaEEdit)
@index(@g(a)E, edit submode)
@indexentry(key "E@g(a), edit submode",entry "@g(a)E, edit submode",number)
@indexentry(key "Edit submode, E@g(a)",entry "Edit submode, @g(a)E",number)
@index(Edit move, leaving)

@emphasize[@g(a)E]@\Exit the editor.  Return to drawing level.



@label(AlphaGEdit)
@index(@g(a)G, edit submode)
@indexentry(key "G@g(a), edit submode",entry "@g(a)G, edit submode",number)
@indexentry(key "Edit submode, G@g(a)",entry "Edit submode, @g(a)G",number)
@index(Body, copying)
@index(Copying body)

@emphasize[@g(a)G]@\Get a body definition and add it to this body.  You
are given the body definition and can move it using the
normal cursor motion commands, or rotate it using @g(a)O, until
you type a <space>.  @i[Caution:]  Once you type a <space>, the
copy of the body definition brought in is merged completely with
the body definition you are editing!  In order to delete
an incorrectly-placed body of this nature you must delete each
of its vectors one at a time!  You can no longer move it as a unit,
and in general it is easier to delete it than to move it.    If you
type an <Escape> instead of a <space>, you will flush the body without placing it.


@index(@g(a)I, edit submode)
@indexentry(key "I@g(a), edit submode",entry "@g(a)I, edit submode",number)
@indexentry(key "Edit submode, I@g(a)",entry "Edit submode, @g(a)I",number)

@emphasize[@g(a)I]@\Enter insert submode.  This allows you to draw lines defining
the body.  The current point is set to the first point of
the body.
For details on insert submode,
see page @pageref(insertmode).

@index(@g(a)M, edit submode)
@indexentry(key "M@g(a), edit submode",entry "@g(a)M, edit submode",number)
@indexentry(key "Edit submode, M@g(a)",entry "Edit submode, @g(a)M",number)

@emphasize[@g(a)M]@\Like @g(a)I, except that the current point is set to the closest
point.
This is useful for picking up a specific point on the body and
moving it, such as in stretching the body or moving an inversion
bubble or clock diamond.

@label(BetaNEdit)
@index(@g(b)N, edit submode)
@indexentry(key "N@g(b), edit submode",entry "@g(b)N, edit submode",number)
@indexentry(key "Edit submode, N@g(b)",entry "Edit submode, @g(b)N",number)

@emphasize[@g(b)N]@\Moves the cursor to the current initial location offset
(usually designated by the symbol "A01", but this is board
dependent; see chapter @ref(boards)) and lets you move it
with the cursor commands until you type a space.  The position
of the initial location offset determines where the physical
board position of the package containing the body will appear
in the drawing output.

@emphasize[@g(a)O]@\Rotate a body; works only within  @g(a)G, see  page @pageref(AlphaGedit).


@emphasize[@g(a)P]@\Set a pin.  See @g(a)P in pin submode, page @pageref(AlphaPPin).

@index(@g(e)P, edit submode)
@indexentry(key "P@g(e), edit submode",entry "@g(e)P, edit submode",number)
@indexentry(key "Edit submode, P@g(e)",entry "Edit submode, @g(e)P",number)
@index(Pin submode, entering)@index(@g(e)P, enter pin submode)

@emphasize[@g(e)P]@\Enter pin submode; see section @ref(Pinmode).

@g(a)R@\Change the visibility attribute of the closest point;
see @g(a)R in insert submode on page @pageref(AlphaRInsert).

@index(@g(a)T, edit submode)
@indexentry(key "T@g(a), edit submode",entry "@g(a)T, edit submode",number)
@indexentry(key "Edit submode, T@g(a)",entry "Edit submode, @g(a)T",number)
@index(Body text, placing)@index(Text, placing in body)

@emphasize[@g(a)T]@\Place text at the indicated point.  If it lands in the
wrong place (as it is certain to) enter text/property submode and
massage it using XTMOVE; see pages @pageref(AlphaTtpmode) and @pageref(XTMOVE).

@index(@g(e)T, edit submode)
@indexentry(key "T@g(e), edit submode",entry "@g(e)T, edit submode",number)
@indexentry(key "Edit submode, T@g(e)",entry "Edit submode, @g(e)T",number)
@index(@g(e)T, enter text/property submode)

@emphasize[@g(e)T]@\Enter text/property submode;  see section @ref(TPmode), page
@pageref(TPmode).

@label(DISLOCstuff)
@index(XDISLOC)@index(DISLOC)
XDISLOC@\Always display the location information on each 
instance of this body in the drawing.

@index(X-DISLOC)@indexentry(key "XDISLOC-",entry "X-DISLOC",number)@index(-DISLOC)@indexentry(key "DISLOC-",entry "-DISLOC",number)
X-DISLOC@\Don't display the location information on each
instance of this body in the drawing for which a @g(b)N (see
page @pageref(BetaNedit)) has not been done.

@index(XLPROPS)@index(LPROPS)

@emphasize[LPROPS]@\Display the list of properties currently
associated with the body.  The DIPTYPE property is the most
important one to see, since this is the interface to the wirelist
package.


@index(@g(a)Y, edit submode)
@indexentry(key "Y@g(a), edit submode",entry "@g(a)Y, edit submode",number)
@indexentry(key "Edit submode, Y@g(a)",entry "Edit submode, @g(a)Y",number)

@emphasize[@g(a)Y]@\Place new or change old property; see @g(a)Y on page 
@pageref(AlphaYtpmode).

@index(@g(b)Y, edit submode)
@indexentry(key "Y@g(b), edit submode",entry "@g(b)Y, edit submode",number)
@indexentry(key "Edit submode, Y@g(b)",entry "Edit submode, @g(b)Y",number)

@g(b)Y@\Change old property; will do unique disambiguation of
the name.  See @g(b)Y on page @pageref(BetaYtpmode).

@leave(description)

@newpage()
@sec(Insert Submode)@label(insertmode)

@enter(description)

@label(PlusInsertMode)
@label(PlusInsert)
@index(+, insert submode)@index(Insert submode, +)
@emphasize[+]@\This terminates the current vector which has been following
the cursor, and starts a @u[visible one] following it.  You
also use + to start the first line of a body drawing.

@index(-, insert submode)@index(Insert submode, -)
-@\This terminates the current vector which has been following the
cursor, and starts an @u[invisible one] following it.  Fear not!
you can draw as many connected  "invisible" vectors as you like, but they
will not waste space because the program is very clever.

@index[@g(e)$ <escape>, insert submode]
@indexentry(key "Insert submode, escape",entry "Insert submode, <escape>",number)
@indexentry(key "Escape, insert submode",entry "<Escape>, insert submode",number)
@emphasize[@g(e)$]@\(@g(e)<escape>).  @u[Return to edit submode].

@indexentry(key "Backspace, insert submode",entry "<Backspace>, insert submode",number)
@indexentry(key "Insert submode, backspace",entry "Insert submode, <backspace>",number)

<Backspace>@\Moves the cursor to the "previous" point.
@i[Type these slowly to TOPS-10 or the monitor will treat them
as true <backspace> characters!]


@index(@g(a)D, insert submode)@indexentry(key "D@g(a), insert submode", entry "@g(a)D, insert submode",number)
@indexentry(key "Insert submode, D",entry "Insert submode, D",number)
@index(Deleting point from body)
@emphasize[@g(a)D]@\Delete the current point.  This will leave a vector joining
two neighboring points ("neighboring" is determined by how
the body is represented in memory, which is usually not the
way in which you drew it!).  The type (visible or invisible)
will be that of the one already on the last point.  The
cursor is positioned on the next point.
Recall that "current", "last" and "next" are all relative to
how the vector list is stored in memory.

@index(@g(a)E, insert submode)@indexentry(key "E@g(a), insert submode", entry "@g(a)E, insert submode",number)
@indexentry(key "Insert submode, E@g(a)",entry "Insert submode, @g(a)E",number)

@emphasize[@g(a)E]@\Exit the editor and return to drawing level.


@index(@g(e)P, insert submode)@indexentry(key "P@g(e), insert submode", entry "@g(e)P, insert submode",number)
@indexentry(key "Insert submode, P@g(e)",entry "Insert submode, @g(e)P",number)
@emphasize[@g(e)P]@\Enter pin submode; see section @ref(pinmode).


@label(AlphaRInsert)
@index(@g(a)R, insert submode)@indexentry(key "R@g(a), insert submode", entry "@g(a)R, insert submode",number)
@indexentry(key "Insert submode, R@g(a)",entry "Insert submode, @g(a)R",number)

@g(a)R@\Waits for a "+" or "-" to be typed, they changes the
vector "leaving" the current point to be either visible
or invisible, accordingly.

@indexentry(key "Space, insert submode", entry "<Space>, insert submode",number)
@indexentry(key "Insert submode, space",entry "Insert submode, <space>",number)
<Space>@\Moves the cursor to the "next" point.

@index(@g(e)T, insert submode)@indexentry(key "T@g(e), insert submode", entry "@g(e)T, insert submode",number)
@indexentry(key "Insert submode, T@g(e)",entry "Insert submode, @g(e)T",number)

@emphasize[@g(e)T]@\Enter text/property submode; see section @ref(tpmode).


@leave(description)

@newpage()
@sec(Pin Submode)@label(PinMode)

A star indicates the closest pin.
In general, pins should be no closer than 4 units, or a @g(b)-motion, and
should be spaced in integral multiples of 4 units or a @g(b)-motion.
8 units, or an @g(e)-motion, is recommended for two-input gates.

Note that pins are part of the body drawing, but are not related to
physical lines of a "body".  A pin may be placed @i[anywhere]
on a "body", but it usually makes little sense to put a pin
anywhere other than on a body line of some sort.

The "text" associated with a pin is an incidental notation used
to increase readability by people.  It is placed there by
an @g(a)T command, and you use text/property submode to move it
around to where it looks best.  However, it is not used except
by the (human) readers of drawings, and is @i[not] associated
with a pin.
It is particularly important to note that there is no way of
moving the text associated with a pin at the same time the
pin is moved, since no data structure in the drawing package
associates this text with the pin.  If a pin is moved, the text
must also be moved by hand to follow it.

@enter(description)
@indexentry(key "Escape, pin submode",entry "<Escape>, pin submode",number)
@indexentry(key "Pin mode, escape",entry "Pin mode, <escape>",number)
@index[@g(e)$ <escape>, pin submode]
@emphasize[@g(e)$]@\(@g(e)<escape>)  Return to edit submode.

@index(@g(a)D, pin submode)
@indexentry(key "D@g(a), pin submode",entry "@g(a)D, pin submode",number)
@indexentry(key "Pin submode, D@g(a)", entry "Pin submode, @g(a)D",number)
@index(Pin, deleting)
@index(Deleting a pin)
@emphasize[@g(a)D]@\Delete the closest pin.

@label(AlphaFPin)
@index(@g(a)F, pin submode)
@indexentry(key "F@g(a), pin submode",entry "@g(a)F, pin submode",number)
@indexentry(key "Pin submode, F@g(a)", entry "Pin submode, @g(a)F",number)
@index(-OUTSIDE)@index(X-OUTSIDE)@index(OUTSIDE)@index(-OUTSIDE)
@indexentry(key "XOUTSIDE-",entry "X-OUTSIDE",number)
@indexentry(key "OUTSIDE-",entry "-OUTSIDE",number)

@g(a)F@\Automatically calculates a location number.  If in
OUTSIDE mode (see page @pageref(XOUTSIDE)), it will try
to put the pin outside the body; otherwise it will try to
put it inside.  The default startup mode is inside (-OUTSIDE).

@index(@g(e)F, pin submode)@indexentry(key "F@g(e), pin submode",entry "@g(e)F, pin submode",number)@indexentry(key "Pin submode, F@g(e)", entry "Pin submode, @g(e)F",number)
@g(e)F@\Do @g(a)F to all pins of the body.


@index(@g(a)M, pin submode)@indexentry(key "M@g(a), pin submode",entry "@g(a)M, pin submode",number)
@indexentry(key "Pin submode, M@g(a)", entry "Pin submode, @g(a)M",number)@index(Pin, moving)
@index(Moving a pin)
@emphasize[@g(a)M]@\Move the closest pin.  The cursor is moved to the pin
and the pin follows it until a <space> is typed.

@index(@g(a)N, pin submode)@indexentry(key "N@g(a), pin submode",entry "@g(a)N, pin submode",number)
@indexentry(key "Pin submode, N@g(a)", entry "Pin submode, @g(a)N",number)@index(Renaming a pin)
@index(Pin, renaming)
@emphasize[@g(a)N]@\ Asks for a new pin name, then changes the number of
the closest pin to whatever you type.  Has the same restrictions
as @g(a)P, page @pageref(AlphaPPin).

@enter(multiple)
@label(BetaNPin)
@index(@g(b)N, pin submode)
@indexentry(key "N@g(b), pin submode",entry "@g(b)N, pin submode",number)
@indexentry(key "Pin submode, N@g(b)", entry "Pin submode, @g(b)N",number)
@index(Moving pin number)
@index(Pin number, moving)

@emphasize[@g(b)N]@\Moves the position of the pin number.  Asks for a location
number.  Since you probably don't want to refer to the table below,
or memorize it, you can reply with a "?" and this list will be
displayed.  In addition, @g(e)N can be used to reposition the pin.
@enter(format,group)
@enter(format)
0=Up and right
1=Up
2=Up and left
3=Left
4=Down and left
5=Down
6=Down and right
7=Right
@leave(format)
@leave(format)
The pin quadrants are shown below.
@enter(format,group)
@enter(format)
      1
    2   0
  3       7
    4   6
      5
@leave(format)
@leave(format)
Typical preferences are:
@enter(format)
@enter(format)
Pins at top of box: up and right (0)

Pins at left of box: up and left (2)

Pins at right of box: up and right (0)

Pins at bottom of box:  down and right (6)
@leave(format)
@leave(format)
@leave(multiple)

@index(@g(e)N, pin submode)@indexentry(key "N@g(e), pin submode",entry "@g(e)N, pin submode",number)@indexentry(key "Pin submode, N@g(e)", entry "Pin submode, @g(e)N",number)
@index(Nipple bit)

@g(e)N@\This allows a more general control of the position of the
pin number.  This is particularly useful if one is trying to place
the pin number reasonably in relation to a drawing with angled
edges, e.g., the upper pin of a two-input NOR gate.  None of
the options of @g(a)N really work right.  This command accepts
an X,Y or just X value as the offset for the pin number (where
X and Y are signed values in units of one cursor step) and
moves the pin number accordingly.  Historical note:  this used
to be called the "nipple bit".

@label(AlphaPPin)
@index(@g(a)P, pin submode)@indexentry(key "P@g(a), pin submode",entry "@g(a)P, pin submode",number)@indexentry(key "Pin submode, P@g(a)", entry "Pin submode, @g(a)P",number)
@emphasize[@g(a)P]@\Place a pin.  
The pin is placed exactly under the cursor.  Note that the
cursor doesn't have to be on any lines of the body!  Therefore,
you had better be certain that the cursor is where you want the pin.
The pin number may be any one of the form (where # is an arbitrary
number):
@enter(example)
#
#/B
#-H
#-L
#/B-H
#/B-L
@leave(example)
If /B is specified, the pin is bussed through the body.  Note
that although conventionally this pin should be directly across the
body from its corresponding pin, it doesn't have to be (but
you'd better have good reason for not doing this!).  This is
used, for example, for an enable line of a RAM which is bussed
through to all other RAMs which should be enabled at the same 
time.  To clear the bussing property, you can specify a new pin
number followed just by a slash (if you decide, for example, to
bus the pins in the other direction).  The bussed pin numbers
will not be plotted.  If -H or -L are specified, the
default polarity is set to High or Low.  To clear a default
polarity, just use a - followed by nothing.

@index(@g(a)T, pin submode)
@indexentry(key "T@g(a), pin submode",entry "@g(a)T, pin submode",number)
@indexentry(key "Pin submode, T@g(a)", entry "Pin submode, @g(a)T",number)

@g(a)T@\Place text.  See @g(a)T in text/property submode, page @pageref(AlphaTtpmode).

@index(@g(e)T, pin submode)
@indexentry(key "T@g(e), pin submode",entry "@g(e)T, pin submode",number)
@indexentry(key "Pin submode, T@g(e)", entry "Pin submode, @g(e)T",number)

@emphasize[@g(e)T]@\Enter text/property submode; see section @ref(tpmode) on page
@pageref(tpmode).



@label(PinModeFLPin)
@index(FLPIN, pin submode)
@index(Pin submode, XFLPIN)

XFLPIN@\Asks for a string, and marks all pins whose
pin name contains the string as a substring.  Note that
@g(a)F is already used for something different in pin submode,
so you can't use it to find the pins thus marked; see
XFLPNEXT.

@index(FLPNEXT, pin submode)
@index(Pin submode, XFLPNEXT)

XFLPNEXT@\Find and unmark  the next marked pin in the set marked by XFLPIN.

@index(@g(a)Y, pin submode)
@indexentry(key "Y@g(a), pin submode",entry "@g(a)Y, pin submode",number)
@indexentry(key "Pin submode, Y@g(a)", entry "Pin submode, @g(a)Y",number)

@g(a)Y@\Place new or change old property; see @g(a)Y on page @pageref(AlphaYtpmode).

@index(@g(b)Y, pin submode)
@indexentry(key "Y@g(b), pin submode",entry "@g(b)Y, pin submode",number)
@indexentry(key "Pin submode, Y@g(b)", entry "Pin submode, @g(b)Y",number)

@g(b)Y@\Change old property; see @g(b)Y on page @pageref(BetaYtpmode).

@leave(description)

@newpage()
@sec(Text/Property Submode)@label(tpmode)

To enter text/property submode, type @g(e)T from pin submode, edit submode,
insert submode.

Text has two controls of its position.  The
@index(Offset, of text)
@i[Anchor point] 
@index(Anchor point, of text)
@index(Text, anchor point)
@index(Text, offset)
of the text is the point which is associated with the text.
The text may be placed anywhere relative to the anchor point
by changing its @i[offset].  Thus, it is common in body
definitions to associate the text of a pin number with the
point defining the pin number, then move its offset so that it
is positioned correctly for the drawing.  Offsets are computed
relative to the drawing scale, so they tend to remain correct
across various scales.

@enter(description)
@index(@g(a)", text/property submode)
@indexentry(key <"@g(a), text/property submode>,entry <@g(a)", text/property submode>,number)
@indexentry(key <Text/property submode, "@g(a)>,entry <Text/property submode, @g(a)">,number)
@index(Macro, storing text)@index(Macro, storing property)
@index(Text, storing in macro)@index(Property, storing in macro)

@g(a)"@\Store the text or property text in a macro.

@index(@g(b)", text/property submode)
@indexentry(key <"@g(b), text/property submode>,entry <@g(b)", text/property submode>,number)
@indexentry(key <Text/property submode, "@g(b)>,entry <Text/property submode, @g(b)">,number)
@index(Macro, storing property name)
@index(Property name, storing in macro)

@g(b)"@\Store property name in macro.

@index[@g(e)$ <escape>, text/property submode]
@indexentry(key "Escape, text/property submode",entry "<Escape>, text/property submode",number)
@indexentry(key "Text/Property submode, escape",entry "Text/Property submode, <escape>",number)

@g(e)$@\(@g(e)<escape>)  @u[Return to edit submode].

@index(@g(e)A, text/property submode)
@index(@g(e)A, enter alter mode)
@indexentry(key "A@g(e), enter alter mode", entry "@g(e)A, enter alter mode",number)
@indexentry(key "A@g(e), text/property submode",entry "@g(e)A, text/property submode",number)
@indexentry(key "Text/property submode, A@g(e)",entry "Text/property submode, @g(e)A",number)

@emphasize[@g(e)A]@\Enter Alter mode on the current text; see section @ref(Altermode) on page @pageref(altermode).


@index(@g(a)D, text/property submode)
@indexentry(key "D@g(a), text/property submode",entry "@g(a)D, text/property submode",number)
@indexentry(key "Text/property submode, D@g(a)",entry "Text/property submode, @g(a)D",number)
@index(Text, deleting)
@index(Deleting text)
@index(Property, deleting)
@index(Deleting property)

@emphasize[@g(a)D]@\Delete text or property completely.  To make a property
invisible, see @g(a)K.

@index(@g(b)D, text/property submode)
@indexentry(key "D@g(b), text/property submode",entry "@g(b)D, text/property submode",number)
@indexentry(key "Text/property submode, D@g(b)",entry "Text/property submode, @g(b)D",number)

@g(b)D@\If the star is sitting on a property, the property is
converted to ordinary text.  If it was invisible, the character
size is set to the standard character size. 

@index(@g(a)E, text/property submode)
@indexentry(key "E@g(a), text/property submode",entry "@g(a)E, text/property submode",number)
@indexentry(key "Text/property submode, E@g(a)",entry "Text/property submode, @g(a)E",number)

@emphasize[@g(a)E]@\Exit the editor and return to drawing level.

@index(@g(a)F, text/property submode)
@indexentry(key "F@g(a), text/property submode",entry "@g(a)F, text/property submode",number)
@indexentry(key "Text/property submode, F@g(a)",entry "Text/property submode, @g(a)F",number)

@g(a)F@\Find the next marked text or property.

@index(@g(b)F, text/property submode)
@indexentry(key "F@g(b), text/property submode",entry "@g(b)F, text/property submode",number)
@indexentry(key "Text/property submode, F@g(b)",entry "Text/property submode, @g(b)F",number)

@g(b)F@\Asks for a string, then finds  all properties whose names 
have the string as a substring and marks them for  retrieval with @g(a)F.

@index(@g(e)F, text/property submode)
@indexentry(key "F@g(e), text/property submode",entry "@g(e)F, text/property submode",number)
@indexentry(key "Text/property submode, F@g(e)",entry "Text/property submode, @g(e)F",number)

@g(e)F@\Asks for a string, then finds all text and properties whose
text contain the string as a substring and marks them for
retrieval with @g(a)F.

@label(AlphaKTpmode)
@index(@g(a)K, text/property submode)
@indexentry(key "K@g(a), text/property submode",entry "@g(a)K, text/property submode",number)
@indexentry(key "Text/property submode, K@g(a)",entry "Text/property submode, @g(a)K",number)
@index(Invisible text)
@index(Invisible properties)
@index(Properties, invisible)
@index(Text, invisible)

@emphasize[@g(a)K]@\Stops displaying the text or property.  If text, this
delete is (the same as @g(a)D).  If it is a property, it is not
longer displayed unless XIDENTS mode (page @pageref(XIDENTS))
is set.  Note that if XIDENTS mode is set when this command is
issued, you won't see any discernable difference on the screen!


@index(@g(a)M, text/property submode)
@indexentry(key "M@g(a), text/property submode",entry "@g(a)M, text/property submode",number)
@indexentry(key "Text/property submode, M@g(a)",entry "Text/property submode, @g(a)M",number)
@index(Text, moving)
@index(Moving text)


@g(a)M@\Move the text or property.  The text follows the cursor until
you type a <space>.  This moves the "anchor point" of the text.
To move the offset of the text around the anchor point, use XTMOVE
instead.  The anchor point of text is usually to the left for
body text at the left and to the right for body text at the right
or the body (and inside).

@index(@g(b)M, text/property submode)
@indexentry(key "M@g(b), text/property submode",entry "@g(b)M, text/property submode",number)
@indexentry(key "Text/property submode, M@g(b)",entry "Text/property submode, @g(b)M",number)
@index(Text, moving)
@index(Moving text)
@index(Property, moving)
@index(Moving property)

@g(b)M@\Obsolete.  Change text offset from text location.  After this
command, the offset is not automatically recalculated when the text
is changed.
Use XTMOVE instead, which moves with a finer adjustment than
cursor steps.


@index(@g(e)M, text/property submode)
@indexentry(key "M@g(e), text/property submode",entry "@g(e)M, text/property submode",number)
@indexentry(key "Text/property submode, M@g(e)",entry "Text/property submode, @g(e)M",number)
@index(Text, moving)
@index(Moving text)
@index(Property, moving)
@index(Moving property)

@g(e)M@\Move the text or property.  Like @g(a)M except that the text is
moved to the cursor first.

@label(AlphaTTpMode)
@index(@g(a)T, text/property submode)
@indexentry(key "T@g(a), text/property submode",entry "@g(a)T, text/property submode",number)
@indexentry(key "Text/property submode, T@g(a)",entry "Text/property submode, @g(a)T",number)

@emphasize[@g(a)T]@\Asks for text, and places it at the current cursor position.
If
@index(@k(doublearrow), <crlf>)
@indexentry(key "Crlf, @k(doublearrow)",entry "<Crlf>, @k(doublearrow)",number)
@indexentry(key "crlf, inserting in string",entry "<Crlf>, inserting in string",number)
a @k(doublearrow) appears, it is replaced with a <crlf>.  If the character
"\"
@index(\, in text string)
is the first character in the string, the following character
@index(Text scale)
@index(Scaling text)
will be interpreted as the character size.  If "\V"
@index(\V, vertical text)
@index(Text, vertical)
@index(Vertical text)
@indexentry(key "V, vertical text", entry "\V, vertical text", number)
appears first in the string, the following character will
be interpreted as the character size and the text will be
plotted vertically.  A point is displayed at the
beginning of vertical text.


@index(XTMOVE)
@index(TMOVE)
@index(Text, moving)
@index(Moving text)

XTMOVE@\Move the text or property offset.  Moves it in very fine steps.
See XTMOVE on page @pageref(XTMOVE).

@label(AlphaYtpmode)
@index(@g(a)Y, text/property submode)
@indexentry(key "Y@g(a), text/property submode",entry "@g(a)Y, text/property submode",number)
@indexentry(key "Text/property submode, Y@g(a)",entry "Text/property submode, @g(a)Y",number)
@index(Property, setting)

@g(a)Y@\Asks for a property name.  It then asks for text to associate
with the property.  If the property does not exist, it is now
created.  The text is placed as in @g(a)T, page @pageref(AlphaTtpmode),
but may also be referred to by its property name.  If the property
exists, its text is replaced.  If either the property name or the
text is ended with <escape> (@g(e)$), the command is aborted.
To make a property invisible, see @g(a)K, page @pageref(AlphaKtpmode).

@label(BetaYtpmode)
@index(@g(b)Y, text/property submode)
@indexentry(key "Y@g(b), text/property submode",entry "@g(b)Y, text/property submode",number)
@indexentry(key "Text/property submode, Y@g(b)",entry "Text/property submode, @g(b)Y",number)
@index(Property, altering)
@index(Property, changing)

@g(b)Y@\Asks for a property name.  Will do unique disambiguation on
a partially specified name.  If the property exists, you are
prompted for the new text.  If the property name or text is
ended with an <escape> (@g(e)$), the command is aborted.

@index(@g(e)Z, text/property submode)
@indexentry(key "Z@g(e), text/property submode",entry "@g(e)Z, text/property submode",number)
@indexentry(key "Text/property submode, Z@g(e)",entry "Text/property submode, @g(e)Z",number)

@g(e)Z@\Recalculates the offset for the text in order to center the
text over the anchor point.  Text changes will cause the offset to
be updated.
@leave(description)

@chap(Set mode)@label(Setmode)

Set mode is a way of defining a set of bodies and points that
are to be acted upon as a group.  Sets may be moved, written out,
deleted, etc.   Once a set is created, it is remembered as part of
the drawing.  Frequently sets are created only for doing a
single operation, such as moving a group of bodies with their
text and connections, and thus may be deleted immediately, but
they must be deleted explicitly.  In other cases, sets may
remain around for the life of the drawing.
It is usually a good idea to leave sets around, since if you
had to move something once, you will probably have to move the
same something again.  Sets do not cost much to keep around.

A set is initially created by drawing a box around the bodies and
points which are supposed to be in it using the "+" and "-" commands.
When the terminating "-" is typed, the bodies and points which
are in the set are marked with large "B" and "P" designators,
and the center of gravity of the set is marked with an "S".
   Individual points or
bodies may be added or deleted by use of the @g(a)&, @g(b)&, @g(a)# and @g(b)#
commands in point mode or body mode.  Sets may be combined by those
commands in set mode.  A point or body may belong to more than one
set.

After many insertions or deletions
@label(XSETCEN2)
of bodies or points, the point on the drawing which represents
the "center" of the set may no longer be anywhere near the
physical center of the set.  The center is not recomputed during
the addition or deletion of bodies or points.  The
@index(SETCEN)@index(XSETCEN)
XSETCEN command, page @pageref(XSETCEN), will recompute the
center of all sets currently defined.  

@enter(description)
@index(@g(a)&, set mode)
@indexentry(key "&@g(a), set mode",entry "@g(a)&, set mode",number)
@indexentry(key "Set mode, &@g(a)",entry "Set mode, @g(a)&",number)
@index(Set, adding to set)@index(Union of sets)@index(Set, union)
@index(Adding set to set)

@g(a)&@\The closest set is added to the current set.  If there
is no current set, this creates a new set.

@label(BetaAmpersandSet)
@index(@g(b)&, set mode)
@indexentry(key "&@g(b), set mode",entry "@g(b)&, set mode",number)
@indexentry(key "Set mode, &@g(b)",entry "Set mode, @g(b)&",number)

@g(b)&@\The closest set is made the current set.

@index(@g(e)&, set mode)
@indexentry(key "&@g(e), set mode",entry "@g(e)&, set mode",number)
@indexentry(key "Set mode, &@g(e)",entry "Set mode, @g(e)&",number)
@g(e)&@\Clears the current set.

@index(@g(a)#, set mooe)
@indexentry(key "#@g(a), set mode",entry "@g(a)#, set mode",number)
@indexentry(key "Set mode, #@g(a)",entry "Set mode, @g(a)#",number)

@g(a)#@\Removes all members of the closest set from the current set.
This command is illegal if the current set is the closest set.

@index(@g(b)#, set mode)
@indexentry(key "#@g(b), set mode",entry "@g(b)#, set mode",number)
@indexentry(key "Set mode, #@g(b)",entry "Set mode, @g(b)#",number)

@g(b)#@\Remove all members of the closest set from all other sets,
then delete the closest set (deleting the set does not delete
the elements of the set from the drawing).

@index(+, set mode)@index(Set, creating)@index(Creating a set)

@emphasize[+]@\Draw a box around the points and bodies you would like in
the set.  The box may be of arbitrary shape (not just rectangular.
Type a + to start a line.  The line will then follow the cursor
motion.  Each time a + is typed, the current line is "frozen" and
a new line segment is started.  See - to close the box.

@index(-, set mooe)@index(Set mode, -)

@emphasize[-]@\Closes the box.  All members of the set will then be
displayed by flashing B's or P's.  The "center" of the set is
indicated by a large S.

@index(@g(a)D, set mode)@indexentry(key "D@g(a), set mode",entry "@g(a)D, set mode",number)@indexentry(key "Set mode, D@g(a)",entry "Set mode, @g(a)D",number)
@index(Set, deleting)@index(Deleting a set)

@emphasize[@g(a)D]@\Delete the closest set.  Note that deleting the set
@u[does not] delete the elements of the set!  To delete the
elements of the set, use @g(b)D.

@index(@g(b)D, set mode)@indexentry(key "D@g(b), set mode",entry "@g(b)D, set mode",number)@indexentry(key "Set mode, D@g(b)",entry "Set mode, @g(b)D",number)
@index(Set, deleting elements of)@index(Elements of set, deleting)

@g(b)D@\Delete all the elements of the closest set from the picture.

@index(@g(e)D, set mode)@indexentry(key "D@g(e), set mode",entry "@g(e)D, set mode",number)@indexentry(key "Set mode, D@g(e)",entry "Set mode, @g(e)D",number)
@index(Set, deleting complement of)

@g(e)D@\Delete anything not in the closest set.  The @k(exists) name is
forgotten.

@index(@g(a)J, set mode)@indexentry(key "J@g(a), set mode",entry "@g(a)J, set mode",number)@indexentry(key "Set mode, J@g(a)",entry "Set mode, @g(a)J",number)
@g(a)J@\Move the cursor to the current set, thus making it the closest
set.


@index(@g(b)K, set mode)@indexentry(key "K@g(b), set mode",entry "@g(b)K, set mode",number)@indexentry(key "Set mode, K@g(b)",entry "Set mode, @g(b)K",number)
@index(Text deleting)@index(Deleting text)
@g(b)K@\Delete all text on the points in the closest set.

@index(@g(a)M, set mode)@indexentry(key "M@g(a), set mode",entry "@g(a)M, set mode",number)@indexentry(key "Set mode, M@g(a)",entry "Set mode, @g(a)M",number)
@index(Moving a set)@index(Set, moving)

@emphasize[@g(a)M]@\Moves the cursor to the center of the set.  The set
will now follow the cursor until a <space> is typed.   Lines are
massaged as the elements of the set are moved.

@index(@g(e)M, set mode)@indexentry(key "M@g(e), set mode",entry "@g(e)M, set mode",number)@indexentry(key "Set mode, M@g(e)",entry "Set mode, @g(e)M",number)

@g(e)M@\Like @g(a)M, except that it first moves the center of the set to the cursor.

@index(Set, copying)@index(Copying a set)
@index(@g(b)P, set mode)@indexentry(key "P@g(b), set mode",entry "@g(b)P, set mode",number)@indexentry(key "Set mode, P@g(b)",entry "Set mode, @g(b)P",number)

@g(b)P@\Makes a copy of the closest set at the current cursor
location, then enters set-move mode (@g(a)M).

@index(DELSET)
@index(Sets, deleting all)
@index(XDELSET)

XDELSET@\Deletes all sets.  Does not delete their contents!

@index(SETCEN)@index(XSETCEN)
XSETCEN@\Recalculates the center of all sets.  This is necessary
if a lot of inserting and deleting of elements has been going
on with sets.

@index(XSETWRT)
@index(SETWRT)

XSETWRT@\Performs an @g(a)W operation (see page @pageref(alphaW)),
but only the members of the current set are written out.

XWRTSET@\Same as XSETWRT.  This is in case you forget the order
of "WRT" and "SET".

@leave(description)

@chap(Body Text/Property Mode)@label(btpmode)

This is a very special mode; it allows you to supply
 or change information which is local only to that
particular instance of the body in the drawing.  Normally, except
for properties set @i[in addition to body definition properties],
 such changes should be
made only to the body definition.  Thus, if you use this mode,
you may be asking for trouble.  However, special circumstances may
require using it, so it is sometimes necessary.  Normally, you
should use body edit mode, chapter @ref(editmode).


To enter body text/property mode, type @g(e)Y in body mode.
Most of the commands below are the same as in body edit text/property
submode; see section @ref(Tpmode) on page @pageref(tpmode).
@index(@g(e)Y, enter body text/property mode)
@indexentry(key "Y@g(e), enter body text/property mode",entry "@g(e)Y, enter body text/property mode",number)
@enter(description)
@index(@g(a)", Body Text/Property mode)
@indexentry(key <"@g(a), Body Text/propterty mode>,entry <@g(a)", Body Text/Property mode>,number)
@indexentry(key <Body Text/property mode, "@g(a)>,entry <Body Text/property mode, @g(a)">,number)
@index(Macro, storing body text)
@index(Body text, storing into macro)

@g(a)"@\Store closest text into macro.

@index(@g(b)", Body Text/Property mode)
@indexentry(key <"@g(b), Body Text/propterty mode>,entry <@g(b)", Body Text/Property mode>,number)
@indexentry(key <Body Text/property mode, "@g(b)>,entry <Body Text/property mode, @g(b)">,number)
@index(Macro, storing property name)
@index(Property name, storing into macro)

@g(b)"@\Store property name into macro.


@index(@g(e)A, Body Text/Property mode)@indexentry(key "A@g(e), Body Text/Property mode",entry "@g(e)A, Body Text/Property mode",number)
@index(Altering text)
@index(Altering property)
@indexentry(key "Body Text/property mode, A@g(e)",entry "Body Text/property mode, @g(e)A",number)

@g(e)A@\Enter alter mode with closest text or property.  See section @ref(Altermode) on page @pageref(Altermode).

@index(@g(a)D, Body Text/Property mode)@indexentry(key "D@g(a), Body Text/Property mode",entry "@g(a)D, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, D@g(a)",entry "Body Text/property mode, @g(a)D",number)
@index(Deleting body text or property)
@index(Body text, deleting)
@index(Body property, deleting)
@index(Property, deleting)

@g(a)D@\Delete text or property.

@index(@g(b)D, Body Text/Property mode)@indexentry(key "D@g(b), Body Text/Property mode",entry "@g(b)D, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, D@g(b)",entry "Body Text/property mode, @g(b)D",number)

@g(b)D@\Make property into ordinary text.

@index(@g(a)E, enter body editor)
@index(@g(a)E, Body Text/Property mode)@indexentry(key "E@g(a), Body Text/Property mode",entry "@g(a)E, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, E@g(a)",entry "Body Text/property mode, @g(a)E",number)

@g(a)E@\Enter the body editor with the current body.  See section @ref(Editmode), page @pageref(Editmode).


@index(@g(a)F, Body Text/Property mode)@indexentry(key "F@g(a), Body Text/Property mode",entry "@g(a)F, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, F@g(a)",entry "Body Text/property mode, @g(a)F",number)

@g(a)F@\Find the next text or property which was marked (e.g., by
@g(b)F or @g(e)F).

@index(@g(b)F, Body Text/Property mode)@indexentry(key "F@g(b), Body Text/Property mode",entry "@g(b)F, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, F@g(b)",entry "Body Text/property mode, @g(b)F",number)

@g(b)F@\Find and mark all properties which have the string you
type as a substring of their property names.

@index(@g(e)F, Body Text/Property mode)@indexentry(key "F@g(e), Body Text/Property mode",entry "@g(e)F, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, F@g(e)",entry "Body Text/property mode, @g(e)F",number)

@g(e)F@\Find and mark all text or properties which have the string
you type as a substring of their property names.


@index(@g(a)K, Body Text/Property mode)
@indexentry(key "K@g(a), Body Text/Property mode",entry "@g(a)K, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, K@g(a)",entry "Body Text/property mode, @g(a)K",number)
@index(Invisible properties)
@index(Property, making invisible)

@g(a)K@\Like @g(a)K in Body text/property submode; see @g(a)K on page
@pageref(AlphaKtpmode).  However, this command applies only
to the current body.

@index(@g(a)M, Body Text/Property mode)@indexentry(key "M@g(a), Body Text/Property mode",entry "@g(a)M, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, M@g(a)",entry "Body Text/property mode, @g(a)M",number)
@index(Moving body text)
@index(Moving properties)

@g(a)M@\Move text or property.  Text follows cursor until an
<escape> or <space> is typed.

@index(@g(b)M, Body Text/Property mode)
@indexentry(key "M@g(b), Body Text/Property mode",entry "@g(b)M, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, M@g(b)",entry "Body Text/property mode, @g(b)M",number)

@g(b)M@\Move text or property offset.
This is obsolete; use XTMOVE (page @pageref(XTMOVE)).

@index(@g(e)M, Body Text/Property mode)
@indexentry(key "M@g(e), Body Text/Property mode",entry "@g(e)M, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, M@g(e)",entry "Body Text/property mode, @g(e)M",number)

@g(e)M@\Move text as in @g(a)M, but first move the text to the cursor.

@index(@g(a)T, Body Text/Property mode)
@indexentry(key "T@g(a), Body Text/Property mode",entry "@g(a)T, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, T@g(a)",entry "Body Text/property mode, @g(a)T",number)
@label(AlphaTbtpMode)

@g(a)T@\Similar to @g(a)T in edit text/property submode (page @pageref(AlphaTtpmode)), but the
text is associated with the current body, not the definition.
This might be used to attach comments to a particular body.

@index(LPROPS)@index(XLPROPS)
XLPROPS@\Displays the current list of local and body definion
properties associated with the nearest body.  If a local definition
has over-ridden a body property definition, only the local
definition is displayed.

@Label(AlphaYbtpMode)
@index(@g(a)Y, Body Text/Property mode)@indexentry(key "Y@g(a), Body Text/Property mode",entry "@g(a)Y, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, Y@g(a)",entry "Body Text/property mode, @g(a)Y",number)

@g(a)Y@\Like @g(a)Y in edit text/property submode (page @pageref(AlphaYtpmode)),
but if the property already exists in the body definition, that
version is no longer displayed.  The new property definition is not
affected by changes to the body definition.

@label(BetaYbtpMode)
@index(@g(b)Y, Body Text/Property mode)@indexentry(key "Y@g(b), Body Text/Property mode",entry "@g(b)Y, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, Y@g(b)",entry "Body Text/property mode, @g(b)Y",number)

@g(b)Y@\Like @g(b)Y in edit text/property submode (page @pageref(BetaYtpmode)),
but if the property already exists in the body definition, that
version is no longer displayed.  The new property definition is not
affected by changes to the body definition.

@index(@g(e)Z, Body Text/Property mode)@indexentry(key "Z@g(e), Body Text/Property mode",entry "@g(e)Z, Body Text/Property mode",number)
@indexentry(key "Body Text/property mode, Z@g(e)",entry "Body Text/property mode, @g(e)Z",number)

@g(e)Z@\Recalculates the text offset to center it over the move-point.
Text is now automatically offset when changed.

@leave(description)

@chap(Line mode)@label(linemode)
To enter line mode, type @g(e)L.
@index(Line mode, entering)@index(@g(e)L, enter line mode)
@indexentry(key "L@g(e), enter line mode",entry "@g(e)L, enter line mode",number)
Line mode has only a few commands.  It is used to fix up
lines that are not quite right.  Two cases which happen
are:
@enter(itemize)
A line has to be routed around a body which has been placed
(or will be placed) later.  This involves, essentially, creating
new points on the line.

A body definition has been changed, so the pins are in different
places, and the lines connecting them are no longer horizontal
or vertical.  Although the XMUNG command can sort of fix this
up (see page @pageref(XMUNG)), it is not always successful.
@leave(itemize)

@enter(description)
@index(@g(a)B, line mode)
@indexentry(key "B@g(a), line mode",entry "@g(a)B, line mode",number)
@label(AlphaBLine)
@indexentry(key "Line mode, B@g(a)",entry "Line mode, @g(a)B",number)

@emphasize[@g(a)B]@\Puts a bend in the line even with the cursor (makes it
into three segments).  You are now moving the midpoint of the line.
The midpoint will follow the cursor until you type a <space>.
In the most common way of using this, you immediately type a
<space> and go into point mode (via @g(e)P) and move one of the
newly-created points.

@label(BetaBline)
@indexentry(key "Line mode, B@g(b)",entry "Line mode, @g(b)B",number)@index(@g(b)B, line mode)
@indexentry(key "B@g(b), line mode",entry "@g(b)B, line mode",number)

@emphasize[@g(b)B]@\Puts a point on the line even with the cursor.  The point
will now follow the cursor until you type a <space>.  This is
particularly useful for straightening out non-horizontal/vertical
lines.

@indexentry(key "Line mode, D@g(a)",entry "Line mode, @g(a)D",number)@index(@g(a)D, line mode)
@indexentry(key "D@g(a), line mode",entry "@g(a)D, line mode",number)
@index(Line, deleting)@index(Deleting a line)
@label(AlphaDLine)

@emphasize[@g(a)D]@\Delete the line.  Does not affect its endpoints.  This is
also a way of deleting a line segment without deleting all the segments
and text connected to it, as @g(a)D in point mode (page @pageref(AlphaDPoint))
would do.

@leave(description)

@chap(Alter mode)@label(altermode)
@sec(Entering alter mode)
To enter alter mode, type @g(e)A in text mode, text/property mode,
@indexentry(key "A@g(e), enter alter mode",entry "@g(e)A, enter alter mode",number)
or body text/property mode.
To alter a macro, alter mode is entered with the XAMACRO
@index(XAMACRO)
command (page @pageref(XAMACRO)).  Partial alterations
to a macro may be discarded by leaving alter mode with
@index(XQUIT)
an XQUIT command (page @pageref(XQUIT)).
@index(@g(e)A, enter alter mode)@index(Alter mode, entering)


@sec(Alter commands)
Alter mode is like the SOS alter mode we know and love, except
it's different.  Just sufficiently different to surprise you
occasionally.
Wherever evident, the differences are @u[underlined] in the
section below.

Notable differences are the fact that the search commands can
look for strings instead of single characters, the
"wildcard" characters for pattern matching are different
(section @ref(pattern), page @pageref(pattern)) and
some transliteration of otherwise non-printing characters
is performed (section @ref(translit), page @pageref(translit)).


@enter(description)
@index(Numbers, alter mode)
0...9@\Numbers are accumulated and remembered. 
They provide iteration counts for the commands.

@index(#, alter mode)@index(Alter mode, #)
@index<Macro, storing number (alter mode)>

@i<n>#@\Search for the @i<n>th number (a contiguous string of digits).
Store this number in a macro.
This macro may now be called whenever this number is needed.

@index[@g(e)$ <escape>, alter mode]
@indexentry(key "escape, alter mode",entry "<Escape>, alter mode",number)
@indexentry(key "Alter mode, escape",entry "Alter mode, <escape>",number)

@g(e)$@\(@g(e)@i<escape>)  At alter command level: @u[leave alter mode].
In C command: @u[leave next character unchanged].


@index(-, alter mode)
-@\Precedes a numeric argument to make it negative.  This is 
useful for some commands, such as delete and space over.

@index(Size of text, altering)
@index(Altering text size)

\@i<size>@\In text alter mode and text/property alter mode only!  This
sets the character size to use for this piece of text.  The @i<size>
is specified as in text typein, page @pageref(AlphaTtpmode):
@enter(example)
@enter(center)
@i<size> = @i<sizedigit> | V@i<sizedigit>
@leave(center)
@leave(example)
The size digit is a scale in the range 1-4.  The "V", if given,
causes the text to be plotted vertically.

@indexentry(key "Alter mode, backspace",entry "Alter mode, <backspace>",number)
@indexentry(key "Backspace, alter mode",entry "<Backspace>, alter mode",number)
@i<n>@i<backspace>@\Move backwards @i<n> characters; if @i<n> negative,
move forward @i<n> characters.


@index(Character, changing)@index(Changing a character)
@index(Alter mode, C)@index(C, alter mode)
@i<n>C@i<string>@\Changes the next @i<n> characters in the text.  An
@i<escape> (@g(e)$) or carriage return will @u[leave the corresponding
text character unchanged] (!).


@index(Character, deleting)
@index(Deleting a character)
@index(Alter mode, D)@index(D, alter mode)

@i<n>D@\Delete @i<n> characters.  If @i<n> is negative, deletes @i<n>
characters before the pointer.  If the pointer is at the end (positive
@i<n>) or beginning (negative @i<n>), this command does nothing.

@index(F, alter mode)@index(Alter mode, F)
@label(AlterF)

@enter(multiple)
@i<n>F@i<string>@i<t>@\Searches for the @i<n>th occurence of the @i<string> as a
substring of the current text.  If found, and @i<t> is an
@i<escape> (@g(e)$), then delete this string.  If @i<t> is not an
@i<escape>, the only other choice is that @i<t> is a @i<crlf>.  If
@i<t> is @i<crlf>, the string is not deleted.

If the @i<string> is null, the previous search string is used.
If the previous search string is also null, no search is done.

For details of the string match, see page @pageref(pattern).
@leave(multiple)

@index(I, alter mooe)@index(Alter mode, I)
I@\Asks for insertion text.  The string you type is terminated
with a @i<crlf>.  The text is then inserted before the current
character, which remains current (the text is inserted to the left
of the cursor).

@index(K, alter mode)@index(Alter mode, K)

@i<n>K@i<char>@\Delete up to @u[and including] then @i<n>th occurrence
of the @i<char>.  If @i<char> does not appear at least @i<n> times,
no deletion is done, @u[but you are left at the end of the line].

@index(Alter mode, N)@index(N, alter mode)
@i<n>N@\Search for the @i<n>th occurrence of a number (a contiguous
string of digits).  If there are not at least @i<n> numbers in the
text, you are left at the end of the line.


@index(Alter mode, R)@index(R, alter mode)
@i<n>R@\Equivalent to @i<n>DI.  Deletes the specified number of
characters and accepts a replacement string.


@index(S, alter mode)@index(Alter mode, S)
@i<n>S@i<char>@\Move to @i<char>.  Moves to end of text if @i<char> not found.
If found, pointer is placed @u[after] the character (!).

@indexentry(key "Alter mode, space",entry "Alter mode, <space>",number)
@indexentry(key "Space, alter mode",entry "<Space>, alter mode",number)
@i<n>@i<space>@\Move forward @i<n> spaces.  If @i<n> negative, move backwards
@i<n> spaces.  If at the end of the line (@i<n> positive) or beginning
of  the line (@i<n> negative) nothing happens.

@index(U, alter mode)@index(Alter mode, U)
@i<n>U@\Search for the @i<n>th occurrence of a number (a contiguous
string of digits) and delete it.


@leave(description)

@sec(Pattern matching)

@label(pattern)

Pattern matching for the F command is also used for the various
search commands that locate body names, property names, text, etc.
The pattern match is done as follows:
@enter(itemize)
If the flag for SPACES is off (default, see page @pageref(XSPACES) for
the XPSACES command to change this), then spaces in either the
search string or the target string are ignored.  The character
@indexentry(key "Crlf, @k(doublearrow)",entry "<Crlf>, @k(doublearrow)",number)
"@k(doublearrow)", representing <crlf> in some contexts, is converted to a
space for purposes of the comparison.

If the flag for EXACT case match is off (default, see page @pageref(XEXACT) for the XEXACT command to change this), then lower case characters
in the search string and target string are converted to upper case.

The following special characters are recognized in patterns:
@enter(description)
@index(|, beginning of line pattern)
@index(Pattern |, beginning of line)
@index(Pattern |, end of line pattern)
@index(|, end of line pattern)
@index(Beginning of line, |)@index(End of line, |)
|@\Beginning or end of line.

@index(@k(forall), any character pattern)
@index(Pattern @k(forall), any character)
@k(forall)@\Any character.

@index(@z(), invert pattern match)
@index(Pattern @z(), invert)
@z()@\Invert match condition on next thing (e.g, @z()$, any non-letter).

@index(@k(infinity), any number of pattern)@index(Pattern @k(infinity), any number of)
@k(infinity)@\Any number of the next thing will match, including 0.  The
smallest string satisfying the match will be used.

@index(@z(), quote pattern)@index(Pattern @z(), quote)@index(Quote, @z())
@z()@\Quote the next character (e.g., @z()@k(infinity) to find an "infinity").

@index<$ (dollar) pattern, any letter>@index<Pattern $ (dollar), any letter>
@index(Any letter, $)@index(Letter, any, $)
$@\(dollar sign)  Matches any letter.

@index(% pattern, any digit)@index(Any digit, %)@index(Pattern %, any digit)
@index(Digit, any, %)

%@\Matches any digit.

@index(@z(\) pattern, any alphanumeric)@index(Any alphanumeric, @z(\))
@index(Pattern @z(\), any alphanumeric)@index(Alphanumeric, any, @z(\))
@z(\)@\Matches any alphanumeric.
@leave(description)
@leave(itemize)

@sec(Transliteration)@label(translit)

Certain transliterations are performed to handle non-printing characters
in editing.  These transliterations are somewhat inconsistent, in
that a <crlf> is represented in some contexts by the symbol
@indexentry(key "Crlf, @k(forall)",entry "<Crlf>, @k(forall)",number)
@k(forall) while in other contexts it is represented by
the symbol @k(doublearrow).
@indexentry(key "Crlf, @k(doublearrow)",entry "<Crlf>, @k(doublearrow)",number)
However, you can distinguish these two cases by
looking at the screen.

@enter(example)
Macro char     Editor char
<crlf>         <for all> @r(@k(forall))
<escape>       <not equal> @r(@z())
@leave(example)

@chap(Macros)
@label(macros)
@index(Macros)

@sec(Introduction to macros)
Macros provide a method of storing away some standard operations
for your drawings so you don't have to retype them.  There
are several varieties of macros and several ways of storing them:
@enter(itemize)
Temporary macros, which are defined by using ;P, are used for
one-shot iterations, such as laying down a set of signal
names or wires.  They are discarded after they are finished.

Permanent macros, which have names, are stored in the core
image for later use.

A permanent macro which has been marked for saving with the
XSMACRO command (page @pageref(XSMACRO)) will be saved
with the drawing and brought in with it.

A macro which has not been marked for saving can still be
saved on a macro-definition file by using the XWMACRO
command (page @pageref(XWMACRO)).  Such macro files can
be loaded with the XIMACRO command (page @pageref(XIMACRO)).

@leave(itemize)

@index(Macro, deleting)
@index(X-SMACRO)@index(-SMACRO)
@indexentry(key "SMACRO-",entry "-SMACRO",number)
@indexentry(key "XSMACRO-",entry "X-SMACRO",number)
A macro can be deleted from a drawing by using the X-SMACRO
command, i.e., it will not be saved with the drawing, or
it can be deleted immediately by using the XDMACRO command (page @pageref(XDMACRO)).

In general, a macro can be called whenever a command is expected.
Some macros which return values, such as ;A (page @pageref(semicolonA)),
can be used anywhere typein is expected.  However, to distinguish
the ; which is invoking the macro from a ; which may be part of
the expected text, you must use some shift key, e.g., @g(a);, @g(b); or
@g(e);.

Macros are defined interactively; you type in commands and they
are both executed and stored in the macro, so you can see what
is happening.  After you have defined one complete action,
e.g., start line, move right some distance, attach line to 
nearest point, move back to the beginning, move down one @g(b)-distance,
you give a repeat count which includes the iteration you have
just done (e.g., to lay down eight wires, you would use ;R8 even
though there are only seven left to do).  The macro is
then executed that number of times.  If it was a permanent
macro, you can call it again to get the same set of actions
performed.

By using the ;A or ;N counters, you can generate signal names
or connector names in sequence, e.g., BUS DATA 01, BUS DATA 02,
etc.

Macros may nest to 102 levels; the only requirement is that each
macro contain an equal number of ;P and ;R commands.


@sec(Macro commands)
The following  commands  operate on
macros:
@enter(description)

@index(;#, macro)
@indexentry(key "Macro, #;",entry "Macro, ;#",number)
@indexentry(key "#, macro",entry ";#, macro",number)

;#@i<char>@\If the @i<char> is not a letter, does a ;= on it.
Otherwise, it converts the letter to a number using
sequential numbers for the DEC alphabet:
@enter(example)
@label(DECalphabet)
@center(ABCDEFHJKLMNPRSTUVWXYZ)
@index(Alphabet, DEC)
@index(DEC alphabet)
@leave(example)
This is the inverse of ;LD (page @pageref(SemicolonLD))

;=@i<char>@\Returns a decimal code of the character, minus
64.  Thus, for alphabetic characters, A=1, B=2, ...
This is the inverse function of ;L (page @pageref(SemicolonL)).


@index(;^, macro)@indexentry(key "Macro, ^;",entry "Macro, ;^",number)@indexentry(key "^, macro",entry ";^, macro",number)
;^@i<char>@\Returns the character whose ascii code is 100 (octal)
less than that of the character typed.  Lower case is
converted to upper case before processing this command.  This
allows the typein of control characters by using their letter,
e.g., ;^C produces the control-C character.

@index(@g(a):, macro)@indexentry(key "Macro, :@g(a)",entry "Macro, @g(a):",number)
@g(a):@\Shorthand for ";R0".  See ;R on page @pageref(SemicolonR).

@label(SemicolonA)
@indexentry(key "Macro, A;",entry "Macro, ;A",number)@indexentry(key "A, macro",entry ";A, macro",number)@index(;A, macro)

@enter(multiple)
;@i<w>A@i<n>,@i<m>,@i<i>@\Substitute at this point the number @i<n>, containing
at least @i<w> digits,  and
increment in by M each time through the macro @i<i> levels up from
the current one.  @i<n> and @i<m> may be negative.  If @i<i> is defaulted,
0 is assumed (each time through the current macro); if @i<m> is
defaulted, 1 is assumed.

If @i<w> is omitted, 1 is assumed for the minimum width.

For an example of the use of ;A, see section @ref(ALexample), page
@pageref(ALexample).

@leave(multiple)
@label(SemicolonC)
@index(Macro, calling)@indexentry(key "Macro, C;",entry "Macro, ;C",number)@indexentry(key "C, macro",entry ";C, macro",number)@index(;C, call macro)

@index(Call macro)
@emphasize[;C@i<name>]@\Call named macro.

@label(semicolonD)
@index(Macro, defining)@indexentry(key "Macro, D;",entry "Macro, ;D",number)@indexentry(key "D, macro",entry ";D, macro",number)@index(;D, define macro)

@index(Define macro)@index(Create macro)
;D@i<name>@\Start a permanent macro.  The macro is not executed
during its definition.  If the repeat count is greater than 1,
the remaining iterations are also ignored at definition time.

@indexentry(key ";D1, define macro",entry ";1D, define macro",number)
@indexentry(key "Macro, D;1",entry "Macro, ;1D",number)

;1D@i<name>@\Same as ;D except that an implicit XSMACRO is done
so the macro is saved.  See XSMACRO, page @pageref(XSMACRO).

@indexentry(key "Macro, E;",entry "Macro, ;E",number)@indexentry(key "E, macro",entry ";E, macro",number)@index(;E, eval)
;E@i<name>@\Terminate the @i<name> with a @i<crlf>.  Everything up
to the next ;R0 (or @g(a):) is stored in the named macro after
evaluation by the macro processor.

@indexentry(key "Macro, F;",entry "Macro, ;F",number)@indexentry(key "F, macro",entry ";F, macro",number)@index(;F, conditional)
@index(Conditional, in macro)
;F@i<n>@i<flag>@\Terminate with @i<crlf>.  The @i<flag> may be preceded
with a "-" to invert the test.  @i<n>  represents a count of
macro levels.  If the @i<flag> is true, all characters are
eaten but not executed until a macro @i<n> levels up from this
one is left.  Whatever that means.  <<Examples, anyone?>>
The current flag names are defined:
@enter(description)
@index(ABOL, macro flag)@index(Flag ABOL)@index(Conditional, ABOL)
ABOL@\True if alter mode cursor at the beginning of a line.

@index(AEOL, macro flag)@index(Flag AEOL)@index(Conditional, AEOL)
AEOL@\True if alter mode cursor at the end of a line.

@index(AFIND, macro flag)@index(Flag AFIND)@index(Conditional, AFIND)
AFIND@\True if the last alter mode F, S, K, N, U or # command
actually found something.  See chapter @ref(Altermode).

@index(CLOSES, macro flag)@index(Flag CLOSES)@index(Conditional, CLOSES)

CLOSES@\True if close to something <<appropriate to the current mode?>>

@index(DSKEND, macro flag)@index(Flag DSKEND)@index(Conditional, DSKEND)
DSKEND@\True if no XDSKIN file (page @pageref(XDSKIN)) is open.  To
facilitate the use of this flag, the end of file condition will
look like a match for the character <<missing>> in ;Y (see page
@pageref(SemicolonY)).  This is so control will revert to a
macro on end of file.

@index(EDGE, macro flag)@index(Flag EDGE)@index(Conditional, EDGE)
EDGE@\True if the last cursor move hit a screen edge (never true
in -WINDOW mode; see page @pageref(XWINDOW)).

@index(ENDMUL, macro flag)@index(Flag ENDMUL)@index(Conditional, ENDMUL)
ENDMUL@\True if the last @g(a)H command (see page @pageref(AlphaH)) 
incremented a multistring variable off the last value (the variable
value is now a null string).


@index(FALSE, macro flag)@index(Flag FALSE)
@index(Conditional, FALSE)

FALSE@\Always false.  Use -FALSE for true.

@index(FIND, macro flag)@index(Flag FIND)@index(Conditional, FIND)
FIND@\True if the last @g(a)F command in the appropriate mode
had a next thing to find.  See pages @pageref(AlphaFBody), @pageref(AlphaFPoint), @pageref(AlphaFPin).

@index(LSTEXP, macro flag)@index(Flag LSTEXP)@index(Conditional, LSTEXP)
LSTEXP@\True if the last ;X command (see page @pageref(SemicolonX))
returned a nonzero result.
@leave(description)

@indexentry(key "Macro, G;",entry "Macro, ;G",number)@indexentry(key "G, macro",entry ";G, macro",number)@index(;G, case invert)
;G@i<string>@\Terminate string with @i<crlf>.  Converts all
characters in @i<string> to lower case.


@label(SemicolonH)
@index(Macro, variable in)
@indexentry(key "Macro, H;",entry "Macro, ;H",number)
@indexentry(key "H, macro",entry ";H, macro",number)
@index(variable, in macro)
@index(;H, variable in macro)

;H@i<var>@\Substitutes the value of @i<var> at this point in the macro.
Terminate the @i<var> name with a @i<crlf>.
For more about variables, see chapter @ref(variables), page @pageref(variables).

@label(SemicolonI)
@index(Macro, TTY input)@index(TTY input, in macro)@index(;I, TTY input)

@indexentry(key "Macro, I;",entry "Macro, ;I",number)@indexentry(key "I, macro",entry ";I, macro",number)

;I@\Input from the TTY.  The next @i<crlf> typed simulates a ";R0"
command.

@label(SemicolonL)
@indexentry(key "Macro, L;",entry "Macro, ;L",number)@indexentry(key "L, macro",entry ";L, macro",number)@index(;L, alphanumeric conversion)
;L@i<number>@\Terminate @i<number> with @i<crlf>.  Adds 100 octal to the
number and thus (usually) converts it to a letter.  1=A, 2=B, etc.
This, for example, is used to generate signal names and connector
pin names.  See also the ;LD command.
For an example of the use of ;L, see section @ref(ALexample),
page @pageref(ALexample).

@label(SemicolonLD)
@indexentry(key "Macro, L;D",entry "Macro, ;LD",number)
@index(;LD, alphanumeric conversion)
@index(LD, macro)

;LD@i<number>@\Terminate @i<number> with @i<crlf>.  Converts the
number to a character in the DEC alphabet, see page @pageref(DECalphabet).
@index(DEC alphabet)@index(Alphabet, DEC)


@index(Macro, defining)@indexentry(key "Macro, M;",entry "Macro, ;M",number)@indexentry(key "M, macro",entry ";M, macro",number)@index(;M, define macro)

@index(Define macro)@index(Create macro)
@emphasize[;M@i<name>]@\Start a permanent macro.  Terminate the @i<name> with
a @i<crlf>.   All commands typed after this become part of the macro
body, and are executed simultaneously (to create a macro
without executing the commands, an unusual mode, see ;D on page
@pageref(SemicolonD)).

@indexentry(key "Macro, M;1",entry "Macro, ;1M",number)
@index(;1M, define macro)

;1M@i<name>@\Same as ;M, except that an implicit XSMACRO (see page
@pageref(XSMACRO)) is done so the macro will be saved.

@indexentry(key "Macro, N;",entry "Macro, ;N",number)@indexentry(key "N, macro",entry ";N, macro",number)@index(;N, substitute number)

;N@i<n>,@i<m>,@i<i>@\Substitute at this point the number @i<n>, and
increment in by M each time through the macro @i<i> levels up from
the current one.  @i<n> and @i<m> may be negative.  If @i<i> is defaulted,
0 is assumed (each time through the current macro); if @i<m> is
defaulted, 1 is assumed.  The number always has a sign, and
zero expands to a null string!

@index(Macro, output)@index(;O, macro output)@indexentry(key "Macro, O;",entry "Macro, ;O",number)@indexentry(key "O, macro",entry ";O, macro",number)
;O@i<string>@\Terminate @i<string> with @i<crlf>.  If not taking
input from the TTY, will print the @i<string> on the TTY.
I guess this is a way of providing debug output from a macro.


@label(SemicolonP)
@index(Macro, defining)@index(Defining a macro)
@indexentry(key "Macro, P;",entry "Macro, ;P",number)@indexentry(key "P, macro",entry ";P, macro",number)@index(;P, temporary macro)


@emphasize[;P]@\Define a temporary macro.  All commands issued until the
completion of the macro become part of the macro.  After the
macro has been completed and execution has terminated, the macro
body is discarded.   Good for one-shot iterations, such as laying 
down a set of bussed signal wires.

@label(SemicolonR)
@indexentry(key "Macro, R;",entry "Macro, ;R",number)@indexentry(key "R, macro",entry ";R, macro",number)@index(Macro, repeat count)@index(;R, repeat count)


@emphasize[;R@i<n>]@\End macro.  Terminate the number @i<n> with a
@i<crlf>.  The number @i<n> is taken as the repeat count (including
the definition!).  For permanent macros, the repeat factor becomes
@index(#, repeat count)
part of the definition.  The special symbol "#", used as a
repeat count, means that the number of matches found by a @g(b)F,
@g(e)F, XFDIP, etc. command is used as the repeat count.

@index(;S, stop macros)@indexentry(key "Macro, S;",entry "Macro, ;S",number)@indexentry(key "S, macro",entry ";S, macro",number)@index(Stop all macros)

@emphasize[;S]@\Stop all macros instantly and return to top level command
mode.   This is what you do when you are inside a macro and have
hopelessly screwed up.

@index(;T, TTY input)@indexentry(key "Macro, T;",entry "Macro, ;T",number)@indexentry(key "T, macro",entry ";T, macro",number)

;T@\Request TTY input at this point.  Input must be
terminated with ";R0".  Usually, ;I (page @pageref(SemicolonI))
is used.

@index(;U, TTY input)@indexentry(key "Macro, U;",entry "Macro, ;U",number)@indexentry(key "U, macro",entry ";U, macro",number)

;U@\Similar to ;T if input not coming from a macro; otherwise
it is a no-op.  This is useful when you get into a macro and
discover something you wanted to do (such as initialize a
variable or enter a mode) which you don't want as part of the
macro body.  Whatever you do will not be executed on subsequent
iterations.

@index(;V, save TTY input)@indexentry(key "Macro, V;",entry "Macro, ;V",number)@indexentry(key "V, macro",entry ";V, macro",number)

;V@i<n>,@i<name>@\Terminate the macro name with a @i<crlf>.  This
causes TTY input to be executed and stored in the named macro.
If the next time this command is processed, any of the macros
between the current level and the level @i<n> up from here (inclusive)
are not in the first time through the loop, a ";C" (see page
@pageref(SemicolonC)) is done with the macro name instead of
taking in the macro definition.  Another way of looking at is is
to consider the named macro as a variable that is assigned to
from the TTY the first time you enter the macro level @i<n> up 
from here.

@label(SemicolonX)
@index(;X, expression evaluate)@indexentry(key "Macro, X;",entry "Macro, ;X",number)@indexentry(key "X, macro",entry ";X, macro",number)


;X@i<expression>@\Terminate @i<expression> with @i<crlf>.  Allows
an arithmetic expression to be evaluated.
@index(Arithmetic expression)@index(Expression, arithmetic)
The operators
@index(+, in expression)@index(-, in expression)@index(*, in expression)
@index(/, in expression)
"+", "-", "*" and "/" are recognized.  Conventional precedence
is used, but may be altered by using <> or () to group subexpressions.


@label(SemicolonY)
@index(;Y, DSKIN control)@indexentry(key "Macro, Y;",entry "Macro, ;Y",number)@indexentry(key "Y, macro",entry ";Y, macro",number)

;Y<char>@\Reads input from the XDSKIN file (see page @pageref(XDSKIN))
until the <char> is seen.  Then turns off DSKIN and proceeds to
take input following the @w[;Y]. 


@index(XAMACRO)
@index(AMACRO)
@emphasize[XAMACRO]@\Alters a macro.  If the macro exists, you are in alter
mode on the macro.  Note that there are some transliterations
required because of hacks in the character set to represent
normally "invisible" characters, such as <crlf>.  These are
given in section @ref(translit), page @pageref(translit).

@index(Macro, deleting)@index(Deleting macro)
@index(XDMACRO)@index(DMACRO)
@emphasize[XDMACRO]@\Delete macro.  Asks for a macro name.  Must be at macro
level 0 to do this (i.e., no macros in progress).

@index(XIMACRO)
@index(IMACRO)@index(Macro, reading)
@emphasize[XIMACRO]@\Input macro file.  The file must have been written by
WMACRO (page @pageref(XWMACRO)).  Defines all macros and variables
described by the file.

@index(XINIT)
@index(INIT)
XINIT@\Enables the calling of the INIT macro when a drawing is
read in.  This is the default state of this switch.  

@index(X-INIT)@indexentry(key "XINIT-",entry "X-INIT",number)
@index(-INIT)@indexentry(key "INIT-",entry "-INIT",number)
@index(INIT macro, disabling)
X-INIT@\Disables the calling of the INIT macro; you do this if
you want to change the INIT macro before it executes (e.g., you've
screwed it up).

@index(MACRO)@index(XMACRO)
@emphasize[XMACRO]@\Lists the names of all defined macros.

@index(XPMACRO)@index(PMACRO)
@index(Macro, printing)
@emphasize[XPMACRO]@\Print macro.  Asks for name of macro and displays it
on the terminal.


@index(QUIT)@index(XQUIT)
@emphasize[XQUIT]@\Leave macro alter mode (AMACRO) wihtout modifying
the original macro definition (changes are discarded).

@index(Macro, renaming)
@index(Renaming macro)
@emphasize[XRMACRO]@\Rename a macro.  Ask for old name, then new name.
New name must not already be in use.

@index(Macro, marking for saving)
@emphasize[XSMACRO]@\Enable macro saving.  Asks for a macro name.  The
macro will then be saved in the DRW file.  The macro named
INIT @index(INIT, macro) is automatically given an SMACRO.
See page @pageref(INITmacro) for how to use an INIT macro.

@index(X-SMACRO)
@indexentry(key "XSMACRO-",entry "X-SMACRO",number)
@index(-SMACRO)@indexentry(key "SMACRO-",entry "-SMACRO",number)

@emphasize[X-SMACRO]@\Disables macro saving for the macro name given.

@index(XWMACRO)
@index(WMACRO)

@emphasize[XWMACRO]@\Writes all currently defined and named macros into
a file (default extension .MCR), and writes out all variable
definitions.

@leave(description)
@sec(The INIT macro)@label(INITmacro)

The INIT macro is a special macro attached to a drawing.  If a
macro with this name is saved with the drawing, it will be
called each time the drawing is read in.  Typically this
sets the drawing scale and other useful properties.

To create an INIT macro, first create some text file to
hold it:
@enter(example)
@u[.]create init.txt
@u[00100]   XSCALE
@u[00200]   12
@u[00300]   XDIAMONDS
@u[00400]   Y
@u[00500]   XAUTOWRITE
@u[00600]   40
@u[00700]   XUNDERLINE
@u[00800]   XDEFPINS
@u[00900]   $
@i[*]E,n
@u[EXIT]

@leave(example)
This defines some standard macro text for a particular application
or user.  This configuration is recommended for novices.
To define the macro, the following protocol will work:
@enter(example)
@u[.]RU D
@u[*];1MINIT
@u[*]@@INIT
@u[*];R1
@u[*]@r[@g(a)]W
@u[Filename ]Foo
@u[*]
@leave(example)

This set of operations creates a drawing whose name is Foo.DRW and
which contains an INIT macro.  The "@@" operation will cause the
commands in INIT.TXT to be read in as if you typed them, and
thus become part of the macro body.
To change the commands that are actually executed when the
INIT macro is called,
edit the
TXT file and repeat this procedure on an existing drawing.  In
this case, the only major difference is that instead of
giving the explicit filename, the name @k(exists) can be given.

@sec(Example of ;A and ;L)@label(ALexample)

The actions of ;A and ;L can save considerable time when
laying out multiple signals.  Consider the case of laying
down a set of bus lines on each drawing of a series.  The
signals are named BUS00 H, BUS01H, ... BUS15H and they are
one @g(b)-motion apart vertically.  Assume that the lines have
been placed and the task is to associate a signal name
with each of them.  The cursor is positioned at the
topmost line, BUS00:
@enter(example)
;M
@u[macro name: ]BUSLINES
@u[*]@r(@g(a))T
@u[Text? ] BUS@r(@g(a));2A0,1<crlf>
@u[end A_] @t[_]H<crlf>
@u[*]@r(@g(b))\
@u[*];R15
@leave(example)
The @g(a); is required so that the input routine recognizes the
";" as a call on a macro and not as a text character.

Consider the case of doing a body drawing and wishing to name
the inputs to a gate (e.g., a shift register) A thru H.  If this
happens frequently, a macro could be created (the signals are
one @g(b)-distance apart)
@enter(example)
@u[*];M
@u[macro name] SHIFTSG
@u[*]@r(@g(a))T
@u[Text?] @r(@g(a));L@r(@g(a));A1,1<crlf>
@u[end ;A]_<crlf>
@u[end ;L]_<crlf>
@u[*]XTMOVE
 ... move around until positioned just right...
@u[*]@r(@g(b)))
@u[*];R8
@leave(example)

@chap(Variables)
@label(variables)

The commands below define and operate on variables.  These commands are valid
in any mode.

@enter(description)
@label(AlphaH)
@index(@g(a)H, increment variable)
@indexentry(Key "H@g(a), increment variable",entry "@g(a)H, increment variable",number)
@index(Variable, incrementing)
@index(Incrementing variable)

@g(a)H@\Asks for a variable name and then increments that variable.
Numeric variables get the next (+1) integer value.
@index(Integer variables)@index(String variables)
@index(Variable, string)
string variables are searched for a number and +1 is added.
Multi-string variables
@index(Multistring variables) get set to the next string.  Upon
reaching the last string of a multi-string variable, the
value of the variable is set to a null string.  See all
the @w[;H] command in macros, page @pageref(SemicolonH).

@index(@g(b)H, define variable)
@index(Variable, defining)
@indexentry(key "H@g(b), define variable",entry "@g(b)H, define variable",number)

@g(b)H@\Defines a variable.  Asks for a definition.@\ Syntax is of the form
@enter(itemize)
@enter(multiple)
@enter(example)<name> _ <string>@leave(example)

for string variables.
@leave(multiple)

@enter(multiple)
@example(<name> : <string1><crlf><string2><crlf>...<stringn><crlf><crlf>)

for multi-valued string variables.

@leave(multiple)

@enter(multiple)
@example(<name> = <successive values>)

for a numeric variable.
@leave(multiple)

@leave(itemize)
where
@enter(itemize)
<Name> is any length string of characters, and includes the
letters A-Z, the digits 0-9, and . (period), %, or $ (dollar sign).

<Value> is either an alphabetic character or a number (with
an optional sign).

<Iteration-spec> is of the form <start-value>(<increment>)<end-value>
or <iteration-spec>(<increment>)<end-value>.

<successive values>  consists of a string of <value>s or
<iteration-spec>s separated by commas and ending with a
<crlf>.

If <start-value> is alphabetic in an <iteration-spec>, then
<end-value> must also be alphabetic.  Incrementing an
alphabetic character is done according to the DEC alphabet,
@index(DEC alphabet)@index(Alphabet, DEC)
see page @pageref(DECAlphabet).

If adding the <increment> to the current value exceeds or
equals the <end-value>, then the variable is set to <end-value>.
If the current value is greater than 0, the current value is padded
with enough leading zeroes to match the length of the initial
<start-value> of the <iteration-spec>.  If <end-value> is omitted,
the last <increment> gets used indefinitely  (this is the only
place where a zero increment is legal!).  If the definition is
ended with a <value> or <end-value>, and incrementing is continued
beyond the end of the definition, +1 becomes the default <increment>.

@leave(itemize)

@index(@g(e)H, type variables)
@index(Typing variables)
@index(Variables, typing)
@indexentry(key "H@g(e), type variables",entry "@g(e)H, type variables",number)

@g(e)H@\Types all variables and their current values on the TTY.

@leave(description)


@chap(Board types)@label(Boards)
@enter(itemize)
@index(Board type DECPC)@index(DECPC, board type)

DECPC

@index(Board type W940)@index(W940, board type)

W940,  DEC prototype wirewrap board.

@index(Board type W941)@index(W941, board type)

W941,  DEC prototype wirewrap board.

@index(Board type W942)@index(W942, board type)

W942

@index(Board type W943)@index(W943, board type)

W943

@index(Board type W946)@index(W946, board type)

W946

@index(Board type LEBEL)@index(LEBEL, board type)

LEBEL

@index(Board type PG21)@index(PG21, board type)

PG21

@index(Board type PG21-60)@index(PG21-60, board type)

PG21-60

@index(Board type PG21-180)@index(PG21-180, board type)

PG21-180, 180-socket version of PG21

@index(Board type LG411)@index(LG411, board type)

LG411

@index(Board type LG434)@index(LG434, board type)

LG434

@index(Board type MPG21)@index(MPG21, board type)

MPG21

@index(Board type AUGU1)@index(AUGU1, board type)

AUGU1

@index(Board type AUGU6)@index(AUGU6, board type)

AUGU6

@index(Board type AUGCMU)@index(AUGCMU, board type)

AUGCMU
 
@index(Board type AUGHEX)@index(AUGHEX, board type)

AUGHEX
@leave(itemize)

@chap(Libraries)
@label(Libraries)

@sec(Introduction to libraries)
Libraries are ways of sharing definitions of bodies.  There is
some folklore necessary to understand how to create and use
libraries effectively.

A library is just a drawing.  In that drawing, a number of bodies
may be defined.  Defining a body does not cause it to appear on the
drawing, so a library could be a drawing with absolutely nothing
visible.  Since this is not too useful (one cannot, for example,
print out the contents of it reasonably) a library usually consists
of a set of body definitions, plus an instance of each body appearing
in the drawing.  This has the advantage that if you edit a body
in the library, its printed representation will also change, so
creating a PLT file and printing it out will get you a picture
of all the bodies in the library.

There are a couple tricks to building libraries.  Some of it is
in naming conventions, and some of it is editing tricks. 
Naming convention is discussed in section @ref(DIPTYPE), page
@pageref(DIPTYPE).  Editing tricks are mostly discussed in
the introduction to chapter @ref(Editmode), page @pageref(editmode).

For example, a body is usually drawn with its placement position
approximately at its center of gravity.  However, it is sometimes
hard to draw one this way, especially the first couple times.

@sec(Standard Libraries)@label(StdLibs)

There are two standard library sets known at the time this
document was created.
@enter(itemize)
The CM* drawing libraries, on [X335DP00]
@index([X335DP00])@indexentry(key "X335DP00",entry "[X335DP00]",number)

The newer body libraries, on [E210DP00]
@index([E210DP00])@indexentry(key "E210DP00",entry "[E210DP00]",number)
@leave(itemize)

@index(BODLIB[X335DP00])
@index(LIB0-LIB11[X335DP00])

The CM* body libraries consist of the drawing files LIB0 thru
LIB11 on [X335DP00].  This complete set may be brought in by
loading the library (XGETLIB) called BODLIB[X335DP00].  This set of drawings contains most of the
chips used for the drawings of the CM* project.  This set is
nowhere near complete.

@index(L0-L52[E210DP00])@index(LIBALL[E210DP00])
The new body libraries consist of the drawing files L0 thru
(at last count) L52 on [E210DP00], with some holes (at last
check, L41-L49 did not exist) left for expansion.  If expansion
is required within the sequence, it is expected that suffices
A-Z will be added, e.g., an expansion of L10 or a requirement for
a library between L10 and L11 would result in an (additional)
file L10A.  
These libraries contain almost the entire TI TTL databook except
for ROMs (@i[PROM]s are included but mask-programmed ROMs are not),
some multiplier chips, and some microcomputer chips.  In addition,
select 8000/8800 TTL (National), 9600 TTL (Fairchild), 3600 RAM
(Intel), and other special categories are included.  

The complete set of new libraries can be loaded by calling in the
library LIBALL[E210DP00].  Since the libraries are so extensive,
as a practical matter it may be desired to load only the
individual libraries as they are needed.


@sec(Library-related commands)
@enter(description)
@label(LibAlphaI)
@index(@g(a)I, input body definitions)
@indexentry(key "I@g(a), input body definitions",entry "@g(a)I, input body definitions",number)
@index(Body definitions, inputting)
@g(a)I@\Read body definitions (only) from a file.  Useful when
collecting body definitions from several files into a library.

@index(@g(e)I, input body definitions)
@indexentry(key "I@g(e), input body definitions",entry "@g(e)I, input body definitions",number)

@g(e)I@\Read body definitions.  Like @g(a)I, except that if a duplicate
body definition is found, replacement is automatically effected
by using a geometric mapping.


@index(@g(a)L, list body types on TTY)
@indexentry(key "L@g(a), list body types",entry "@g(a)L, list body types on TTY",number)
@index(Body types, listing)
@g(a)L@\List body types on TTY.  For library bodies, the library name
is also listed.

@index(@g(b)L, list body types on file)
@indexentry(key "L@g(b), list body types on file",entry "@g(b)L, list body types on file", number)
@index(Body types, listing)
@g(b)L@\List body types in a file with default extension .LST.
Also list the plot label strings.

@index(DELLIB)@index(XDELLIB)
XDELLIB@\Deletes a reference to a library; all bodies defined in
the library disappear; see page @pageref(XDELLIB).  To keep
bodies, see LOCLIB (page @pageref(XLOCLIB)).

@index(DELTYP)@index(XDELTYP)
XDELTYP@\Deletes a body definition from a drawing.  See page
@pageref(XDELTYP).

@index(GETBOD)@index(XGETBOD)
XGETBOD@\Extracts a body definition from a drawing file.  See page
@pageref(XGETBOD).

@index(GETLIB)@index(XGETLIB)
@emphasize[XGETLIB]@\Reads in a library of bodies; see page @pageref(XGETLIB).

@index(LIBMAP)@index(XLIBMAP)
XLIBMAP@\Used when converting from one library to a newer one; see
page @pageref(XLIBMAP)

@index(-LIBMAP)@indexentry(key "LIBMAP-",entry "-LIBMAP",number)@index(X-LIBMAP)@indexentry(key "XLIBMAP-",entry "X-LIBMAP",number)
X-LIBMAP@\Clears all LIBMAP mappings.



@index(LOCLIB)@index(XLOCLIB)
XLOCLIB@\Deletes a reference to a library, but makes any bodies
defined in it local to the current drawing.

@index(XRENAME)@index(RENAME)
XRENAME@\Renames a body definition in a drawing.@\See page @pageref(XRENAME).

@index(TYPLIB)@index(XTYPLIB)
XTYPLIB@\Types all library filenames.

@leave(description)

@chap(Plot box)
The plot box is the drawing identification information.  Not
all of the information actually appears in the drawings
but some appears in the wirelist.
@enter(description)
@emphasize[XAUTHOR]@\ Sets the "Drawn by" field; see page @pageref(XAUTHOR).

XDRAWN@\Sets the signature for the DRN. box; see page @pageref(XDRAWN).

XENGINEER@\Sets the signature for the ENG. box; see page @pageref(XENGINEER).

@emphasize[XLTITLE]@\Prints all of the plot box information.

XMODULE@\Sets the module name; see page @pageref(XMODULE).

XNEXTHI@\Sets the "Next higher assembly" field; see page @pageref(XNEXTHI).

XPAGE@\Sets the PAGE and OF values; see page @pageref(XPAGE).

@index(XPREFIX)@index(PREFIX)
XPREFIX@\Sets the prefix text for a drawing number; see page @pageref(XPREFIX)


@emphasize[XPROJECT]@\Sets the project name; see page @pageref(XPROJECT).

XREVISE@\Sets the Revision Level field; see page @pageref(XREVISE).

XSHEET@\Sets the PAGE and OF values; see page @pageref(XSHEET).

XSITE@\Sets the site field; see page @pageref(XSITE).

@emphasize[XTITLE]@\Sets the title text; see page @pageref(XTITLE).

@index(XVARIABLE)@index(VARIABLE)
XVARIABLE@\Sets the variable text for a drawing number; see page
@pageref(XVARIABLE).
@leave(description)

At CMU, only the following user-supplied information appears in the plot box:

@enter(itemize)
Author

Title (first line only!)

Project

Page
@leave(itemize)

@chap(The naming of DIPs)@label(DIPTYPE)

In order to be used by the wirelist program W, a DIP definition
@i[must] include the property
@index(DIPTYPE) DIPTYPE.  This is used to make the association
between a body definition and the DIP which represents it.

Some naming conventions have been adopted for DIPTYPEs, and some
simple naming rules; following these rules will help make your
definitions compatible with the standard libraries.

DIPTYPE names should be 7 characters or less in length.  This
is because the various support programs, written in a primitive
language like FAIL, take shortcuts to formatting such as
depending upon tab stops every eight positions.  If you use
a DIPTYPE name of 8 or more characters, your output will not
always have all its columns lined up.  However, there seems to
be no harm in long names (it doesn't seem to lose them, or
truncate them).

When a series has two or three digit suffixes, e.g., as the 7400
TTL series does, @i[it is important to leave a non-numeric
delimiter between the family number and the member number].
Otherwise, we get silly things like "7411" being followed by
"74112" and followed by "7412".  The correct form of names is shown
below:
@enter(example)
Gate	DIPTYPE
7400	74 00
74S00	74S00
2901	29 01
29117	29 117
74151	74 151
@leave(example)

Note that several bodies may have the same DIPTYPE.  For example,
a 7400 NAND gate (positive logic) may be drawn as a body which
represents the negative-input OR function (negative logic).
Although these bodies must have unique names, they do not represent
unique DIPTYPEs, so the DIPTYPE for both would be the same.

The library drawings for the new user libraries (on [E210DP00])
show @i[both] the DIPTYPE and the body name.

@chap(Graphics Display Processor)@label(GDP)

SUDS runs at CMU on the Graphics Display Processor (GDP-II).
This is equipped with the "Stanford" keyboard
(perpetrated upon an unsuspecting world by a university that
shall remain anonymous).  The GDP runs with the
"Graphics Monitor", around which SUDS must run in circles to accomplish
its task.

When the D program is run, it downloads a graphics service package
to the GDP.  This service package takes over control of the
GDP keyboard.  To control the graphics monitor from the keyboard,
one uses the "Cokebottle" mode:

@index(Coke bottle mode)
@index(Graphics monitor)
@index(GDP control)

@enter(description)
@g(e)<top><shift><altmode>@\Enter GDP control mode

@indexentry(key "S@g(e), GDP mode",entry "@g(e)S, GDP mode",number)
@index(@g(e)S, GDP mode)

@g(e)S@\Enter scroller control mode

@indexentry(key "I@g(b), GDP mode",entry "@g(b)I, GDP mode",number)
@index(@g(b)I, GDP mode)

@g(b)11I@\Adjust intensity.  11 is a good figure given the default intensity
which  SUDS uses.  Note that it is probably better to adjust the brightness of a
drawing to be higher, using the XBRIGHT command (page @pageref(xbright)) which
can be done in an initialization macro.

@indexentry(key "S@g(b), GDP mode",entry "@g(b)S, GDP mode",number)
@index(@g(b)S, GDP mode)
@g(b)nS@\Adjust scroller scale.  Set to a comfortable value; initial value is
octal 10.  n=12 is considered comfortable by those who actually try
to read what is being displayed.

@g(b)-200Y@\Adjust Y-position.  -200 is frequently a good value.  Recall that
the meta key must be held down while typing the - as well as the digits.

@leave(description)

To leave this mode, type any character without using
the meta key.


@indexentry(key "@g(b)call, clear GDP program",entry "@g(b)<call>, clear GDP program",number)
@indexentry(key "call@g(b), clear GDP program",entry "@g(b)<call>, clear GDP program",number)
Typing @g(b)<call> will clear the SUDS graphics service program and
allow normal use of the graphics keyboard.  Note in particular
that control sequences, such as ^R, ^T and ^C will transmit
as @g(a)R, @g(a)T and @g(a)C.  To type ^C without having to do a
@g(b)<call>, use the <call> key, which tranmits a ^C to the running
program.

If you feel a compulsion to switch GDPs, the recommended practice
is to LOG OFF (KJOB) the job on one GDP and log in a new job on the
one you are switching to.  The reasons have to do with how
ATY devices are assigned in the monitor; an ATY is the device across
@index(ATY)
which graphics protocols take place.  If you just Detach your job,
the ATY is left in a confused state and when reattached to
another GDP you will get strange messages from SUDS advising
you that your ATY link cannot be assigned.


@indexentry(key "break, GDP control",entry "<break>, GDP control",number)
@indexentry(key "clear, GDP control",entry "<clear>, GDP control",number)
The <break> and <clear> keys may be
used to interrupt (break) output and resume (clear break) output.
These perform the ^S and ^Q functions of the TOPS-10 monitor.


@sec(What do do when the GDP crashes)@label(GDPboom)

@index(Crash, graphics)@index(Graphics crash)
SUDS exercises the GDPs well beyond their limits.  Occasionally@foot<Frequently.> 
the graphics "crashes".  This is easily  seen by the user since
the display disappears completely and no amount of pushing keys
will bring it back.  Note that this is distinguishable from a
crash of the host, since in that case the display still runs but
no response is obtained from the host.

Now, in the best of all possible worlds you have done an
XAUTOWRITE (page @pageref(XAUTOWRITE)) command, and haven't
lost very many keystrokes.  However, in reality, either you
forgot to do this, or you were editing a body definition (in
which SUDS "cleverly" disables AUTOWRITE mode!).  To save
your work, perform the following mystical actions:
@enter(itemize)
@enter(multiple)
Ask the operator to attach your job (the job number, in case
you have forgotten it, can be found by the operator).

If the operator is kind, and the system is happy, you can do
the actions below from the console; otherwise, have the operator
just DETACH your job and you can pick it up on some other terminal.

@leave(multiple)

Type "HALT".

Type "CONT".  You should now get a "*" when you type a
carriage return.

Type at least one space, in case you were in a move mode.

Execute an X-DPY (page @pageref(XDPY)) command.

If you were not in body edit mode, you can now type
@example(@center('W))
to write out your DRW file in its current state.  The
apostrophe is equivalent to @g(a) (this is explained on page
@pageref(Apostrophes)).

If you were in body edit mode, you can leave it by typing
@example(@center('E))
and then typing
@example(@center('W))
as described above.

Now execute an XEXIT (page @pageref(XEXIT)) command.

Detach your job.  You may now reboot your GDP.  The DRW 
can now be read back in and you can resume.  Note that any
macros could be saved by having done an XWMACRO (page @pageref(XWMACRO))
command; otherwise they will be lost.
@leave(itemize)

You @i[must] re-run D after reattaching to your job from your
GDP.  This is because the ATY line used for graphics communication
has been deassigned by the X-DPY comand, and an attempt to REENTER
the D program will simply cause an
@enter(example)
?IO to unassigned channel
@leave(example)
error.

@chap(Things I don't know what to do with)
@enter(descriptioN)

?@\Used in conjunction with XIWIRES or XIERRORS commands.
Steps through the signals in the internal list one at a time
which allows you to correct the errors (XIERRORS) or
just look at all signals (XIWIRES).  The XIWIRES is
useful for looking at router errors by run number, since the
run number is determined by the order of the .WDR file.

XIWIRES@\This reads a logic drawing wirelist (asks for the
filename) and builds an internal list of pointers to the
appropriate pins on the PC card (must have already read in
the PC card drawing).  This command is currently only
used with the WROUTE command.  The default extension is
.WDR which is generated by the UML "W" command.
@index(LES extension)@index(Extension LES)
@label(LESD)

XIERRORS@\Reads a file (default extension .LES) in and prints the category title
then a "?".  If you type "Y" it reads in the runs in that
category.  Otherwise it skips that category and goes to the
next one.  Only one category is read in at any one time.
An LES file is produced by the wirelister by using the wirelister
XERRSUM command described on  page @pageref(XERRSUM).

X-IWIRES@\Releases the storage used by the XIWIRES command.

X-IERRORS@\Releases the storage used by the XIERRORS command.

@enter(multiple)
XIUML@\This reads a file for updating the DIP locations and
connector pin numbers.   It asks for a filename.  The default
extension is .UML.  The file is then read in and the
updates are made.  The file format is as follows:
@enter(example)
BODIES<crlf>
<old location> <TAB> <new location> <crlf>
PINS <crlf>
<old pin name> <TAB> <new pin name> <crlf>
END
@leave(example)


Each time the word "BODIES" or "PINS" is seen, the program
makes a list of the current body or pin locations.  After an
update, the updated body or pin is removed from the list so there
is no chance of confusion.   As many bodies or pins as desired may
be listed under the word "BODIES" or "PINS".  The BODIES section
and the PINS section may be omitted or reversed in order but
the word "END" must be present else an error message will be
forthcoming.

Since the drawing program was designed to handle the case where
more than one card may appear in a single drawing, if the
permanent card location is set for this drawing, you won't
be asked.  Otherwise you must type the card location of the
bodies and connector pins to be updated.  If the drawing only
contains one card but no permanent card location is set, you
may type <crlf> to the card location question.
@leave(multiple)

@label(XIPINS)
IPINS@\This reads a file from Wagner's partitioning program.
It asks for a file name (probably FOR20.DAT).  It then asks
if you want a filename other than the current default (@k(exists)) one.
If the filename which appeared in the "FILE" column of the wirelist
for pins you want is different than the @k(exists) file, then you
must supply that name explicitly.  <crlf> is the same as
typing "@k(exists)".

ERROR@\Re-enable error display.

-ERROR@\The "@g(b)." in D&PC (layout version only) and "FLASH" and
"NFLASH" commands in PC.  May attempt to show erroneous pins by
displaying "O_?" with the "O" centered on the pin.  This is
very confusing, so the ERROR command can be enable and disable
the displaying of this indicator.

XTHICK@\Sets a flag so that @g(e)Z and @g(e)Q assume that you are
going to plot your file in extra thick mode with P or PCP (the
E command).  It causes it to think that point text in scale 1 and
connector pin text are one bit wider than they ordinarily are.
This doesn't yet do the right thing for body text.

@k(subset)@\Move left along a wire
@index(@k(subset), Left along wire)

@k(superset)@\Move right along a wire
@index(@k(superset), Right along wire)

@z()@\Move down along a wire
@index(@z(), Down along wire)

@z()@\Move up along a wire.
@index(@k(), Up along wire)

@g(b).@\Equivalent to @g(a). followed by @g(e)V if in layout version,
otherwise the same as @g(a). .

J<letter>@\Finds <letter> of flashing pins and moves cursor
there if possible.  Only works when letters are being shown.
Also works for jumping to "short" errors if you type a
<number> instead of a <letter>.

J_<number>@\Finds the <number>th FLASH connector pin (default
is 1) and jumps to it.

@leave(descriptioN)
    