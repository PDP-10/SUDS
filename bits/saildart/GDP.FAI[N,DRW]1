00050	BEGIN
00100	COMMENT    VALID 00027 PAGES
00200	C REC  PAGE   DESCRIPTION
00300	C00001 00001
00400	C00004 00002	CMU,<
00500	C00008 00003	IMPURE STORAGE FOR GDP2 STUFF
00600	C00012 00004	INITIALIZE COMMUNICATIONS WITH THE GDP2 VIA THE ATY LINE
00700	C00015 00005	OPATYO:	INIT ATYO,4		CMU IMAGE MODE
00800	C00016 00006	OPATYI:	INIT ATYI,4		CMU IMAGE MODE
00900	C00017 00007	INITIALIZE A BUFFER TO HOLD A MESSAGE FOR THE DP2
01000	C00019 00008	ROUTINES TO READ A BYTE FROM THE GDP2
01100	C00020 00009	ROUTINES TO WRITE A BYTE OR WORD TO THE GDP2
01200	C00021 00010	OUTPUT A BUFFER TO THE GDP2
01300	C00023 00011	ROUTINES TO OUTPUT A PIECE OF GLASS TO THE GDP2
01400	C00026 00012	IIILV:	TRNE A,77B27		BRIGHTNESS OR SIZE?
01500	C00028 00013	LNGVEC:	SKIPG GDPMOD		ARE WE ALREADY IN LONG VECTOR MODE?
01600	C00029 00014	IIISV:	SKIPE GDPMOD		MAKE SURE WE ARE IN MEDIUM VECTOR MODE
01700	C00030 00015	LIOFF1:	SKIPA T,[6]		LONG NEEDS 6
01800	C00031 00016	IIICH:	CAIN A,1		IS IT REALLY NULL STRING?
01900	C00033 00017	MACROS TO SIMULATE III DPYCLR, DPYPOS, DPYSIZ
02000	C00034 00018	NOLAST:	TLNN DSPACT
02100	C00035 00019	PMODE:	TLNN DSPACT
02200	C00036 00020	UPLVL:	TLNN DSPACT
02300	C00037 00021	UPSCAL:	TLNN DSPACT
02400	C00038 00022	READY:	PUSH P,T
02500	C00039 00023	CURBRT:	TLNN DSPACT
02600	C00040 00024	CLRCLC:	SKIPA TT,[TRZN T,BIGFLG]
02700	C00041 00025	VHLINE:	TLNN DSPACT
02800	C00042 00026	FOLOW1:	PUSHJ P,VECT
02900	C00044 00027	>CMU
03000	C00045 ENDMK
03100	C;
     	00100	CMU,<
00200	
00300	^VERSION(GDP2,2)
00400	
00500	
00600	;ROUTINES FOR THE CMU GDP2 (GRAPHIC WONDER)
00700	
00800	;PDP-11 INSTRUCTION DEFINITIONS
00900	EMT11__104000
01000	TRAP11__104400
01100	NOP11__240
01200	JMP.R0_110		;JMP @R0
01300	
01400	;GRAPHIC MONITOR CONTROL WORDS
01500	PASGRAPH__4	;FOR PASSING A BUFFER TO GRAPHIC MEMORY
01600	^PASBUF__0	;FOR PASSING A BUFFER TO ARBITRARY MEMORY
01700	^PASREGS__2	;FOR PASSING REGISTERS
01800	^GET2REGS__52	;CAUSES 2 REGISTERS TO BE RETURNED
01900	
02000	;EXTENDED GRAPHIC CALLS FOR THE DRAWING PROGRAM
02100	;(WE LOAD THE CODE FOR THESE FROM DRAW11.LNK)
02200	LOADPG_EMT11+001	;LOADS A PIECE OF GLASS
02300	BLNKPG_EMT11+002	;LOADS A BLINKING PIECE OF GLASS
02400	ADDPG_EMT11+003		;ADDS DATA TO THE END OF THE LAST GLASS LOADED
02500	REPPG_EMT11+024		;LIKE LOADPG, BUT DOESN'T CLEAR SCREEN
02600	REPAPG_EMT11+025	;LIKE ADDPG, BUT DOESN'T CLEAR SCREEN
02700	REPLPG_EMT11+026	;LIKE REPAPG, BUT FOR LAST PIECE - CLEARS REMAINING PIECES
02800	^SAVPOG_EMT11+027	;SAVES CURRENT POG INFO
02900	^RSTPOG_EMT11+030	;RESTORES CURRENT POG INFO
03000	DELPG_EMT11+004		;DELETES A PIECE OF GLASS
03100	CLRGDP_EMT11+005	;CLEARS ALL PIECES OF GLASS
03200	PPTOP_TRAP11+113	;SETS POSITION OF TOP OF PIECE OF PAPER
03300	PPSIZ_EMT11+006		;SETS SIZE OF PIECE OF PAPER
03400	^PG0SET_EMT11+007	;SETS SPECIAL STUFF IN PIECE OF GLASS # 0
03500	SETFIL_EMT11+011	;SETS  FILE NAME IN POG 0
03600	SETMOD_EMT11+013	;SETS MODE IN POG 0
03700	SETLVL_EMT11+015	;SETS MACRO LEVEL IN POG 0
03800	SETSCL_EMT11+014	;SETS SCALE IN POG 0
03900	SETRDY_EMT11+012	;SETS THE READY INDICATOR (*) IN POG 0
04000	SETFBR_EMT11+020	;SETS THE CURSOR BRIGHTNESSES IN POG 0
04100	^SETFLG_EMT11+022	;SETS THE FLAGS WORD IN POG 0
04200	^SETCUR_EMT11+010	;SETS THE CURSOR POSITION IN POG 0
04300	^GETCUR_EMT11+023	;GETS THE CURSOR POSITION FROM POG 0
04400	STLOC_EMT11+021		;SETS LOCATION OF CURRENTLY SELECTED THING IN POG 0
04500	SETFV1_EMT11+016	;SETS THE LOCATION OF FOLLOW VECTOR 1 IN POG 0
04600	SETFV2_EMT11+017	;SETS THE LOCATION OF FOLLOW VECTOR 2 IN POG 0
04700	
04800	;GDP2 INSTRUCTIONS:
04900	LFMT_100060		;SETS VECTOR FORMAT
05000	LFMTM_LFMT+1		;SETS VECTOR FORMAT TO MEDIUM
05100	LFMTL_LFMT+2		;SETS VECTOR FORMAT TO LONG
05200	LCMD_100040		;SETS CMODE
05300	^TERM_100000		;TERMINATES A VECTOR LIST
05400	ION_100201		;TURNS BEAM ON
05500	IOFF1_100204		;TURNS OFF BEAM FOR THE NEXT VECTOR
05600	LSCA_100140		;LOADS THE SCALE, ABSOLUTE
05700	LILA_100100		;LOADS THE INTENSITY, ABSOLUTE
05800	NOPGDP_100360		;NO OP FOR THE GDP2
05900	SXYGDP_100222		;SET X AND Y
06000	
06100	;LOCATION WELL OFF SCREEN, FOR HIDING THINGS
06200	OFSCRN__4000
     	00100	;IMPURE STORAGE FOR GDP2 STUFF
00200	
00300	^IIIX:	0			;ABSOLUTE POSITION OF THE BEAM
00400	^IIIY:	0
00500	
00600	GDPMOD:	0			;CURRENT GDP2 VECTOR MODE (0=MED,+=LONG,-=UNKNOWN)
00700	
00800	CHRWID__10			;WIDTH OF THE NORMAL SCALE CHARACTER
00900	^CHRSCL:	0			;LH = CURRENT CHAR WIDTH, RH = CURRENT CHAR SCALE
01000	^IFN 0,<
01100		^XWD CHRWID/2,LSCA+4
01200		XWD CHRWID*5/8,LSCA+5
01300		XWD CHRWID*3/4,LSCA+6
01400	VECSCL:	XWD CHRWID,LSCA+10	;THIS IS ALSO THE VECTOR SCALE
01500		XWD CHRWID*3/2,LSCA+12
01600		XWD CHRWID*2,LSCA+14
01700		XWD CHRWID*3,LSCA+16
01800	>;IFN 0
01900	IFE 0,<
02000	VECSCL:	XWD CHRWID,LSCA+10
02100		XWD CHRWID*5/4,LSCA+11
02200		XWD CHRWID*3/2,LSCA+12
02300		XWD CHRWID*2,LSCA+14
02400		XWD CHRWID*3,LSCA+16
02500		XWD CHRWID*7/2,LSCA+17
02600		XWD CHRWID*7/2,LSCA+17
02700	>;IFE 0
02800	
02900	^IIIBRT:	0			;CURRENT III BRIGHTNESS
03000		LILA+11
03100		LILA+12
03200		LILA+13
03300		LILA+14
03400		LILA+15
03500		LILA+16
03600		LILA+17
03700	
03800	^CMUFBF:				;PIECE OF GLASS 0 DATA
03900	^FILWRD:	NOPGDP			; FILE NAME
04000	RDYWRD:	"*"*400+200		;READY FLAG
04100	^MODWRD:	"?"*401			;CURRENT MODE
04200	^SCLWRD: "?"*401		;CURRENT SCALE
04300	^LVLWRD: "?"*401		;CURRENT MACRO LEVEL
04400	FVEC1X:	NOPGDP			;FOLLOW VECTOR 1
04500	FVEC1Y:	NOPGDP
04600	FVEC2X:	NOPGDP			;FOLLOW VECTOR 2
04700	FVEC2Y:	NOPGDP
04800	^FBRT:	LILA+10			;CURSOR INTENSITY
04900	LOCATX:	OFSCRN			;CURRENTLY SELECTED THING LOCATION
05000	LOCATY:	OFSCRN
05100	CURSX:	0			;CURSOR POSITION
05200	CURSY:	0
05300	^FBFLGS:	0			;FLAGS (10000=BIG CURSOR, 200=FOLLOW SPARK PEN)
05400		BIGFLG__100000		;BIG CURSOR FLAG
05500		^FOLFLG__200		;FOLLOW SPARK PEN
05600	^CMUFBL__.-CMUFBF
05700	
05800	;IMPURE STORAGE FOR ATY STUFF
05900	^CHKSUM:	0			;RUNNING CHECKSUM OF THIS MESSAGE
06000	
06100	ATYOHD:	BLOCK 3			;BUFFER HEADER FOR ATY OUTPUT
06200	ATYOBL__2*(4+=256)+1		;SIZE OF ATY OUTPUT BUFFERS (=256 DATA WORDS)
06300	ATYOB1:	0			;FIRST ATY OUTPUT BUFFER
06400		XWD ATYOBL+1,ATYOB2+1
06500		BLOCK ATYOBL+1
06600	ATYOB2:	0			;SECOND ATY OUTPUT BUFFER
06700		XWD ATYOBL+1,ATYOB1+1
06800		BLOCK ATYOBL+1
06900	
07000	ATYIHD:	BLOCK 3			;BUFFER HEADER FOR ATY INPUT
07100	ATYIBL__7			;SIZE OF ATY INPUT BUFFERS
07200	ATYIB1:	0			;FIRST ATY INPUT BUFFER
07300		XWD ATYIBL+1,ATYIB2+1
07400		BLOCK ATYIBL+1
07500	ATYIB2:	0			;SECOND ATY INPUT BUFFER
07600		XWD ATYIBL+1,ATYIB1+1
07700		BLOCK ATYIBL+1
07800	
07900	GDPFIL:	BLOCK 4			;FOR USE BY LOOKUP OF FILES TO INIT THE GDP
     	00100	;FILES TO BE COPIED TO THE XGP ON INITIALIZATION
00200	
00300	DEFINE FILMAC
00400	<
00500		FILMC2(DRAW11,LNK,^DATPPN)
00600		FILMC2(GRAPH,GST,<XWD 1,4>)
00700	>
00800	
00900	DEFINE FILMC2 (A,B,C)
01000	<	SIXBIT /A/
01100	>
01200	FILTAB:	FILMAC
01300	NFILS__.-FILTAB
01400	
01500	DEFINE FILMC2 (A,B,C)
01600	<	SIXBIT /B/
01700	>
01800	GEXTAB:	FILMAC
01900	
02000	DEFINE FILMC2 (A,B,C)
02100	<	C
02200	>
02300	PPNTAB:	FILMAC
     	00100	IFN 0,<
00200	;TABLE OF GDP'S (USE UNTIL SYS GIVES BETTER WAY TO FIND OUT)
00300	
00400	GDP2TB:	DPYTAB:	;SPARE NAMES IN CASE I FORGET WHEN PATCHING
00500	^GDPTAB:	-1	;SPARE WORD FOR PATCHING IN NEW GDP2'S
00600		3	;THE ORIGINAL GDP2
00700		10	;THE FIRST PRODUCTION GDP2
00800		13	;THE FIRST GDP2 REMOTE FROM ITS PDP-11
00900		1	;THERE'S ONE IN THE C.mmp ROOM
01000	^GDPCNT__.-GDPTAB
01100	>;IFN 0
     	00100	;INITIALIZE COMMUNICATIONS WITH THE GDP2 VIA THE ATY LINE
00200	
00300	^INIGDP:	TLNN ^DSPACT
00400		POPJ P,
00500		PUSHJ P,OPATYI
00600		PUSHJ P,OPATYO
00700		JSP TT,^INATYO		;RESTART THE PDP-11
00800		JMP.R0
00900		PASREGS
01000		MOVEI T,1000		;STARTING ADDRESS IS 1000
01100		PUSHJ P,^ATYOW
01200		PUSHJ P,^DOATYO
01300		MOVEI T,=1000		;GIVE IT A SECOND TO HAPPEN
01400		HIBER T,
01500		HALT .
01600	
01700	;NOW PRINT A PRETTY MESSAGE
01800		OUTSTR [ASCIZ /GDP-2 programs loading.  Wait Please.../]
01900	
02000	;NOW INITIALIZE THE GDP2 SPECIAL ROUTINES
02100		INIT ^DAT,14		;INIT THE DSK
02200		SIXBIT/DSK/
02300		XWD 0,IOHD
02400		JRST [	OUTSTR [ASCIZ/
02500	UNABLE TO INIT THE DSK, LOADING ATY
02600	TYPE CONTINUE TO TRY AGAIN
02700	/]
02800			HALT .-3 ]
02900		MOVEI T,IOBUF		;SET UP THE BUFFERS
03000		EXCH T,JOBFF
03100		INBUF DAT,2
03200		MOVEM T,JOBFF
03300		MOVSI TT,-NFILS		;GET COUNT OF FILES TO COPY
03400	INGDP2:	MOVE T,FILTAB(TT)
03500		MOVEM T,GDPFIL
03600		MOVE T,GEXTAB(TT)
03700		MOVEM T,GDPFIL+1
03800		SETZM GDPFIL+2
03900		SETZM GDPFIL+3	;FIRST SEE IF HE HAS ONE!
04000		LOOKUP DAT,GDPFIL
04100		JRST [	MOVE T,PPNTAB(TT)
04200			MOVEM T,GDPFIL+3
04300			LOOKUP DAT,GDPFIL
04400			CAIA
04500			JRST .+1		;OUT OF THE LITERAL
04600			OUTSTR [ASCIZ/
04700	UNABLE TO FIND THE FILE "/]
04800			PUSH P,A
04900			PUSH P,TT
05000			MOVEI A,GDPFIL
05100			JSR ^FPRINT
05200			POP P,TT
05300			POP P,A
05400			OUTSTR [ASCIZ/"
05500	TYPE CONTINUE TO TRY AGAIN
05600	/]
05700			EXIT 1,
05800			JRST INGDP2 ]
05900		OUT ^ATYO,		;INIT THE ATYO BUFFERS
06000		CAIA
06100		HALT .
06200	INGDPL:	SOSGE IOHD+2		;ANY WORDS THERE?
06300		JRST INGDPN		;NO, GET SOME MORE IF WE CAN
06400		ILDB T,IOHD+1		;GET THE WORD
06500		ANDI T,377		;MAKE SURE ONLY 8 BITS
06600		IDPB T,ATYOHD+1		;ZAP IT OUT
06700		SOSG ATYOHD+2		;IS THE BUFFER FULL
06800		OUT ATYO,		;YES, GET ANOTHER
06900		JRST INGDPL		;AND DO THE NEXT WORD
07000		JRST [	OUTSTR [ASCIZ/
07100	OUTPUT ERROR ON ATY, WHILE LOADING GDP2 PROGRAM
07200	/]
07300			HALT . ]
07400	
07500	INGDPN:	IN DAT,			;GET SOME MORE DATA
07600		JRST INGDPL		;AND TRY AGAIN
07700		GETSTS DAT,T		;HMMMMM....
07800		TRNN T,74B23		;ERROR?
07900		TRNN T,1B22		;NO, BETTER HAVE EOF!
08000		JRST [	OUTSTR [ASCIZ/
08100	INPUT ERROR ON GDP2 PROGRAM
08200	/]
08300			HALT . ]
08400		CLOSE DAT,		;CLOSE THE DISK
08500		CLOSE ATYO,		;AND THE ATY
08600		AOBJN TT,INGDP2		;AND LOOP IF THERE ARE MORE FILES
08700		RELEAS DAT,		;DONE WITH THE DSK
08800		CLOSE ATYO,		;FLUSH THE LAST BUFFER
08900	
09000	;Now print another pretty message
09100		OUTSTR [ASCIZ /
09200	Loading complete.  You may proceed.
09300	/]
09400	
09500		POPJ P,			;THAT'S ALL FOLKS
     	00100	OPATYO:	INIT ATYO,4		;CMU IMAGE MODE
00200		SIXBIT/ATY/
00300		XWD ATYOHD,0
00400		JRST [	OUTSTR [ASCIZ/UNABLE TO INIT ATY FOR DISPLAY OUTPUT
00500	TYPE CONTINUE TO TRY AGAIN
00600	/]
00700			HALT OPATYO ]
00800		PUSH P,T
00900		MOVE T,[XWD 400000,ATYOB1+1]
01000		MOVEM T,ATYOHD
01100		MOVSI T,(<POINT 36,0,35>)
01200		MOVEM T,ATYOHD+1
01300		POP P,T
01400		POPJ P,
     	00100	OPATYI:	INIT ^ATYI,4		;CMU IMAGE MODE
00200		SIXBIT/ATY/
00300		XWD 0,ATYIHD
00400		JRST [	OUTSTR [ASCIZ/UNABLE TO INIT ATY FOR DISPLAY INPUT
00500	TYPE CONTINUE TO TRY AGAIN
00600	/]
00700			HALT OPATYI ]
00800		PUSH P,T
00900		MOVE T,[XWD 400000,ATYIB1+1]
01000		MOVEM T,ATYIHD
01100		MOVSI T,(<POINT 36,0,35>)
01200		MOVEM T,ATYIHD+1
01300		POP P,T
01400		POPJ P,
     	00100	;INITIALIZE A BUFFER TO HOLD A MESSAGE FOR THE DP2
00200	
00300	;CALL IS:
00400	;	JSP TT,INATYO
00500	;	PDP-11 INSTRUCTION WORD
00600	;	CONTROL WORD
00700	;	(RETURN)
00800	
00900	INATYO:	OUT ATYO,		;INIT THE BUFFERS
01000		CAIA
01100		HALT .
01200		HRRZ T,ATYOHD		;GET POINTER TO THE BUFFER
01300		ADD T,[POINT 36,2]	;MAKE IT A BYTE POINTER
01400		MOVEM T,ATYOHD+1	;SET UP THE HEADER
01500	;	MOVEI T,<ATYOBL-5>/2*2	;GET THE BYTE COUNT, LEAVING ROOM FOR TERMINATE, WORD COUNT, AND CHECKSUM
01600		MOVEI T,<ATYOBL+1>/2*2	;GET THE BYTE COUNT
01700		MOVEM T,ATYOHD+2	;AND SET THE HEADER
01800		SETZM CHKSUM
01900		MOVEI T,1		;REQUIRED FOR MESSAGES
02000		PUSHJ P,ATYOW		;..
02100	;;	MOVEI T,0		;REQUIRED FOR MESSAGES
02200	;;	PUSHJ P,ATYOW
02300		MOVE T,(TT)		;GET FIRST ARGUMENT
02400		PUSHJ P,ATYOW
02500		MOVE T,1(TT)		;GET SECOND ARG
02600		PUSHJ P,ATYOW
02700		IBP ATYOHD+1		;SKIP THE WORD COUNT
02800		IBP ATYOHD+1
02900		JRST 2(TT)		;AND RETURN
     	00100	;ROUTINES TO READ A BYTE FROM THE GDP2
00200	
00300	^ATYIB:	ILDB TT,ATYIHD+1
00400		SOSL ATYIHD+2
00500		POPJ P,
00600		IN ATYI,
00700		JRST ATYIB
00800		OUTSTR [ASCIZ/INPUT ERROR FROM GDP ATY LINE!
00900	/]
01000		HALT .
     	00100	;ROUTINES TO WRITE A BYTE OR WORD TO THE GDP2
00200	
00300	;CALL IS:
00400	;	LOAD WORD OR BYTE INTO LOW ORDER BITS OF T
00500	;	PUSHJ P,ATYOW (OR ATYOB)
00600	
00700	ATYOW:	PUSHJ P,ATYOB		;OUTPUT THE LOW BYTE FIRST
00800		ASH T,-10		;NOW THE HIGH BYTE
00900	ATYOB:	IDPB T,ATYOHD+1		;STORE THE BYTE
01000		ADDM T,CHKSUM		;KEEP CHECKSUM AS WE GO
01100		SOSE ATYOHD+2		;COUNT IT
01200		POPJ P,			;AND RETURN IF BUFFER NOT FULL
01300		HALT .			;IN CASE WE GO TOO FAR
     	00100	ATYONX:
00200	;	PUSH P,T		;SAVE SOME REGS
00300	;	PUSH P,TT
00400		PUSHJ P,ATYOTM		;TERMINATE THIS BUFFER
00500		^XSOFAR			;CHECK IF HE TYPED ANYTHING
00600		JSP TT,INATYO		;START A NEW MESSAGE
00700	;	ADDPG
00800		REPAPG
00900		PASGRAPH
01000		MOVEI T,SXYGDP
01100		PUSHJ P,ATYOW
01200		MOVE T,IIIX
01300		PUSHJ P,ATYOW
01400		MOVE T,IIIY
01500		PUSHJ P,ATYOW
01600		SETOM GDPMOD		;FORGET THE VECTOR FORMAT!
01700	;	POP P,TT
01800	;	POP P,T
01900		POPJ P,
     	00100	;OUTPUT A BUFFER TO THE GDP2
00200	
00300	ATYOTM:
00400	;	SETOM ATYOHD+2		;MAKE SURE WE DON'T RECURSE!
00500		MOVEI T,TERM		;OUTPUT A TERMINATE
00600		PUSHJ P,ATYOW
00700	DOATYO:	HRRZ TT,ATYOHD		;GET THE BUFFER POINTER
00800		HRRZ T,ATYOHD+1		;FIND OUT WHERE WE ARE
00900		SUBI T,4*2+1(TT)	;GET THE BYTE COUNT
01000		ASH T,-1		;MAKE IT WORDS
01100		MOVEM T,2+<3*2>(TT)	;AND STORE THE LOW PART OF THE WORD COUNT
01200		ADDM T,CHKSUM
01300		ASH T,-10		;NOW THE HIGH PART
01400		MOVEM T,2+<3*2>+1(TT)
01500		ADD T,CHKSUM		;COMPUTE THE FINAL CHECKSUM
01600		MOVN T,T		;GDP-2 WANTS IT NEGATIVE
01700		IDPB T,ATYOHD+1		;PUT IT IN THE BUFFER
01800		HRRZ T,ATYOHD		;LOAD T FOR DEBUGGING
01900		MOVE T,2+<1*2>(T)
02000		CLOSE ATYO,		;ZAP IT OUT
02100		POPJ P,
02200		OUTSTR [ASCIZ/OUTPUT ERROR ON ATY !!!!!!
02300	/]
02400		HALT .
     	00100	;ROUTINES TO OUTPUT A PIECE OF GLASS TO THE GDP2
00200	
00300	;FIRST, TO CLEAR A PIECE OF GLASS
00400	^HYDPOG:	TLNN DSPACT		;SHOULD WE EVEN BOTHER?
00500		POPJ P,			;NO
00600		PUSH P,TT
00700		MOVEI TT,1
00800		LSH TT,(T)
00900		TDNN TT,PAGACT		;IS THIS PIECE OF GLASS ACTIVE
01000		JRST HYDPG2		;NO, ITS ALREADY CLEAR
01100		ANDCAM TT,PAGACT	;MARK IT INACTIVE
01200		PUSH P,T
01300		JSP TT,INATYO		;OK SEND THE MESSAGE TO THE GDP2
01400		DELPG
01500		PASREGS
01600		MOVE T,(P)		;RESTORE THE PIECE OF GLASS NUMBER
01700		PUSHJ P,ATYOW		;SEND IT TOO
01800		PUSHJ P,DOATYO		;ZAP IT OUT
01900		POP P,T
02000	HYDPG2:	POP P,TT
02100		POPJ P,
02200	
02300	;NOW ONE TO OUTPUT A BLINKING PIECE OF GLASS
02400	^BLINKO:	TLNN DSPACT		;SHOULD WE EVEN BOTHER
02500		POPJ P,			;NO
02600		PUSH P,T
02700		PUSH P,TT
02800		JSP TT,INATYO		;START IT WITH BLINKING
02900		BLNKPG
03000		PASGRAPH
03100		JRST DPYOU2		;AND ACT AS IF IT WERE NOT BLINKING
03200	
03300	;AND FINALLY ONE TO PUT OUT A NORMAL PIECE OF GLASS
03400	^DPYOUT:	TLNN DSPACT		;SHOULD WE EVEN BOTHER
03500		POPJ P,			;NO
03600		PUSH P,T
03700		PUSH P,TT
03800		JSP TT,INATYO		;AND START THE MESSAGE
03900	;	LOADPG
04000		REPPG
04100		PASGRAPH
04200	DPYOU2:	SKIPN T,PGLASS		;GET THE PIECE NUMBER
04300		JRST [	OUTSTR [ASCIZ/ASKED TO OUTPUT PIECE OF GLASS 0!
04400	/]
04500			HALT . ]
04600		PUSHJ P,ATYOW		;OUTPUT IT
04700		PUSHJ P,^MRKPAG		;MARK THE PIECE ACTIVE
04800		PUSH P,TTT
04900		PUSH P,A
05000		PUSH P,B
05100		SETZM IIIX		;MOVE TO CENTER SCREEN
05200		SETZM IIIY
05300		SETZM GDPMOD		;ASSUME WE ARE IN MEDIUM VECTOR MODE AT FIRST
05400		MOVE T,CHRSCL+1		;SCALE 1 (III)
05500		MOVEM T,CHRSCL
05600		MOVE T,IIIBRT+1		;BRIGHTNESS 1 (III)
05700		MOVEM T,IIIBRT
05800		MOVEI B,^DPYBUF		;GET LENGTH OF III BUFFER
05900		SUBI B,@BUFPTR
06000		HRLZI B,(B)		;PUT IT IN LEFT HALF
06100		JUMPGE B,IIIDN		;GET OUT IF ITS A NULL LIST!
06200		HRRI B,DPYBUF+1		;GET THE FIRST WORD ADDRESS
06300	IIILOP:
06400		MOVE T,ATYOHD+2
06500		CAIGE T,4*2+6		;MAKE SURE THERE IS ROOM FOR A LONG INVISIBLE VECTOR OF DIFFERENT BRIGHTNESS
06600		PUSHJ P,ATYONX
06700		MOVE A,(B)		;GET AN III WORD
06800		TRNE A,1		;ASCII?
06900		JRST IIICH		;YES, GO DO IT
07000		JUMPE A,IIIDN
07100		TRC A,6
07200		TRNN A,37		;LONG VECTOR
07300		JRST IIILV
07400		TDNN A,[4,,33]		;SHORT VECTOR
07500		JRST IIISV
07600		OUTSTR [ASCIZ/ILLGAL III INSTRUCTION ENCOUNTERED IN DPYOUT!
07700	/]
07800		HALT .
     	00100	IIILV:	TRNE A,77B27		;BRIGHTNESS OR SIZE?
00200		JRST [	LDB T,[POINT 3,A,27]
00300			MOVE T,CHRSCL(T)
00400			MOVEM T,CHRSCL
00500			LDB T,[POINT 3,A,24]
00600			MOVE T,IIIBRT(T)
00700			CAMN T,IIIBRT
00800			JRST DOVEC
00900			MOVEM T,IIIBRT
01000			PUSHJ P,ATYOW
01100			JRST DOVEC ]
01200	DOVEC:	MOVE TT,A
01300		ASHC TT,=11-=36		;TT NOW CONTAINS X FIELD, SIGN EXTENDED
01400		LSH TTT,1
01500		ASH TTT,=11-=36		;AND TTT CONTAINS Y
01600		TRNN A,100		;ABSOLUTE?
01700		JRST IIIREL		;NO
01800		SUB TT,IIIX		;YES, MAKE IT RELATIVE
01900		SUB TTT,IIIY
02000	IIIREL:	ADDM TT,IIIX		;UPDATE CURRENT POSITION
02100		ADDM TTT,IIIY
02200		CAIG TT,177		;CAN WE DO THIS WITH A MEDIUM VECTOR?
02300		CAMGE TT,[-177]
02400		JRST LNGVEC		;NO, X IS TOO BIG
02500		CAIG TTT,177
02600		CAMGE TTT,[-200]
02700		JRST LNGVEC		;NO, Y IS TOO BIG
02800	MEDVEC:	SKIPE GDPMOD		;ARE WE ALREADY IN MEDIUM VECTOR MODE?
02900		JRST [	MOVEI T,LFMTM	;SWITCH TO MEDIUM VECTOR FMT
03000			PUSHJ P,ATYOW
03100			SETZM GDPMOD
03200			JRST .+1 ]
03300		MOVEI T,IOFF1
03400		TRNE A,40		;INVISIBLE?
03500	;	PUSHJ P,MIOFF1		;YES, GO TURN OFF BEAM
03600		PUSHJ P,ATYOW		;YES, GO TURN OFF BEAM
03700		MOVE T,TTT		;OUTPUT Y
03800		PUSHJ P,ATYOB
03900		MOVE T,TT		;OUTPUT X
04000		PUSHJ P,ATYOB
04100	
04200	IIIVDN:	AOBJN B,IIILOP		;GO BACK IF THERE ARE ANY MORE VECTORS
04300	IIIDN:	HRRZ TT,ATYOHD		;GET TOP OF BUFFER AGAIN
04400		MOVE T,2+<1*2>(TT)	;GET OLD INSTRUCTION
04500		CAIN T,REPPG		;IF IT IS A REPPG
04600		MOVEI T,LOADPG		;MAKE IT A LOADPG
04700		CAIN T,REPAPG		;AND IF IT IS A REPAPG
04800		MOVEI T,REPLPG		;MAKE IT A REPLPG
04900		SUB T,2+<1*2>(TT)
05000		ADDM T,2+<1*2>(TT)	;CHANGE THE LOW BYTE (THE HIGH BYTE STAYS AN EMT11)
05100		ADDM T,CHKSUM
05200		PUSHJ P,ATYOTM		;ALL DONE! TERMINATE IT.
05300		POP P,B
05400		POP P,A
05500		POP P,TTT
05600		POP P,TT
05700		POP P,T
05800		POPJ P,
     	00100	LNGVEC:	SKIPG GDPMOD		;ARE WE ALREADY IN LONG VECTOR MODE?
00200		JRST [	MOVEI T,LFMTL	;NO, PUT US IN LONG VEC FMT
00300			PUSHJ P,ATYOW
00400			MOVEM T,GDPMOD
00500			JRST .+1 ]
00600		MOVEI T,IOFF1
00700		TRNE A,40		;INVISIBLE?
00800	;	PUSHJ P,LIOFF1		;YES, GO TURN IT OFF
00900		PUSHJ P,ATYOW		;YES, GO TURN IT OFF
01000	;	MOVEI T,4		;WE NEED AT LEAST 4 CONTIGUOUS BYTES
01100	;	CAMLE T,ATYOHD+2	;CAN WE FIT INTO THIS BUFFER?
01200	;	PUSHJ P,ATYONX		;NO, GO TO THE NEXT BUFFER
01300		MOVE T,TTT		;OUTPUT Y
01400		PUSHJ P,ATYOW
01500		MOVE T,TT		;OUTPUT X
01600		PUSHJ P,ATYOW
01700		JRST IIIVDN		;AND SEE IF THERE ARE ANY MORE
     	00100	IIISV:	SKIPE GDPMOD		;MAKE SURE WE ARE IN MEDIUM VECTOR MODE
00200		JRST [	MOVEI T,LFMTM
00300			PUSHJ P,ATYOW
00400			SETZM GDPMOD
00500			JRST .+1 ]
00600	IIISV2:	MOVE TT,A
00700		ASHC TT,=7-=36		;TT GETS X FIELD
00800		LSH TTT,1
00900		ASH TTT,=7-=36		;TTT GETS Y FIELD
01000		ADDM TT,IIIX		;UPDATE POSITION
01100		ADDM TTT,IIIY
01200		MOVEI T,IOFF1
01300		TLNE A,10		;INVISIBLE?
01400	;	PUSHJ P,MIOFF1		;YES, TURN IT OFF
01500		PUSHJ P,ATYOW		;YES, TURN IT OFF
01600		MOVE T,TTT		;OUTPUT Y
01700		PUSHJ P,ATYOB
01800		MOVE T,TT		;OUTPUT X
01900		PUSHJ P,ATYOB
02000	IIISV3:	LSH A,=16		;GET THE OTHER VECTOR
02100		TLNE A,1		;DID WE ALREADY DO IT?
02200		JRST IIISV2		;NO, GO DO IT
02300		JRST IIIVDN
     	00100	;LIOFF1:	SKIPA T,[6]		;LONG NEEDS 6
00200	;MIOFF1:	MOVEI T,4		;AND MEDIUM 4 CONSECUTIVE BYTES
00300	;	CAMLE T,ATYOHD+2	;DO WE HAVE ENOUGH ROOM IN THIS BUFFER?
00400	;	PUSHJ P,ATYONX		;NO, START THE NEXT BUFFER
00500	;	MOVEI T,IOFF1		;TURN OFF ONE VECTOR
00600	;	JRST ATYOW
     	00100	IIICH:	CAIN A,1		;IS IT REALLY NULL STRING?
00200		JRST IIIVDN		;YES, IGNORE IT
00300		MOVE T,ATYOHD+2
00400		CAIGE T,2*5+<2*6>+6
00500		PUSHJ P,ATYONX
00600		MOVEI T,LCMD+1		;SWITCH TO CHARACTER MODE
00700		PUSHJ P,ATYOW
00800		MOVE T,CHRSCL		;CHECK THE SCALE
00900		CAME T,VECSCL		;IS IT LIKE VECTORS?
01000		PUSHJ P,ATYOW		;NO, GO CHANGE IT
01100		HLRE TT,CHRSCL		;GET THE CHARACTER WIDTH
01200		MOVEI T,200		;SPECIAL CODE TO INITIALIZE STRINGS
01300		PUSHJ P,ATYOB
01400	IIICH2:
01500	FOR I_1,5 <
01600		LDB T,[POINT 7,A,<7*I-1>]
01700		JUMPE T,.+5		;UNLESS ITS A NULL CHARACTER
01800		ADDM TT,IIIX		;COUNT ITS WIDTH
01900		PUSHJ P,ATYOB		;AND OUTPUT THE CHARACTER
02000		MOVEI T,301		;BACK UP 2 INCS FOR THE LOSING CHAR SET
02100		PUSHJ P,ATYOB
02200	>;FOR LOOP
02300		MOVE TTT,ATYOHD+2
02400		CAIGE TTT,2*5+<2*3>+1+6	;IS THERE ENOUGH ROOM FOR ANOTHER WORD?
02500		JRST IIICNB		;NO, GO TO THE NEXT BUFFER
02600		MOVE A,1(B)		;GET THE NEXT WORD
02700		TRNE A,1		;IS IT ASCII TOO?
02800		AOBJN B,IIICH2		;YES, GO DO IT UNLESS OFF END
02900	IIICNB:	MOVEI T,0
03000		TRNE TTT,1		;DID WE OUTPUT AN ODD NUMBER OF CHARS?
03100		PUSHJ P,ATYOB		;YES, GO OUTPUT ONE MORE
03200		AOBJP B,IIIDN		;IF WE HAVE NO MORE III STUFF, FINISH UP
03300	;	JUMPE A,IIIDN		;0 IS END OF DISPLAY
03400		MOVE T,VECSCL		;CHECK THAT WE ARE BACK TO VECTOR SCALE
03500		CAME T,CHRSCL
03600		PUSHJ P,ATYOW
03700		MOVEI T,ION		;MAKE SURE WE ARE VISIBLE
03800		PUSHJ P,ATYOW
03900		MOVEI T,LCMD+0		;GO BACK TO VECTOR MODE
04000		PUSHJ P,ATYOW
04100		SETOM GDPMOD		;CHARACTERS CLOBBER THE VECTOR FORMAT!
04200		JRST IIILOP		;AND GO DO THE NEXT WORD
     	00100	;MACROS TO SIMULATE III DPYCLR, DPYPOS, DPYSIZ
00200	
00300	DEFINE ^DPYCLR <
00400	PUSHJ P,[
00500		PUSH P,T
00600		PUSH P,TT
00700		JSP TT,INATYO
00800		CLRGDP
00900		PASREGS
01000		PUSHJ P,DOATYO
01100		POP P,TT
01200		POP P,T
01300		POPJ P,
01400	]
01500	>
01600	
01700	DEFINE ^DPYPOS (I) <
01800	PUSHJ P,[
01900		JSP TT,INATYO
02000		PPTOP
02100		PASREGS
02200		MOVEI T,<I>
02300		PUSHJ P,ATYOW
02400		JRST DOATYO
02500	]
02600	>
02700	
02800	DEFINE ^DPYSIZ (I) <
02900	PUSHJ P,[
03000		JSP TT,INATYO
03100		PPSIZ
03200		PASREGS
03300		MOVEI T,<I>&777
03400		PUSHJ P,ATYOW
03500		MOVEI T,<<I>&777>*<<I>/1000>
03600		PUSHJ P,ATYOW
03700		JRST DOATYO
03800	]
03900	>
     	00100	^NOLAST:	TLNN DSPACT
00200		POPJ P,
00300		MOVE T,NAMBUF
00400		TLNN T,774000		;IS THE FILE NAME NULL?
00500		JRST [	JSP TT,INATYO	;YES, SPECIAL CASE IT.
00600	
00700			SETFIL
00800			PASREGS
00900			MOVEI T,NOPGDP
01000			PUSHJ P,ATYOW
01100			JRST DOATYO ]
01200		JSP TT,INATYO
01300		SETFIL
01400		PASGRAPH
01500		MOVE TT,[POINT 7,NAMBUF]
01600		MOVEI T,200		;SPECIAL CHAR TO SET UP CHARACTER SET
01700		PUSHJ P,ATYOB
01800		ILDB T,TT
01900		JUMPN T,.-2
02000		MOVE TT,ATYOHD+2	;CHECK IF WE OUTPUT AN ODD NUMBER OF BYTES
02100		TRNE TT,1
02200		PUSHJ P,ATYOB		;YES, PUT OUT A PAD
02300		JRST ATYOTM		;AND GO FINISH IT OUT
     	00100	^PMODE:	TLNN DSPACT
00200		POPJ P,
00300		PUSH P,TT
00400		MOVE T,^MODE
00500		MOVE TT,^DMODE(T)	;GET THE NEW MODE
00600		LSHC T,7		;T GETS FIRST CHAR
00700		LSH TT,=8-=36
00800		SKIPN TT
00900		MOVEI TT,40*2
01000		DPB TT,[POINT 9,T,28]	;AND THE SECOND CHAR
01100		CAMN T,MODWRD		;IS IT THE SAME AS BEFORE
01200		JRST PMODE2		;YES, DONT CHANGE IT
01300		MOVEM T,MODWRD
01400		JSP TT,INATYO
01500		SETMOD
01600		PASREGS
01700		MOVE T,MODWRD
01800		PUSHJ P,ATYOW
01900		PUSHJ P,DOATYO
02000	PMODE2:	POP P,TT
02100		POPJ P,
     	00100	^UPLVL:	TLNN DSPACT
00200		POPJ P,
00300		HRRZ T,MACPNT
00400		SUBI T,MACPDL-1
00500		IDIVI T,5
00600		PUSHJ P,GETD2
00700		CAMN T,LVLWRD
00800		POPJ P,
00900		MOVEM T,LVLWRD
01000		JSP TT,INATYO
01100		SETLVL
01200		PASREGS
01300		MOVE T,LVLWRD
01400		PUSHJ P,ATYOW
01500		JRST DOATYO
01600	
01700	GETD2:	PUSH P,TT
01800		IDIVI T,=10
01900		JUMPE T,[
02000			HRREI T,-20*400
02100			JRST GETD2B ]
02200		LSH TT,=8
02300		PUSH P,TT
02400		IDIVI T,=10
02500		POP P,T
02600	GETD2B:	ADDI T,60*401(TT)
02700		POP P,TT
02800		POPJ P,
     	00100	^UPSCAL:	TLNN DSPACT
00200		POPJ P,
00300		MOVE T,NSCALE
00400		PUSHJ P,GETD2
00500		CAMN T,SCLWRD
00600		POPJ P,
00700		MOVEM T,SCLWRD
00800		JSP TT,INATYO
00900		SETSCL
01000		PASREGS
01100		MOVE T,SCLWRD
01200		PUSHJ P,ATYOW
01300		JRST DOATYO
     	00100	^READY:	PUSH P,T
00200		MOVEI T,"*"*400+200
00300		JRST SREADY
00400	
00500	^NREADY:	PUSH P,T
00600		MOVEI T,200
00700	^SREADY:	TLNE DSPACT
00800		CAMN T,RDYWRD
00900		JRST ^XREADY
01000		MOVEM T,RDYWRD
01100		PUSH P,TT
01200		JSP TT,INATYO
01300		SETRDY
01400		PASREGS
01500		MOVE T,RDYWRD
01600		PUSHJ P,ATYOW
01700		PUSHJ P,DOATYO
01800		POP P,TT
01900	XREADY:	POP P,T
02000		POPJ P,
     	00100	^CURBRT:	TLNN DSPACT
00200		POPJ P,
00300		ANDI T,7
00400		SKIPN T,IIIBRT(T)
00500		MOVE T,IIIBRT+6
00600		CAMN T,FBRT
00700		POPJ P,
00800		MOVEM T,FBRT
00900		JSP TT,INATYO
01000		SETFBR
01100		PASREGS
01200		MOVE T,FBRT
01300		PUSHJ P,ATYOW
01400		JRST DOATYO
     	00100	^CLRCLC:	SKIPA TT,[TRZN T,BIGFLG]
00200	^SETCLC:	MOVE TT,[TROE T,BIGFLG]
00300	CHFLGS:	MOVE T,FBFLGS
00400		XCT TT
00500		POPJ P,
00600		MOVEM T,FBFLGS
00700		JSP TT,INATYO
00800		SETFLG
00900		PASREGS
01000		MOVE T,FBFLGS
01100		PUSHJ P,ATYOW
01200		JRST DOATYO
01300	
01400	^CURSOFF:TRZ M,^CURSOR
01500		MOVE TT,[TRZN T,FOLFLG]
01600		JRST CHFLGS
01700	
01800	^CURSON:	TRO M,CURSOR
01900		MOVE TT,[TROE T,FOLFLG]
02000		JRST CHFLGS
     	00100	^VHLINE:	TLNN DSPACT
00200		POPJ P,
00300		PUSH P,T
00400		TLNE ^LOCATE
00500		PUSHJ P,^VECT
00600		JRST [	MOVEI TT,OFSCRN
00700			MOVEI T,OFSCRN
00800			JRST ^VHLIN2 ]
00900		MOVE T,TT
01000		LSH T,=11
01100		ASH T,=11-=36
01200		ASH TT,=11-=36
01300	VHLIN2:	CAMN TT,LOCATX
01400		CAME T,LOCATY
01500		CAIA
01600		JRST ^VHLIN1
01700		MOVEM TT,LOCATX
01800		MOVEM T,LOCATY
01900		JSP TT,INATYO
02000		STLOC
02100		PASREGS
02200		MOVE T,LOCATX
02300		PUSHJ P,ATYOW
02400		MOVE T,LOCATY
02500		PUSHJ P,ATYOW
02600		PUSHJ P,DOATYO
02700	VHLIN1:	POP P,T
02800		POPJ P,
     	00100	^FOLOW1:	PUSHJ P,VECT
00200		JRST ^CLEAR1
00300		MOVE T,TT
00400		LSH T,=11
00500		ASH T,=11-=36
00600		ASH TT,=11-=36
00700	FOLW1B:	CAMN TT,FVEC1X
00800		CAME T,FVEC1Y
00900		TLNN DSPACT
01000		POPJ P,
01100		MOVEM TT,FVEC1X
01200		MOVEM T,FVEC1Y
01300		JSP TT,INATYO
01400		SETFV1
01500		PASREGS
01600		MOVE T,FVEC1X
01700		PUSHJ P,ATYOW
01800		MOVE T,FVEC1Y
01900		PUSHJ P,ATYOW
02000		JRST DOATYO
02100	
02200	CLEAR1:	MOVEI TT,NOPGDP
02300		MOVEI T,NOPGDP
02400		JRST FOLW1B
02500	
02600	^FOLOW2:	PUSHJ P,VECT
02700		JRST ^CLEAR2
02800		MOVE T,TT
02900		LSH T,=11
03000		ASH T,=11-=36
03100		ASH TT,=11-=36
03200	FOLW2B:	CAMN TT,FVEC2X
03300		CAME T,FVEC2Y
03400		TLNN DSPACT
03500		POPJ P,
03600		MOVEM TT,FVEC2X
03700		MOVEM T,FVEC2Y
03800		JSP TT,INATYO
03900		SETFV2
04000		PASREGS
04100		MOVE T,FVEC2X
04200		PUSHJ P,ATYOW
04300		MOVE T,FVEC2Y
04400		PUSHJ P,ATYOW
04500		JRST DOATYO
04600	
04700	CLEAR2:	MOVEI TT,NOPGDP
04800		MOVEI T,NOPGDP
04900		JRST FOLW2B
     	00100	>;CMU
00200	BEND
