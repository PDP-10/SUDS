00100	SUBTTL	AUG.FAI: ROUTINES WITH KNOWLEDGE  OF CMU AUGUAT BOARD LOCATIONS
00200	BEGIN AUG
00300	
00400	;THE TRANSFER VECTOR FOR   AUGAT 8136-UG1  WIRE WRAP BOARD
00500	
00600	^AUGU1:
00700		JRST LCIU1	;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SET UP AUGU1 execution FLOW CONTROL VECTORS
00800		JRST LOCOUT
00900	MDPC,<
01000		JRST CSLTLP
01100		JRST GTSLTL
01200	MD,<
01300		JRST GTCONP
01400		JRST CSLTLD
01500	>;MD
01600	>;MDPC
01700	MWL,<
01800		JRST WLOCOUT
01900		JRST LOCPNC
02000		JRST LOCPNW
02100		JRST PRCNPN
02200		JRST LOCAU1
02300		JRST PADPRT
02400		JRST RAYDIP
02500		JRST RAYCON
02600	>;MWL
02700		[ASCIZ/#L#/]			;BAY RACK SLOT
02800	MDPC,<	[ASCIZ/Connector pin (L-#)?/]
02900		[ASCIZ/Dip location (LL#)?/]
03000	>;MDPC
03100	MWL,<	[ASCIZ/LL#/]
03200		[ASCIZ/*LL# or J#-#/]
03300	>;MWL
03400	CHECK AUGU1,LTVLEN		;CHECK THE LENTH OF THE AUGU1 TRANSFER VECTORS
03500	
03600	
03700	;	VECTORS FOR execution FLOW CONTROL
03800	;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
03900	VECU1:				;AUGU1 VECTORS (AUGAT 8136-UG1)
04000		JRST JP1U1		; jmp1
04100		JRST RETJP2		; jmp2
04200		JRST	AU1L2		; jmp3
04300		JRST	JP4U1		; jmp4
04400		JFCL			; jmp5 not used
04500		JFCL			; jmp6 not used
04600		JFCL			; jmp7 not used
04700		JFCL			; jmp8 not used
04800	MD,<
04900		JRST JP9U1		; jmp9
05000		JRST JP0U1		; jmp10
05100	>;MD
     	00100	;THE TRANSFER VECTOR FOR   AUGAT 8136-UG6  WIRE WRAP BOARD
00200	
00300	^AUGU6:
00400		JRST LCIU6	;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SETUP AUGU6 execution FLOW CONTROL VECTORS
00500		JRST LOCOUT
00600	MDPC,<
00700		JRST CSLTLP
00800		JRST GTSLTL
00900	MD,<
01000		JRST GTCONP
01100		JRST CSLTLD
01200	>;MD
01300	>;MDPC
01400	MWL,<
01500		JRST WLOCOUT
01600		JRST LOCPNC
01700		JRST LOCPNW
01800		JRST PRCNPN
01900		JRST LOCAU6
02000		JRST PADPRT
02100		JRST RAYDIP
02200		JRST RAYCON
02300	>;MWL
02400		[ASCIZ/#L#/]		;BAY RACK SLOT
02500	MDPC,<	[ASCIZ/Connector pin (L#-#)?/]
02600		[ASCIZ/Dip location (LL#)?/]
02700	>;MDPC
02800	MWL,<	[ASCIZ/LL#/]
02900		[ASCIZ/*LL# or J#-#/]
03000	>;MWL
03100	CHECK AUGU6,LTVLEN		;CHECK THE LENTH OF THE AUGU6 TRANSFER VECTORS
03200	;	VECTORS FOR execution FLOW CONTROL
03300	;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
03400	VECU6:				;AUGU6 VECTORS (AUGAT 8136-UG6)
03500		JRST JP1U6		; jmp1
03600		JRST RETJP2		; jmp2
03700		JRST	AU6L2		; jmp3
03800		JRST	JP4U6		; jmp4
03900		JFCL			; jmp5 not used
04000		JFCL			; jmp6 not used
04100		JFCL			; jmp7 not used
04200		JFCL			; jmp8 not used
04300	MD,<
04400		JRST JP9U6		; jmp9
04500		JRST JP0U6		; jmp10
04600	>;MD
     	00100	;THE TRANSFER VECTOR FOR  AUGAT AX118-75-[G]
00200	
00300	^AUGCMU:
00400		JRST LCICMU		;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SET UP AUGCMU execution FLOW CONTROL VECTORS
00500		JRST LOCOUT
00600	MDPC,<
00700		JRST CSLTLP
00800		JRST GTSLTL
00900	MD,<
01000		JRST GTCONP
01100		JRST CSLTLD
01200	>;MD
01300	>;MDPC
01400	MWL,<
01500		JRST WLOCOUT
01600		JRST LOCPNC
01700		JRST LOCPNW
01800		JRST PRCNPN
01900		JRST LOCAUC
02000		JRST PADPRT
02100		JRST RAYDIP
02200		JRST RAYCON
02300	>;MWL
02400		[ASCIZ/#L#/]		;BAY RACK SLOT
02500	MDPC,<	[ASCIZ/Connector pin (L#-#)?/]
02600		[ASCIZ/Dip location (LL#)?/]
02700	>;MDPC
02800	MWL,<	[ASCIZ/LL#/]
02900		[ASCIZ/*LL# or J#-#/]
03000	>;MWL
03100	CHECK AUGCMU,LTVLEN		;CHECK THE LENTH OF THE AUGCMU TRANSFER VECTORS
03200	
03300	
03400	;	VECTORS FOR execution FLOW CONTROL
03500	;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
03600	VECCMU:				;AUGCMU VECTORS (AUGAT AX118-75-[G])
03700		JRST JP1CMU		; jmp1
03800		JRST RETJP2		; jmp2
03900		JRST	ACML2		; jmp3
04000		JRST	JP4CMU		; jmp4
04100		JFCL			; jmp5 not used
04200		JFCL			; jmp6 not used
04300		JFCL			; jmp7 not used
04400		JFCL			; jmp8 not used
04500	MD,<
04600		JRST JP9CMU		; jmp9
04700		JRST JP0CMU		; jmp10
04800	>;MD
     	00100	;THE TRANSFER VECTOR FOR  AUGAT 8136-LG498-49
00200	
00300	^AUGHEX:
00400		JRST LCIHEX		;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SETUP AUGHEX execution FLOW CONTROL VECTORS
00500		JRST LOCOUT
00600	MDPC,<
00700		JRST CSLTLP
00800		JRST GTSLTL
00900	MD,<
01000		JRST GTCONP
01100		JRST CSLTLD
01200	>;MD
01300	>;MDPC
01400	MWL,<
01500		JRST WLOCOUT
01600		JRST LOCPNC
01700		JRST LOCPNW
01800		JRST PRCNPN
01900		JRST LOCAUX
02000		JRST PADPRT
02100		JRST RAYDIP
02200		JRST RAYCON
02300	>;MWL
02400		[ASCIZ/#L#/]		;BAY RACK SLOT
02500	MDPC,<	[ASCIZ/Connector pin (J#-# or *LL#)?/]
02600		[ASCIZ/Body location (LL#)?/]
02700	>;MDPC
02800	MWL,<	[ASCIZ/LL#/]			;IC location used in ''P command
02900		[ASCIZ/*LL# or J#-#/]		;Connecter used in ''P command
03000	>;MWL
03100	CHECK AUGHEX,LTVLEN		;CHECK THE LENTH OF THE AUGHEX TRANSFER VECTOR
03200	
03300	
03400	;	VECTORS FOR execution FLOW CONTROL
03500	;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
03600	VECHEX:				;AUGHEX VECTORS (AUGAT 8136-LG498-49)
03700		JRST JP1HEX		; jmp1
03800		JRST JP2HEX		; jmp2
03850		JRST AUXL2		; jmp3
03900		JRST	JP4HEX		; jmp4
04000		JFCL			; jmp5 not used
04100		JFCL			; jmp6 not used
04200		JFCL			; jmp7 not used
04300		JFCL			; jmp8 not used
04500	MD,<
04600		JRST JP9HEX		; jmp9
04700		JRST JP0HEX		; jmp10
04800	>;MD
     	00100	; The transfer vector for AUGAT 8136-UG157
00200	
00300	^AUGDBL:
00400		JRST	LCIDBL		; initialize letter/no conversion
00500		JRST	LOCOUT		; print location
00600	MDPC,<
00700		JRST	CSLTLP
00800		JRST	GTSLTL
00900	MD,<	
01000		JRST	GTCONP
01100		JRST	CSLTLD
01200	>;MD
01300	>;MDPC
01400	MWL,<
01500		JRST	WLOCOUT
01600		JRST	LOCPNC
01700		JRST	LOCPNW
01800		JRST	PRCNPN
01900		JRST LOCAUD
02000		JRST PADPRT
02100		JRST RAYDIP
02200		JRST RAYCON
02300	>;MWL
02400		[ASCIZ/#L#/]		;BAY RACK SLOT
02500	MDPC,<	[ASCIZ/Connector pin (*J#-# or *LL#)?/]
02600		[ASCIZ/Body location (L#)?/]
02700	>;MDPC
02800	MWL,<	[ASCIZ/L#/]			;IC location used in ''P command
02900		[ASCIZ/LL# or *LL# or J#-#/]		;Connecter used in ''P command
03000	>;MWL
03100	CHECK AUGDBL,LTVLEN		;CHECK THE LENTH OF THE AUGDBL TRANSFER VECTOR
03200	
03300	
03400	;	VECTORS FOR EXECUTION FLOW CONTROL
03500	;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
03600	VECDBL:				;AUGDBL VECTORS (AUGAT 8136-UG157)
03700		JRST JP1DBL
03800		JRST JP2DBL
03900		JRST	ADBL2
04000		JRST	JP4DBL
04100		JFCL
04200		JFCL
04300		JFCL
04400		JFCL
04500	MD,<
04600		JRST JP9DBL
04700		JRST JP0DBL
04800	>;MD
     	00100	L2NSUB:	BLOCK L2NLEN		;SET UP A BLOCK FOR LETTER TO NUMBER CONVERSION TABLE FOR BOARDS IN AUG4
00200	N2LSUB:	REPEAT N2LLEN, < "?"	;SET UP A BLOCK FOR NUMBER TO LETTER CONVERSION TABLES FOR BOARDS IN AUG4
00300	>
00400	EN2L__.				;SET A MARKER SO WE CAN GET BACK HERE AFTER MAKING UP THE LETTER AND NUMBER CONVERSION TABLES
00500	
00600	NNN__1
00700	FOR I IN(A,B,C,D,E,F,G,H,J,K,L,M,N,P,Q,R,S,T,U,V,W,X,Y,Z)
00800	<	L2N2L I,0
00900	>				;MAKE THE LETTER TO NUMBER AND NUMBER TO LETTER CONVERSION TABLES
01000	
01100	N2LMAX__NNN-1			;SET THE MAXIMUM NUMBER WHICH CAN BE CONVERTED INTO A LETTER
01200	
01300	ORG EN2L			;GET BACK NOW THAT WE HAVE MADE UP THE LETTER AND NUMBER CONVERSION TABLES
01400	
01500		STORAGE (LOW)
01600		VECBLK:			;VECTOR BLOCK ALLOWING execution FLOW CONTROL
01700	JMP1:	JRST NBOARD
01800	JMP2:	JRST NBOARD
01900	JMP3:	JRST NBOARD		
02000	JMP4:	JRST NBOARD		
02100	JMP5:	JRST NBOARD		; not used
02200	JMP6:	JRST NBOARD		; not used
02300	JMP7:	JRST NBOARD		; not used
02400	JMP8:	JRST NBOARD		; not used
02500	MD,<
02600	JMP9:	JRST NBOARD
02700	JMP0:	JRST NBOARD
02800	>;MD
02900		STORAGE (PURE)
03000	LCIU1:	MOVE T,[VECU1,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGU1
03100		JRST LCINIT
03200	LCIU6:	MOVE T,[VECU6,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGU6
03300		JRST LCINIT
03400	LCICMU:	MOVE T,[VECCMU,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGCMU
03500		JRST LCINIT
03600	LCIHEX:	MOVE T,[VECHEX,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGHEX
03700		JRST	LCINIT
03800	LCIDBL:	MOVE	T,[VECDBL,,VECBLK]	; load execution flow control vectors for AUGDBL
03900	LCINIT:
04000		BLT	T,VECBLK+ MD,<=9;> 7	;TRANSFER IN THE SPECIFIC BOARD'S VECTORS FOR execution FLOW CONTROL.
04100		MOVE	T,[L2NSUB,,L2N]		;BLOCK TRANSFER TO BOARDS THE NUMBER AND LETTER CONVERSION TABLES
04200		BLT	T,L2N+L2NLEN+N2LLEN-1	;BLOCK TRANSFER TO BOARDS THE NUMBER AND LETTER CONVERSION TABLES
04300		MOVEI	T,N2LMAX		;TRANSFER TO BOARDS THE LARGEST NUMBER THAT CAN BE CONVERTED TO A LETTER
04400		MOVEM	T,MAXN2L		;TRANSFER TO BOARDS THE LARGEST NUMBER THAT CAN BE CONVERTED TO A LETTER
04500		POPJ	P,
     	00100	
00200	SUBTTL	WLOCOUT, LOCOUT -- LOCATION PRINTING ROUTINES; SLTLPN
00300	
00400	MWL,<
00500	WLOCOUT:
00600	>;MWL
00700	LOCOUT:
00800		LDB TTT,[POINT 6,A,23]
00900		JUMPE TTT,CPOPJ		;NOTHING HERE, MEANS NOTHING AT ALL
01000		TRNN A,7777		;CONNECTOR PIN?
01100		JRST @JMP1		; board-dependent code
01200		PUTBYT @N2L(TTT)
01300		JRST	@JMP4			; board-dependent
01400	
01500	JP4U1:
01600	JP4U6:
01700	JP4CMU:
01800	JP4HEX:
01900		LDB TTT,[POINT 6,A,29]
02000		PUTBYT @N2L(TTT)
02100	JP4DBL:
02200		MOVEI TTT,2
02300		MOVEM TTT,NDIG
02400		LDB T,[POINT 6,A,35]
02500		JRST NPUTDEC
02600	
02700	JP1U1:
02800			PUTBYT "J"
02900			PUTBYT @N2L(TTT)
03000			POPJ P,
03100	
03200	
03300	JP1U6:
03400	JP1CMU:
03500			PUTBYT "J"
03600			ROT TTT,-1
03700			PUTBYT @N2L(TTT)
03800			LSH TTT,1-=36
03900			PUTBYT "1"(TTT)
04000			POPJ P,
04100	
04200	JP1HEX:
04300			TRNE TTT,40		;Is it a DEC paddle?
04400			JRST [	PUTBYT "J"
04500				MOVEI T,-40(TTT)
04600				JRST PUTDEC ]
04700			PUTBYT "*"		;yes
04800			PUTBYT @N2L(TTT)
04900			POPJ P,
05000	JP1DBL:
05050		TRNE TTT,40
05075		JRST	[PUTBYT  "J"
05300			PUTBYT	21(TTT)
05350			POPJ	P,]
05375		PUTBYT	"*"		; yes, DEC paddle
05387		PUTBYT	@N2L(TTT)	; get letter code
05400		POPJ	P,
05500	
     	00100	SUBTTL	CSLTLP,LOCPNC,LOCPNW,PRCNPN -- CONNECTOR PIN PRINTING STUFF
00200	
00300	CSLTLP:
00400	MD,<	PUSHJ P,CSLTOUT
00500		HLRZ A,A
00600		PUSH P,A
00700		TRZ A,7777
00800		PUSHJ P,LOCOUT
00900		POP P,A
01000	>;MD
01100	MWL,<
01200	LOCPNC:
01300	LOCPNW:
01400		PUSHJ P,LOCOUT
01500		MOVSS A,A		;tTHIS IS TO ALLOW RESTITUTION FOR SECOND CALL
01600	>;MWL
01700		JRST @JMP2		; board-dependent code
01800	JP2HEX:
01900	JP2DBL:
02000		TRNE A,7700
02100		JRST [	LDB T,[POINT 6,A,29]
02200			PUTBYT @N2L(T)
02300			LDB T,[POINT 6,A,35]
02400			MWL,<	MOVSS A,A	>	;RETURN LEFT HALF TO LEFT HALF FOR SECOND CALL
02500			JRST PUTDEC ]
02600	RETJP2:
02700	MWL,<
02800	PRCNPN:
02900	>;MWL
03000		PUTBYT "-"
03100		LDB T,[POINT 6,A,35]
03200		MOVEI TTT,2
03300		MOVEM TTT,NDIG
03400		MWL,<	MOVSS A,A	>	;PUT LEFT HALF BACK IN LEFT HALF FOR SECOND CALL
03500		JRST NPUTDEC
     	00100	SUBTTL	GETLOC [AUGHEX] -----
00200	;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
00300	; for AUGHEX boards
00400	;	Valid syntax
00500	;
00600	;	Bay/rack/slot:	#L#
00700	;	Connector pin:	J#-# or *LL#
00800	;	Body location:	LL#
00900	;
01000	;
01100	;	For connector pins, the scanner is left pointing to:
01200	;	J#-#
01300	;	  ^
01400	;	*LL#
01500	;	  ^
01600	
01700	;CALL IS:
01800	;	PUSHJ P,GETLOC
01900	;	JRST ERROR
02000	;MDPC,<	JRST CRLF.ONLY >
02100	;	JRST GOT.CONNECTOR.IN.TT
02200	;	(DIP LOC IN TT)
02300	
02400	BEGIN LOCAUX
02500	^LOCAUX:
02600	;SHOULD PRINT A CUE MESAGE HERE
02700	^AUXL2:
02800		GETCH
02900	
03000	MDPC,<	CAIN CHRREG,12
03100		JRST CPOPJ1
03200	>;MDPC
03300	GTLOC3:	
03400	
03500		CAIN	CHRREG,"*"		; DEC paddle?
03600		JRST	GDECCN
03700		CAIL CHRREG,"A"
03800		CAILE CHRREG,"Z"
03900		POPJ P,
04000		SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
04100		POPJ P,				; unless illegal or missing!
04200		PUSH P,TT
04300		GETNUM
04400		POP P,TT
04500		JUMPN NUMREG,GETCON
04600		CAIL CHRREG,"A"
04700		CAILE CHRREG,"Z"
04800		POPJ	P,
04900		SKIPN CHRREG,L2N-"A"(CHRREG)
05000		POPJ P,
05100		LSH TT,6
05200		TRO TT,(CHRREG)
05300		HRLM TT,(P)
05400		GETNUM
05500		JUMPLE NUMREG,CPOPJ
05600		CAILE NUMREG,=99
05700		POPJ P,
05800		HLRZ TT,(P)
05900		LSH TT,6
06000		TRO TT,(NUMREG)
06100	MDPC,<	AOS (P) >
06200		JRST CPOPJ2
06300	
06400	GETCON:
06500		CAMN TT,L2N+"J"-"A"	; must be the letter "J"
06600		CAIL NUMREG,40
06700		POPJ P,
06800		MOVEI TT,40(NUMREG)		; SET HIGH-ORDER BIT
06900	GCNXIT:	LSH TT,6
07000		LSH TT,6
07100	MDPC,<	AOS (P) >
07200		JRST CPOPJ1
07300	;	Encoding of J# (form J#-#)
07400	;;	----------------------------------------
07500	;	|               |1| 5  |       12      |
07600	;	|               |1| #  |       0       |
07700	;;	----------------------------------------
07800	GDECCN:	GETCH
07900		CAIL CHRREG,"A"
08000		CAILE CHRREG,"Z"
08100		POPJ P,
08200		SKIPN TT,L2N-"A"(CHRREG)
08300		POPJ P,
08400		GETCH
08500		JRST GCNXIT
08600	;	Jack encoding for DEC paddle designated by "L"
08700	;;	----------------------------------------
08800	;	|               |  6   |       12      |
08900	;	|               |(L+32)|        0      |
09000	;;	----------------------------------------
09100		
09200	BEND LOCAUX
     	00100	SUBTTL GETLOC [AUGU1] -----
00200	BEGIN LOCAU1
00300	;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
00400	; for AUGU1 boards
00500	;	valid syntax is:
00600	;	Bay/Rack/Slot: #L#
00700	;	Connector pin: L-#
00800	;	Body location: LL#
00900	;
01000	
01100	;CALL IS:
01200	;	PUSHJ P,GETLOC
01300	;	JRST ERROR
01400	;MDPC,<	JRST CRLF.ONLY >
01500	;	JRST GOT.CONNECTOR.IN.TT
01600	;	(DIP LOC IN TT)
01700	
01800	^LOCAU1:
01900	;SHOULD PRINT A CUE MESAGE HERE
02000	^AU1L2:
02100		MOVSI NUMREG,400000
02200		IORM NUMREG,(P)		;sleazy hack to find spare flag
02300					; bit on top of stack
02400					; set flag that we haven't seen a "J"
02500		GETCH
02600	
02700	MDPC,<	CAIN CHRREG,12
02800		JRST CPOPJ1
02900	>;MDPC
03000		CAIN CHRREG,"J"
03100		JRST [	ANDCAM NUMREG,(P)	; clear flag in LHS of top of stack temp
03200						; we know now we have seen a "J"
03300			GETCH
03400			JRST GTLOC3 ]
03500	RETJP4:
03600	GTLOC3:	
03700	
03800		CAIL CHRREG,"A"
03900		CAILE CHRREG,"Z"
04000		POPJ P,
04100		SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
04200		POPJ P,				; unless illegal or missing!
04300		GETCH
04400	
04500		CAIL CHRREG,"A"
04600		CAILE CHRREG,"Z"
04700		JRST	GETCON
04800		SKIPN CHRREG,L2N-"A"(CHRREG)
04900		POPJ P,
05000		LSH TT,6
05100		TRO TT,(CHRREG)
05200		HRLM TT,(P)
05300		GETNUM
05400		JUMPLE NUMREG,CPOPJ
05500		CAILE NUMREG,=99
05600		POPJ P,
05700		HLRZ TT,(P)
05800		LSH TT,6
05900		TRO TT,(NUMREG)
06000	MDPC,<	AOS (P) >
06100		JRST CPOPJ2
06200	;	Encoding of LL#
06300	;;	----------------------------------------
06400	;	|               |   6  |   6   |   6   |
06500	;	|               |   L  |   L   |   #   |
06600	;;	----------------------------------------
06700	
06800	GETCON:
06900	GCNXIT:	LSH TT,6
07000		IOR	TT,L2N+"J"-"A"
07100		LSH TT,6
07200	MDPC,<	AOS (P) >
07300		JRST CPOPJ1
07400	;	Encoding of L (of L-#)
07500	;;	----------------------------------------
07600	;	|               |   6  |   6   |   6   |
07700	;	|               |   L  |  "J"  |   0   |
07800	;;	----------------------------------------
07900	BEND LOCAU1
     	00100	SUBTTL  GETLOC [AUGU6] -----
00200	;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
00300	; for AUGU6 boards
00400	; 	valid syntax is:
00500	;	Bay/Rack/Slot:	#L#
00600	;	Connector pin: L#-#
00700	;	Body location: LL#
00800	
00900	;CALL IS:
01000	;	PUSHJ P,GETLOC
01100	;	JRST ERROR
01200	;MDPC,<	JRST CRLF.ONLY >
01300	;	JRST GOT.CONNECTOR.IN.TT
01400	;	(DIP LOC IN TT)
01500	
01600	BEGIN LOCAU6
01700	^LOCAU6:
01800	;SHOULD PRINT A CUE MESAGE HERE
01900	^AU6L2:
02000		MOVSI NUMREG,400000
02100		IORM NUMREG,(P)		;sleazy hack to find spare flag
02200					; bit on top of stack
02300					; set flag that we haven't seen a "J"
02400		GETCH
02500	
02600	MDPC,<	CAIN CHRREG,12
02700		JRST CPOPJ1
02800	>;MDPC
02900		CAIN CHRREG,"J"
03000		JRST [	ANDCAM NUMREG,(P)	; clear flag in LHS of top of stack temp
03100						; we know now we have seen a "J"
03200			GETCH
03300			JRST GTLOC3 ]
03400	GTLOC3:	
03500		CAIL CHRREG,"A"
03600		CAILE CHRREG,"Z"
03700		POPJ P,
03800		SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
03900		POPJ P,				; unless illegal or missing!
04000		PUSH P,TT
04100		GETNUM
04200		POP P,TT
04300		JUMPN NUMREG,GETCON
04400		SKIPL (P)
04500		POPJ P,
04600		CAIL CHRREG,"A"
04700		CAILE CHRREG,"Z"
04800		POPJ	P,
04900		SKIPN CHRREG,L2N-"A"(CHRREG)
05000		POPJ P,
05100		LSH TT,6
05200		TRO TT,(CHRREG)
05300		HRLM TT,(P)
05400		GETNUM
05500		JUMPLE NUMREG,CPOPJ
05600		CAILE NUMREG,=99
05700		POPJ P,
05800		HLRZ TT,(P)
05900		LSH TT,6
06000		TRO TT,(NUMREG)
06100	MDPC,<	AOS (P) >
06200		JRST CPOPJ2
06300	;	Encoding of LL#
06400	;;	----------------------------------------
06500	;	|               |   6  |   6   |   6   |
06600	;	|               |   L  |   L   |   #   |
06700	;;	----------------------------------------
06800	
06900	GETCON:
07000	JP7U6:
07100		CAILE NUMREG,2
07200		POPJ P,
07300		LSH TT,1
07400		ADDI TT,-1(NUMREG)
07500	GCNXIT:	LSH TT,6
07600		IOR	TT,L2N+"J"-"A"
07700		LSH TT,6
07800	MDPC,<	AOS (P) >
07900		JRST CPOPJ1
08000	;	Encoding of connector L# for #=1 or #=2
08100	;;	-------------------------------------------
08200	;	|               |   6     |   6   |   6   |
08300	;	|               |L*2+(#-1)|  "J"  |   0   |
08400	;;	-------------------------------------------
08500	BEND LOCAU6
     	00100	SUBTTL GETLOC [AUGDBL]
00200	;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
00300	; for AUGDBL boards
00400	;	Valid syntax is:
00500	;	Bay/rack/slot:  #L#
00600	;	Connector pin:  *J#-# or *LL#
00700	;	Body location:	L#
00800	
00900	;	The scan point is left at:
01000	;	J#-#
01100	;	  ^
01200	;	*LL#
01300	;	  ^
01400	
01500	
01600	;CALL IS:
01700	;	PUSHJ P,GETLOC
01800	;	JRST ERROR
01900	;MDPC,<	JRST CRLF.ONLY >
02000	;	JRST GOT.CONNECTOR.IN.TT
02100	;	(DIP LOC IN TT)
02200	
02300	BEGIN LOCAUD
02400	^LOCAUD:
02500	;	should print a cue message here
02600	^ADBL2:
02700	
02800		GETCH				; read a letter
02900		
03000	MDPC,<
03100		CAIN	CHRREG,12		; LF?
03200		JRST	CPOPJ1			; yes, skip-return
03300	>;MDPC
03400		CAIN	CHRREG,"*"		; jack id or  dec paddle flag?
03500		JRST	GDECCN			; yes, go process it
03600		CAIL	CHRREG,"A"		; valid letter?
03700		CAILE	CHRREG,"Z"		; ...
03800		POPJ	P,			; nope!
03900		SKIPN	TT,L2N-"A"(CHRREG)	; convert to integer
04000						; TT now has integer encoding
04100		POPJ	P,			; unless it was bogus
04200	
04300		PUSH	P,TT			; save TT
04400		GETNUM				; read a number
04500		POP	P,TT			; restore TT
04600		JUMPLE	NUMREG,CPOPJ		; illegal---must be
04700						; L#!
04800		CAILE	NUMREG,=99		; out of range?
04900		POPJ	P,			; yes, error
05000		LSH	TT,6			; move letter code left
05100		LSH	TT,6			; to correct position
05200		IOR	TT,NUMREG		; and or-in NUMREG
05300	
05400	;
05500	;	The encoding of L#:
05600	;;	----------------------------------------
05700	;	|               |   6  |   6   |   6   |
05800	;	|               |   L  |   0   |   #   |
05900	;;	----------------------------------------
06000		
06100	MDPC,<	AOS (P)  >	; for double-skip return
06200		JRST	CPOPJ2	; success
06300	GCNXIT:
06400		LSH	TT,6
06500		LSH	TT,6
06600	MDPC,<	AOS	(P)>
06700		JRST	CPOPJ1
06800	
06900	GDECCN:	GETCH
07000		CAIL CHRREG,"A"
07100		CAILE CHRREG,"Z"
07200		POPJ P,
07300		CAIN	CHRREG,"J"		; jack pin?
07400		JRST	GETCON			; yes
07500		SKIPN TT,L2N-"A"(CHRREG)
07600		POPJ P,
07700		GETCH
07800		JRST GCNXIT
07900	;	Jack encoding for DEC paddle designated by "L"
08000	;;	----------------------------------------
08100	;	|               |  6   |       12      |
08200	;	|               |(L+32)|        0      |
08300	;;	----------------------------------------
08400	
08500	GETCON:	
08600		GETNUM				; read a number
08700		JUMPLE	NUMREG,CPOPJ	; if zero or negative, lose
08800	;	CAILE	NUMREG,2	; J1 or J2 only
08900	;	POPJ	P,		; otherwise lose
09000		MOVEI	TT,-1(NUMREG)	; store zero-based
09050		TRO	TT,40		; TURN ON HIGH ORDER BIT
09100		JRST	GCNXIT
09200	;	Encoding of a connector pin (J1 or J2)
09300	;;	----------------------------------------
09400	;	|               |1| 5  |       12      |
09500	;	|               |1|0or1|        0      |
09600	;;	----------------------------------------
09700	
09800	BEND LOCAUD
     	00100	SUBTTL GETLOC [AUGCMU] -----
00200	;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
00300	; for AUGCMU boards
00400	
00500	;CALL IS:
00600	;	PUSHJ P,GETLOC
00700	;	JRST ERROR
00800	;MDPC,<	JRST CRLF.ONLY >
00900	;	JRST GOT.CONNECTOR.IN.TT
01000	;	(DIP LOC IN TT)
01100	
01200	BEGIN LOCAUC
01300	^LOCAUC:
01400	;SHOULD PRINT A CUE MESAGE HERE
01500	^ACML2:
01600		MOVSI NUMREG,400000
01700		IORM NUMREG,(P)		;sleazy hack to find spare flag
01800					; bit on top of stack
01900					; set flag that we haven't seen a "J"
02000		GETCH
02100	
02200	MDPC,<	CAIN CHRREG,12
02300		JRST CPOPJ1
02400	>;MDPC
02500		CAIN CHRREG,"J"
02600		JRST [	ANDCAM NUMREG,(P)	; clear flag in LHS of top of stack temp
02700						; we know now we have seen a "J"
02800			GETCH
02900			JRST GTLOC3 ]
03000	GTLOC3:	
03100		CAIL CHRREG,"A"
03200		CAILE CHRREG,"Z"
03300		POPJ P,
03400		SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
03500		POPJ P,				; unless illegal or missing!
03600		PUSH P,TT
03700		GETNUM
03800		POP P,TT
03900		JUMPN NUMREG,GETCON
04000		SKIPL (P)
04100		POPJ P,
04200		CAIL CHRREG,"A"
04300		CAILE CHRREG,"Z"
04400		POPJ	P,
04500		SKIPN CHRREG,L2N-"A"(CHRREG)
04600		POPJ P,
04700		LSH TT,6
04800		TRO TT,(CHRREG)
04900		HRLM TT,(P)
05000		GETNUM
05100		JUMPLE NUMREG,CPOPJ
05200		CAILE NUMREG,=99
05300		POPJ P,
05400		HLRZ TT,(P)
05500		LSH TT,6
05600		TRO TT,(NUMREG)
05700	MDPC,<	AOS (P) >
05800		JRST CPOPJ2
05900	
06000	GETCON:
06100		CAILE NUMREG,2
06200		POPJ P,
06300		LSH TT,1
06400		ADDI TT,-1(NUMREG)
06500	GCNXIT:	LSH TT,6
06600		IOR	TT,L2N+"J"-"A"
06700		LSH TT,6
06800	MDPC,<	AOS (P) >
06900		JRST CPOPJ1
07000	BEND LOCAUC
     	00100	;GTSLTL -- READS A BAY/RACK/SLOT/DIPLOC OR JUST A DIPLOC
00200	
00300	;CALL IS:
00400	;	PUSHJ P,GTSLTL
00500	;	JRST ERROR
00600	;	JRST CRLF.ONLY
00700	;MD,<	JFCL	>	;LOC ONLY
00800	;	(BRS,,LOC IN DESTIN)
00900	;		MD,< NOTE: REGISTER D CLOBBERED >
01000	
01100	MDPC,<
01200	
01300	GTSLTL:
01400		SETZM DESTIN
01500	;;;	CHKCUE
01600		PUSHJ P,@JMP3		; board-dependent
01700		POPJ P,
01800		JRST CPOPJ1
01900		POPJ P,
02000		HRRZM TT,DESTIN
02100		JRST CPOPJ2
02200	>;MDPC
     	00100	;GTCONP -- LIKE GTSLTL BUT FOR CONNECTOR PINS.
00200	
00300	;CALL IS LIKE GTSLTL EXCEPT:
00400	;LAY,<	CPOPJ1 RETURN MAY BE TAKEN ON TEXIST CHAR ALSO >
00500	
00600	MD,<
00700	GTCONP:
00800		SETZM DESTIN
00900	;;;	CHKCUE
01000		PUSHJ P,@JMP3		; board-dependent
01100		POPJ P,			; error
01200		JRST CPOPJ1		; CRLF only
01300		JRST @JMP9		; connector: board-dependent code
01400		JRST @JMP0		; dip loc: board-dependent code
01500	;
01600	;	The scanner is left pointing to the "-" if this is
01700	;	a valid connector pin for any of the boards listed below
01800	;
01900	JP9U1:
02000	JP9U6:
02100	JP9CMU:
02300		CAIE CHRREG,"-"
02400		POPJ	P,		; not "-", error
02500		JRST	RETJP0		; otherwise go on
02600	
02700	; For dip locations on the boards below, we just return
02800	JP0U1:
02900	JP0U6:
03000	JP0CMU:
03100	JP0DBL:
03200		POPJ P,
03300	; Further processing on the connector name for Hex boards:
03400	JP9HEX:
03450	JP9DBL:
03500		JRST [	TRNN TT,400000
03600			JRST [	CAIL CHRREG,"A"
03700				CAILE CHRREG,"Z"
03800				POPJ P,
03900				SKIPN CHRREG,L2N-"A"(CHRREG)
04000				POPJ P,
04100				LSH CHRREG,=6
04200				IORI TT,(CHRREG)
04300				JRST GTCNP2 ]
04400			CAIE CHRREG,"-"
04500			POPJ P,
04600			JRST GTCNP2 ]
04700	JP0HEX:
04800		JRST [	HRRZM TT,DESTIN
04900			JRST CPOPJ2 ]
05000	RETJP0:
05100	GTCNP2:	HRRZM TT,DESTIN
05200		GETNUM
05300		CAILE T,77
05400		POPJ P,
05500		IORM T,DESTIN
05600		JRST CPOPJ2
05700	
05800	>;MD
     	00100	CSLTLD:
00200		OUTSTR	[ASCIZ /You should not be able to get here.  CSLTLD: In AUG4.FAI
00300	/]
00400		JRST ERRET
00500	PADPRT:
00600		OUTSTR	[ASCIZ /Not implemented..  PADPRT: In AUG4.FAI
00700	/]
00800		JRST ERRET
00900	RAYDIP:
01000	RAYCON:
01100		OUTSTR	[ASCIZ /Not implemented.. RAYDIP: or RAYCON: IN AUG4.FAI
01200	/]
01300		JRST ERRET
     	00100	MWL,<
00200	^CITYBL:	0		;DIAGONAL INITIALLY!
00300	
00400	^DOCITY:
00500			SETOM CITYBL
00600			POPJ P,
00700	^NOCITY:
00800			SETZM CITYBL
00900			POPJ P,
     	00100	SUBTTL	CARD DEF -- AUGAT 8136-LG498-49
00200	BEGIN AUGHEX
00300	^^WAUHEX:	-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
00400		JRST 	CPOPJ;WWINITialization (CPOPJ=POPJ P,)
00500		JRST MAPRC
00600		JRST MAPPAD
00700		JRST PINMAP
00800		JRST PINBIT
00900		JRST VGCON
01000		JRST DSTCLC
01100		JRST FPWR
01200		JRST FGND
01300		JRST PGPRTM
01400		JRST PGPRNT
01500		JRST GNDCLR
01600		JRST WAGGND
01700		JRST GNDOUT
01800		JRST VCCOUT
01900		JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
02000		JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
02100		0		;NROWS	;YOU CANT DO A UML YET !!
02200		0		;NCOLS
02300		0		;NCLPRG
02400		0		;DIPSLT
02500		0		;NPADS
02600		XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
02700		XWD -0,1	;PADPIN	;# OF PINS PER PIN LETTER
02800		=4	;FRACTN	;FRACTION OF INCHES RESOLUTION
02900		=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
03000		0		;POSTMG	;BARE WIRE AROUND PIN
03100	CHECK WAUHEX,WTVLEN
     	00100	BARELN:	0		;DO NOT INCLUDE BARE WIRE LENGTHS
00200	
00300	MAPRC:	TDNE T,[777700,,770000]
00400		POPJ P,
00500		HALT .+1
00600		JRST CPOPJ1
00700	
00800	MAPPAD:			;MAP NUMBERS IN T,TT,TTT INTO EDGE PIN NAME (T).
00900		LSH T,14
01000		LSH TT,6
01100		IOR T,TT
01200		IOR T,TTT
01300		POPJ P,
01400	
01500	
01600	;PIN SPECIFICATION IN A
01700	;SIGN BIT (MAPCON) ON IN A MEANS CONNECTOR
01800	;# OF PINS ON THIS DIP IN B
01900	;RETURNS X,Y IN T, BITS IN LEFT HALF TT
02000	
02100	PINMAP:PUSHJ P,MAPIT
02200		JRST PINERR
02300		JRST CPOPJ1
02400	
02500	;JUST BITS INTO TT, ERROR RETURNS 0 BITS
02600	PINBIT:PUSHJ P,MAPIT
02700		SETZ TT,
02800		POPJ P,
02900	
03000	PINERR:	PUSH P,PUTCHR
03100		MOVE T,[OUTCHR TTT]
03200		MOVEM T,PUTCHR
03300		PUSHJ P,PGPRNT
03400		POP P,PUTCHR
03500		OUTSTR [ASCIZ/ Mapping error!
03600	/]
03700		POPJ P,
     	00100	MAPIT:	PUSH P,A
00200		JUMPL A,CONMAP		;IS IT A CONNECTOR PIN?
00300		PUSHJ P,ABSPIN
00400		LDB TT,[POINT 6,A,23]	;GET GROUP LETTER
00500		LDB T,[POINT 6,A,29]	;GET COLUMN LETER
00600		CAIG TT,3
00700		CAMN T,L2N-"A"+"Q"
00800		JRST MAPERR
00900		SOJL T,MAPERR
01000		CAML T,(TT)[	400000,,0
01100				L2N-"A"+"S"
01200				L2N-"A"+"T"
01300				L2N-"A"+"S" ]
01400		JRST MAPERR
01500		CAML T,L2N-"A"+"Q"
01600		SUBI T,1
01700		IMULI T,=300		;.3" SPACING BETWEEN COLUMNS
01800		ADD T,(TT)[	=300
01900				=4800+=300
02000				=10200+=300
02100			]-1
02200		LDB TT,[POINT 6,A,35]	;GET ROW NUMBER
02300		CAIGE T,=600+=300	;COLUMNS AA THROUGH AF?
02400		CAIL TT,=13		;yes, rows 1-12 do not exist
02500		CAILE TT,=62
02600		JRST MAPERR
02700		SOJL TT,MAPERR
02800		IMULI TT,=100		;.1" VERTICAL PIN SPACING
02900		HRLI T,=700(TT)		;ORIGIN SUCH THAT AA01 IS AT 700,,300
03000		TLNE A,MAPPWR!MAPGND	;IS THIS A VCC OR GND PIN?
03100		JRST PINPGP		;YES
03200		SETZ TT,		;NO AUTO GND OR PWR
03300	MAPDON:	AOS -1(P)
03400	MAPERR:	POP P,A
03500		POPJ P,
     	00100	CONMAP:	LDB T,[POINT 6,A,23]
00200		TRZN T,40		;IS IT A DEC PADDLE?
00300		JRST DECCON		;YES
00400		CAILE T,=10
00500		JRST MAPERR
00600		JUMPE T,MAPERR
00700		LDB TT,[POINT 12,A,35]	;GET PIN #
00800		SOJL TT,MAPERR
00900		IDIVI TT,=13
01000		SOJG TT,MAPERR
01100		CAIG T,4
01200		JRST [	IMULI T,=400
01300			TDZE TT,TT
01400			SUBI T,=100
01500			IMUL TTT,[-=100]
01600			HRLI T,=800+=700(TTT)
01700			JRST MAPDON ]
01800		IMULI TTT,=100
01900		TDZN TT,TT
02000		HRLI TTT,=100
02100		MOVE T,[	0,,=2700+=300
02200				=400,,=2700+=300
02300				0,,=6000+=300
02400				=400,,=6000+=300
02500				0,,=11100+=300
02600				=400,,=11100+=300
02700			]-5(T)
02800	CMAPDN:	ADD T,TTT
02900		JRST MAPDON
     	00100	DECCON:	LDB TTT,[POINT 6,A,29]	;GET PADDLE LETTER
00200		CAIG T,6
00300		CAMLE TTT,L2N-"A"+"V"
00400		JRST MAPERR
00500		SOJL T,MAPERR
00600		CAME TTT,L2N-"A"+"Q"
00700		CAMN TTT,L2N-"A"+"G"
00800		JRST MAPERR
00900		CAME TTT,L2N-"A"+"R"		;THERE IS A GAP BETWEEN FINGERS S AND T
01000		CAMN TTT,L2N-"A"+"S"		;AND THERE IS NO FINGER Q
01100		SUBI TTT,1
01200		CAML TTT,L2N-"A"+"D"		;THERE IS A GAP BETWEEN FINGERS C AND D
01300		CAMLE TTT,L2N-"A"+"G"	;AND THERE IS NO FINGER G
01400		SOJL TTT,MAPERR
01500		IMULI TTT,=100
01600		LDB TT,[POINT 6,A,35]
01700		SOJL TT,MAPERR
01800		SOJG TT,MAPERR
01900		TDZE TT,TT
02000		HRLI TTT,=200
02100		CAIN TTT,0		;FINGER A2?
02200		TLO TT,PWR		;YES, IT IS Vcc
02300		CAIE TTT,=200		;FINGER C2
02400		CAMN TTT,[=200,,=1700]	;OR T1?
02500		TLO TT,GND		;YES, IT IS GND
02600		MOVE T,(T)[	=6500+=700,,0
02700				=6500+=700,,=2700
02800				=6500+=700,,=5300
02900				=6500+=700,,=8000
03000				=6500+=700,,=10500
03100				=6500+=700,,=13300 ]
03200		JRST CMAPDN
03300	
03400	PINPGP:	TLNN A,MAPPWR		;POWER?
03500		SKIPA TT,[GND,,0]
03600		MOVSI TT,PWR
03700		ADDI T,=100		;OVER .1"
03800		JRST MAPDON
03900	
04000	VGCON:	POPJ P,	;FOR NOW
     	00100	ABSPIN:
00200		JUMPL A,CPOPJ		;DON'T TOUCH CONNECTOR PINS
00300		LDB TT,[POINT 6,A,17]	;GET THE PIN NUMBER
00400		TLZ A,77
00500		SOJLE TT,CPOPJ		;NORMALIZE, GET OUT IF ALREADY ABSOLUTE
00600		LDB T,[POINT 6,A,29]	;GET COLUMN LETTER
00700		ASH TT,1		;DOUBLE PIN NUMBER
00800		CAIGE TT,(B)		;FIRST SIDE?
00900		JRST SIDEOK		;YES
01000		CAML T,L2N-"A"+"Q"		;THERE IS NO Q COLUMN
01100		SUBI T,1
01200		CAIL B,=23		;DIP HAVE 23 OR MORE PINS?
01300		SUBI T,1		;YES, OVER ONE EXTRA
01400		SOJG T,GRPOK
01500		ADDI T,=16		;FUDGE OVER TO NEXT GROUP
01600		HRRI A,-1B23(A)
01700		TRNN A,1B23		;DID WE MOVE INTO GROUP B??
01800		ADDI T,2		;YES, IT IS WIDER THAN THE REST
01900	GRPOK:	CAML T,L2N-"A"+"Q"		;ADD Q COLUMN BACK IN
02000		ADDI T,1
02100		DPB T,[POINT 6,A,29]
02200		SUBM B,TT		;GET CORRECT PIN #
02300		ADDI TT,-2(B)
02400	SIDEOK:	ASH TT,-1
02500		ADDI A,(TT)
02600		POPJ P,
     	00100	;FIND POWER AND GROUND PINS
00200	FPWR:
00300		PUSHJ P,ABSPIN	;FIND THE ABSOLUTE PIN NUMBER ON THE BOARD
00400		AOJL A,FPWRC	;JUMP IF IT IS A DEC EDGE CONECTOR OR SCOTCH FLEX JACK
00500		TRZ A,7		;ROUND TO NEAREST MULTIPLE OF 8+2 IN ODD COLUMN
00600	;;;	ADDI A,2	;This ADDI is distributed in the next two SUBI's
00700		TRNN A,2000	;COLUMN R, S, or T?
00800		SUBI A,100-2	;if yes the ADDI A,100 and SUBI A,100 would cancel
00900		TRO A,100
01000		TRNE A,2000	;COLUMN R, S, or T?
01100		SUBI A,100-2	;yes, fudge back
01200		TLO A,MAPPWR
01300		TRNE A,767060	;did we get AA10,AB10,AC10,AD10,AE10, or AF10?
01400		POPJ P,		;Certainly not
01500		TRC A,700
01600		TRCE A,700	;Watch out for AG10, which is OK
01700		ADDI A,=8	;yes, change to pin 18, since pin 10 does not exist
01800		POPJ P,
01900	FGND:
02000		PUSHJ P,ABSPIN	;FIND THE ABSOLUTE PIN NUMBER ON THE BOARD
02100		AOJL A,FGNDC	;JUMP IF IT IS AN DEC EDGE CONECTOR OR SCOTCH FLEX JACK
02200		TRZ A,7		;ROUND TO NEAREST MULTIPLE OF 8+2 IN ODD COLUMN
02300	;;;	ADDI A,2	;This ADDI is distributed in the next two SUBI's
02400		TRNN A,2000	;COLUMN R, S, or T?
02500		SUBI A,100-2	;if yes the ADDI A,100 and SUBI A,100 would cancel
02600		TRO A,100
02700		TRNE A,2000	;COLUMN R, S, or T?
02800		SUBI A,100-2	;yes, fudge back
02900	
03000		ADDI A,4
03100			TLO A,MAPGND
03200			POPJ P,
     	00100	IFN 0,<;The following code hooks all GND and MAINV voltages together
00200	;in a given jack, but doesn't connect them to anything!!!!!!!
00300	>;IFN 0
00400	;SCOTCH FLEX CONNECTORS POWER AND GROUND'S ARE TREATED LIKE ANY
00500	;OTHER POWER OR GROUND.
00600	;DEC paddles are wired to the appropriate power/gnd fingers, however.
00700	
00800	FPWRC:	TLNE A,40B23		;DEC PADDLE?
00900		JRST FPWRSF		;(SCOTCH FLEX)
01000		TRZ A,7777		;(DEC EDGE CONNECTOR)
01100		LSH A,-6
01200		IOR A,L2N-"A"+"A"
01300		LSH A,6
01400		IOR A,[MAPPWR,,2]
01500		POPJ P,
01600	FGNDC:	TLNE A,40B23		;DEC PADDLE?
01700		JRST FGNDSF		;(SCOTCH FLEX)
01800		LDB T,[POINT 6,A,29]
01900		TRZ A,7777
02000		CAMG T,L2N-"A"+"K"	;WHICH IS THE CLOSER GND -T1 OR -C2
02100		JRST MAPC2		;-C2 IS CLOSER
02200		LSH A,-6		;-T1 IS CLOSER
02300		IOR A,L2N-"A"+"T"
02400		LSH A,6
02500		IOR A,[MAPGND,,1]
02600		POPJ P,
02700	MAPC2:	LSH A,-6
02800		IOR A,L2N-"A"+"C"
02900		LSH A,6
03000		IOR A,[MAPGND,,2]
03100		POPJ P,
03200	
03300	FPWRSF:	LDB A,[POINT 4,A,23]	;GET JUST THE JACK NUMBER
03400		MOVE A,FPWRST(A)	;TABLE LOOK UP THE APPROPRIATE BOARD PIN
03500		POPJ P,
03600	
03700	FGNDSF:	LDB A,[POINT 4,A,23]	;GET JUST THE JACK NUMBER
03800		MOVE A,FGNDST(A)	;TABLE LOOK UP THE APPROPRIATE BOARD PIN
03900		POPJ P,
04000	
04100	FPWRST:	0,,0	;NO 0 JACK	;TABLE FOR FINDING SCOTCH FLEX'S A BOARD PWR
04200		MAPPWR,,010120		;J1 _ AA18-V
04300		MAPPWR,,010320		;J2 _ AC18-V
04400		MAPPWR,,010520		;J3 _ AE18-V
04500		MAPPWR,,010702		;J4 _ AG02-V
04600		MAPPWR,,011302		;J5 _ AL02-V
04700		MAPPWR,,011502		;J6 _ AL02-V
04800		MAPPWR,,020702		;J7 _ BG02-V
04900		MAPPWR,,021102		;J8 _ BJ02-V
05000		MAPPWR,,030502		;J9 _ CE02-V
05100		MAPPWR,,030702		;J10 _ CG02-V
05200	
05300	FGNDST:	0,,0	;NO 0 JACK	;TABLE FOR FINDING SCOTCH FLEX'S A BOARD GND
05400		MAPGND,,010116		;J1 _ AA14-G
05500		MAPGND,,010316		;J2 _ AC14-G
05600		MAPGND,,010516		;J3 _ AE14-G
05700		MAPGND,,010706		;J4 _ AG06-G
05800		MAPGND,,011306		;J5 _ AL06-G
05900		MAPGND,,011506		;J6 _ AN06-G
06000		MAPGND,,020706		;J7 _ BG06-G
06100		MAPGND,,021106		;J8 _ BJ06-G
06200		MAPGND,,030506		;J9 _ CE06-G
06300		MAPGND,,030706		;J10 _ CG06-G
     	00100	PGPRNT:
00200		PUSH P,A
00300		JUMPL A,PGCPNT
00400		TLNE A,MAPPWR!MAPGND
00500		JRST PGPRPG
00600		PUSHJ P,LOCPIN
00700		POP P,A
00800		POPJ P,
00900	
01000	PGPRTM:
01100		PUSH P,A
01200		JUMPL A,PGCPNT
01300		TLNE A,MAPPWR!MAPGND
01400		JRST PGPRPG
01500		PUSHJ P,LOCPNM
01600		POP P,A
01700		POPJ P,
01800	
01900	PGPRPG:	PUSHJ P,LOCOUT
02000		POP P,A
02100		PUTBYT "-"
02200		TLNE A,MAPPWR
02300		PUTBYT "V"
02400		TLNE A,MAPGND
02500		PUTBYT "G"
02600		POPJ P,
02700	
02800	PGCPNT:	HRLI A,(A)
02900		TLZ A,MAPCON
03000		TRZ A,7777
03100		PUSHJ P,LOCPNC
03200		POP P,A
03300		POPJ P,
03400	
     	00100	SUBTTL	DISTANCE CALCULATOR FOR ROUTER STUFF
00200	;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G
00300	
00400	
00500	DSTCLC:
00600	NRMLDST:
00700		PUSHJ P,PINMAP		;MAP ONE OF THEM
00800		JRST DSTERR
00900		MOVE A,C		;GET OTHER POINT
01000		MOVE B,D
01100		MOVE C,T		;SAVE X,Y
01200		PUSHJ P,PINMAP
01300		JRST DSTERR
01400		HLRE TT,T
01500		HLRE TTT,C
01600		SUB TT,TTT		;GET VERTICAL DISTANCE
01700		HRRE T,T
01800		HRRE C,C
01900		SUB T,C			;HORIZONTAL DISTANCE
02000		SKIPGE CITYBL		;CITY BLOCK WIRING?
02100		JRST [	MOVM T,T	;YES, GET ABSOLUTE VALUES
02200			MOVM TT,TT
02300			ADD T,TT
02400			JRST GOTDST ]
02500		IMUL TT,TT		;SQUARE VERTICAL DISTANCE
02600		IMUL T,T		;SQUARE HORIZONTAL DISTANCE
02700		ADD T,TT
02800		JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGTH RUNS
02900		PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
03000	GOTDST:	CAILE T,=8000		;LONGER THAN 8 INCHES?
03100		ADDI T,=250		;YES, ADD 1/4 INCH
03200		ADD T,BARELN		;ADD THE BARE WIRE AT EACH END, IF WANTED
03300		ADD T,WRAPMG		;ADD SOME INSULATION TO GO AROUND THE PINS
03400		IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
03500		IDIVI T,=1000		; "		"		"
03600		SKIPE TT		;REMAINDER?
03700		ADDI T,1		;YES, ROUND UP
03800	DSTIS0:	MOVE G,T
03900		POPJ P,
04000	
04100	DSTERR:	SETZ G,
04200		POPJ P,
04300	
     	00100	GNDCLR:OUTSTR[ASCIZ/24 pin dips not yet implemented!
00200	/]
00300		POPJ P,
00400	
00500	WAGGND:
00600	GNDOUT:
00700	VCCOUT:
00800		OUTSTR[ASCIZ/Not supported for universal Augat boards!!
00900	/]
01000		POPJ P,
01100	
01200	LOCPNM:		;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
01300		PUSH P,T
01400		PUSHJ P,ABSPIN
01500		PUSHJ P,LOCOUT
01600		POP P,T
01700		POPJ P,
     	00100	BEND AUGHEX
     	00100	BEGIN AUGAT
00200		STORAGE(LOW)
00300	CONMAP:	0	;USED IN BOARD INITIALIZATION FOR AUGU1 , AUGU6 AND AUGCMU
00400		STORAGE(PURE)
00500	SUBTTL	CARD DEF -- AUGAT 8136-U1
00600	BEGIN AUGU1
00700	^^WAUGU1:
00800		-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
00900		JRST WWINIT	;WWINITialization
01000		JRST MAPRC
01100		JRST MAPPAD
01200		JRST PINMAP
01300		JRST PINBIT
01400		JRST VGCON
01500		JRST DSTCLC
01600		JRST FPWR
01700		JRST FGND
01800		JRST PGPRTM
01900		JRST PGPRNT
02000		JRST GNDCLR
02100		JRST WAGGND
02200		JRST GNDOUT
02300		JRST VCCOUT
02400		JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
02500		JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
02600		0		;NROWS	;YOU CANT DO A UML YET !!
02700		0		;NCOLS
02800		0		;NCLPRG
02900		0		;DIPSLT
03000		6		;NPADS=JACKS PER GROUP(=1)*NUMBER OF GROUPS(=6)
03100		XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
03200		XWD -=46,1	;PADPIN	;# OF PINS PER PIN LETTER
03300		=4		;FRACTN	;FRACTION OF INCHES RESOLUTION
03400		=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
03500		0		;POSTMG	;BARE WIRE AROUND PIN
03600	CHECK WAUGU1,WTVLEN
03700	
03800	WWINIT:	MOVE T,[JRST CONMP]
03900		MOVEM T,CONMAP
04000		POPJ P,
04100	
04200	CONMP:	
04300	; [JN11] I have a suspicion that the interface changed
04400	;	 and this code was never updated to follow it!
04500	;	 if you get Mapping Error! for connectors at this
04600	;	 point, try adding the instruction
04700	;	LDB T,[POINT 6,A,23]
04800	;	 and see if they go away.  I can't find anywhere where
04900	;	 T is properly loaded, but linear search of the entire
04950	;	 awful control structure of this module is probably
04975	;	 a waste of my time
04987		CAILE T,6		;ONLY 6 CONNECTERS ON THE BOARD
05000		JRST PINERR
05100		IMULI T,=2700		;2.7" BETWEEN SECTIONS (,JACKS)
05200		LDB TT,[POINT 6,A,35]	;GET PIN #
05300		SOJL TT,MAPERR
05400		IDIVI TT,=23	;E=HALF THE NUMBER OF PINS IN THE JACK
05500		SOJG TT,MAPERR
05600		TDZN TT,TT
05700		HRLI T,=300	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
05800		IMULI TTT,=100
05900		SUBI T,2414	;E=-<<<JPINS/2>-1>*100+JOFF2-=2700>(TTT)  WHERE
06000				;	JPINS=PINS IN A JACK= =46
06100				;	JOFF2=OFFSET OF JACK FROM COLUMN A= =0
06200		JRST MAPDON
06300	
     	00100	BEND AUGU1
     	00100	SUBTTL	CARD DEF -- AUGAT 8136-U6
00200	BEGIN AUGU6
00300	^^WAUGU6:
00400		-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
00500		JRST WWINIT	;WWINITialization
00600		JRST MAPRC
00700		JRST MAPPAD
00800		JRST PINMAP
00900		JRST PINBIT
01000		JRST VGCON
01100		JRST DSTCLC
01200		JRST FPWR
01300		JRST FGND
01400		JRST PGPRTM
01500		JRST PGPRNT
01600		JRST GNDCLR
01700		JRST WAGGND
01800		JRST GNDOUT
01900		JRST VCCOUT
02000		JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
02100		JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
02200		0		;NROWS	;YOU CANT DO A UML YET !!
02300		0		;NCOLS
02400		0		;NCLPRG
02500		0		;DIPSLT
02600		=12		;NPADS=JACKS PER GROUP(=2)*NUMBER OF GROUPS(=6)
02700		XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
02800		XWD -=26,1	;PADPIN	;# OF PINS PER PIN LETTER
02900		=4	;FRACTN	;FRACTION OF INCHES RESOLUTION
03000		=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
03100		0		;POSTMG	;BARE WIRE AROUND PIN
03200	CHECK WAUGU6,WTVLEN
03300	
03400	WWINIT:	MOVE T,[JRST CONMP]
03500		MOVEM T,CONMAP
03600		POPJ P,
03700	
03800	CONMP:	
03805	; [JN11] I have a suspicion that the interface changed
03810	;	 and this code was never updated to follow it!
03815	;	 if you get Mapping Error! for connectors at this
03820	;	 point, try adding the instruction
03825	;	LDB T,[POINT 6,A,23]
03830	;	 and see if they go away.  I can't find anywhere where
03835	;	 T is properly loaded, but linear search of the entire
03840	;	 awful control structure of this module is probably
03845	;	 a waste of my time
03850		LSH T,-1		;GET GROUP
03900		CAILE T,6		;ONLY 6 CONNECTERS ON THE BOARD
04000		JRST PINERR
04100		IMULI T,=2700		;2.7" BETWEEN SECTIONS (,JACKS)
04200		LDB TT,[POINT 6,A,35]	;GET PIN #
04300		SOJL TT,MAPERR
04400		IDIVI TT,=13	;E=HALF THE NUMBER OF PINS IN THE JACK
04500		SOJG TT,MAPERR
04600		TDZN TT,TT
04700		HRLI T,=100	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
04800		TRNE A,10000
04900		SUB T,[<-=300>,,<=2700/2>]
05000		IMULI TTT,=100
05100		SUBI T,4150(TTT)	;E=-<<<JPINS/2>-1>*100+JOFF2-=2700>  WHERE
05200					;	JPINS=PINS IN A JACK= =26
05300					;	JOFF2=OFFSET OF JACK FROM COLUMN A= =500
05400		JRST MAPDON
     	00100	BEND AUGU6
     	00100	SUBTTL  Card Def -- Augat 8136-UG157
00200	
00300	BEGIN AUGDBL
00400	^^WAUDBL:
00500		-1		; is a WW board
00600		JRST	WWINIT
00700		JRST	MAPRC
00800		JRST MAPPAD
00900		JRST PINMAP
01000		JRST PINBIT
01100		JRST VGCON
01200		JRST DSTCLC
01300		JRST FPWR
01400		JRST FGND
01500		JRST PGPRTM
01600		JRST PGPRNT
01700		JRST GNDCLR
01800		JRST WAGGND
01900		JRST GNDOUT
02000		JRST VCCOUT
02100		JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
02200		JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
02300		0		;NROWS	;YOU CANT DO A UML YET !!
02400		0		;NCOLS
02500		0		;NCLPRG
02600		0		;DIPSLT
02700		=2		;NPADS=JACKS PER GROUP(=1)*NUMBER OF GROUPS(=2)
02800		XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
02900		XWD -=26,1	;PADPIN	;# OF PINS PER PIN LETTER
03000		=4		;FRACTN	;FRACTION OF INCHES RESOLUTION
03100		=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
03200		0		;POSTMG	;BARE WIRE AROUND PIN
03300	CHECK WAUDBL,WTVLEN
03400	
03500	WWINIT:	MOVE T,[JRST CONMP]
03600		MOVEM T,CONMAP
03700		POPJ P,
03800	
03900	CONMP:	
03925	;	This LDB wasn't in any of the other code, but I
03937	;	believe it is the right thing [JN11]
03943		LDB	T,[POINT 6,A,23]
03950		LSH T,-=13		;Get group/2
04000		CAIL T,2		;ONLY 2 CONNECTERS ON THE BOARD
04100					; so only values/2 are 0,1
04200		JRST PINERR		; if other, lose big
04300		IMULI T,=2400		;2.4" BETWEEN SECTIONS (,JACKS)
04400		LDB TT,[POINT 6,A,35]	;GET PIN #
04500		SOJL TT,MAPERR		; normalize to 0, should not be 0 already
04600		IDIVI TT,=13	;E=HALF THE NUMBER OF PINS IN THE JACK
04700				; this is the multiplier for the inter-row
04800				; distance
04900		SOJG TT,MAPERR  ; it better be either 0 or 1 
05000				; pins [1..13] compute [0..12]/13 = 0
05100				; pins [14..26] compute [13..25]/13 = 1
05200		TDZN TT,TT	; hack --- clear TT, skip if already zero
05300					; same as
05400					; SKIPE  TT
05500					; next instr
05600					; SETZ	TT,
05700				; don't know why this was done at all!!! [JN11]
05800		HRLI T,=100	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
05900		IMULI TTT,=100	; TTT = TT+1, so this is the remainder
06000				; from the IDIVI above, computes the
06100				; horizontal distance in the jack
06200		ADDI	TTT,-=1200	; complement of distance
06300		ADDI	T,TTT		; add to basic jack offset
06400	;
06500	;	(0,0)
06600	;
06700	;		(200,700)
06800	;		13 ............. 1    13 ............. 1
06900	;		26 ............. 14   26 ............. 14
07000	;
07100	;
07200	;	A01 B01 C01
07300	;	(700,300)
07400	;
07500	;	Y -----@
07600	;
07700	;	X
07800	;	|
07900	;	v
08000	;
08100		JRST MAPDON
     	00003	;
00006	;	Input:
00009	;		A - encoded pin descriptor
00012	;
00015	;	Output:
00018	;		TT - "PWR",,0
00021	;		     "GND",,0
00024	;			 0,,0
00027	;
00030	;		T:	row,,column
00033	;			i.e.,
00036	;				X,,Y ---@
00039	;				|
00042	;				v
00045	;
00100	MAPIT:	PUSH	P,A		; save encoded value
00200		JUMPL	A,CONMAP	; connector pin?
00300		PUSHJ	P,ABSPIN	; no, fix it to absolute
00400		LDB	T,[POINT 6,A,23]	; get column letter
00500		CAMLE	T,L2N-"A"+"S"		; too big?
00600		JRST	MAPERR			; yes, no greater than "S"
00700		SOJL	T,MAPERR		; normalize to zero-base;
00800						; if already 0, error
00900		IMULI	T,=300			; .3" spacing between columns
01000		LDB	TT,[POINT 6,A,35]	; get pin #
01100		SOJL	TT,MAPERR		; if zero, error; else 0-based
01200		IMULI	TT,=100			; .1" between rows
01300	
01400	;	normalize to board origin @ 700,,300
01500		ADDI	T,=300
01600		HRLI	T,=700(TT)		; add & stor in LHS
01700		TLNE	A,MAPPWR!MAPGND		; power run of any sort?
01800		JRST	PINPGP			; yes, go handle it
01900		SETZ	TT,
02000		POP	P,A			; restore A
02100		JRST	CPOPJ1			; skipreturn OK
02200	MAPERR:	POP	P,A			; restore A
02300		POPJ	P,			; nonskip loses
     	00100	PINMAP:	PUSHJ	P,MAPIT
00200		JRST	PINERR
00300		JRST	CPOPJ1
00400	
00500	PINBIT:	PUSHJ	P,MAPIT
00600		SETZ	TT,
00700		POPJ	P,
00800	
00900	PINERR:	PUSH	P,PUTCHR
01000		MOVE	T,[OUTCHR TTT]
01100		MOVEM	T,PUTCHR
01200		PUSHJ	P,PGPRNT
01300		POP	P,PUTCHR
01400		OUTSTR	[ASCIZ / Mapping error!
01500	/]
01600		POPJ	P,
01700	LOCPNM:		;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
01800		PUSH P,T
01900		PUSHJ P,ABSPIN
02000		PUSHJ P,LOCOUT
02100		POP P,T
02200		POPJ P,
     	00100	; ABSPIN computes the absolute board position of an encoded pin
00200	;	Input conditions:
00300	;		A - encoded pin
00400	;		B - number of pins in this DIP boy
00500	;	Output conditions:
00600	;		A - encoded absolute pin position
00700	;			column letter will be updated
00800	;			pin # in LHS will be 0
00900	
01000	ABSPIN:	JUMPL	A,CPOPJ		; return if connector pin
01100		LDB	TT,[POINT 6,A,17]	; get the pin number from LHS
01200		TLZ	A,77			; and remove from input argument
01300		SOJLE	TT,CPOPJ		; normalize to 0-base
01400						; get out if it was already
01500						; in absolute format
01600		LDB	T,[POINT 6,A,23]	; Get column letter of "L#"
01700		
01800	; sleazy hack: pin is on LHS if it is gtr dip-pins/2 which is the
01900	;	       same as 2*pin gtr dip-pins
02000	
02100		ASH	TT,1			; 2*pin
02200		CAIGE	TT,(B)			; gtr dip-pins
02300		JRST	SIDEOK			; yes, use true pin #
02400	
02500	; otherwise compute new pin offset
02600	
02650		CAML	T,L2N-"A"+"Q"		; no row Q
02675		SUBI	T,1			; fake it
02700		CAIL	B,=23			; gtr 23 pins?
02800		ADDI	T,1			; yes, move over one more
02900		ADDI	T,1			; move to next column
02950		CAML	T,L2N-"A"+"Q"		; did we land in Q
02975		ADDI	T,1			; likewise, fake it out
03000		DPB	T,[POINT 6,A,23]	; put back new column position
03100		SUBM	B,TT			; get correct pin #
03200						; by computing dip-pins - 2*pin 
03300						; except "pin" is normalized,
03400						; so we compute - 2*(pin+1)
03500						; or - 2*pin - 2
03600		ADDI	TT,-2(B)		; ...
03700	SIDEOK:	ASH	TT,-1			; undo *2 from above
03800		ADDI	A,(TT)			; put back into encoded pin #
03900		POPJ	P,			; and we are done (whew!)
     	00100	SUBTTL	DISTANCE CALCULATOR FOR ROUTER STUFF
00200	;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G
00300	
00400	
00500	DSTCLC:
00600	NRMLDST:
00700		PUSHJ P,PINMAP		;MAP ONE OF THEM
00800		JRST DSTERR
00900		MOVE A,C		;GET OTHER POINT
01000		MOVE B,D
01100		MOVE C,T		;SAVE X,Y
01200		PUSHJ P,PINMAP
01300		JRST DSTERR
01400		HLRE TT,T
01500		HLRE TTT,C
01600		SUB TT,TTT		;GET VERTICAL DISTANCE
01700		HRRE T,T
01800		HRRE C,C
01900		SUB T,C			;HORIZONTAL DISTANCE
02000		SKIPGE CITYBL		;CITY BLOCK WIRING?
02100		JRST [	MOVM T,T	;YES, GET ABSOLUTE VALUES
02200			MOVM TT,TT
02300			ADD T,TT
02400			JRST GOTDST ]
02500		IMUL TT,TT		;SQUARE VERTICAL DISTANCE
02600		IMUL T,T		;SQUARE HORIZONTAL DISTANCE
02700		ADD T,TT
02800		JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGTH RUNS
02900		PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
03000	GOTDST:	CAILE T,=8000		;LONGER THAN 8 INCHES?
03100		ADDI T,=250		;YES, ADD 1/4 INCH
03200		ADD T,BARELN		;ADD THE BARE WIRE AT EACH END, IF WANTED
03300		ADD T,WRAPMG		;ADD SOME INSULATION TO GO AROUND THE PINS
03400		IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
03500		IDIVI T,=1000		; "		"		"
03600		SKIPE TT		;REMAINDER?
03700		ADDI T,1		;YES, ROUND UP
03800	DSTIS0:	MOVE G,T
03900		POPJ P,
04000	
04100	DSTERR:	SETZ G,
04200		POPJ P,
04300	
04400	GNDCLR:OUTSTR[ASCIZ/24 pin dips not yet implemented!
04500	/]
04600		POPJ P,
     	00100	;FIND POWER PINS
00200	
00300	FPWR:
00400		JUMPL A,FPWRC		; if connector pin, wire together
00500		PUSHJ P,ABSPIN		; find out where it is
00600		ADDI A,4
00700		TRZ A,10000!7		;Round to nearest multiple of 8 in even column
00750					; ("even" in 0-based co-ordinates)
00800		TRNN A,77		;PIN 0?
00900		TRO A,=8		;YES, GO TO PIN 8.
01000		TRNN A,770000		;WERE WE IN COLUMN A?
01100		TRO A,20000		;YES, GO TO COLUMN B.
01200		TLO A,MAPPWR		; set the flag in this descriptor
01300		POPJ P,
01400	
01500	;The following code hooks all MAINV voltages together
01600	;in a given jack, but doesn't connect them to anything!!!!!!!
01700	FPWRC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
01800		IOR A,[MAPPWR,,0]
01900		POPJ P,
02000	
02100	;FIND GROUND PINS
02200	
02300	FGND:
02400		JUMPL A,FGNDC
02500		PUSHJ P,ABSPIN
02600		ADDI A,4
02700		TRZ A,100!7		;ROUND TO NEAREST MULTIPLE OF 8 IN EVEN COLUMN
02800		TRNN A,77		;PIN 0?
02900		TRO A,=8		;YES, GO TO PIN 8.
03000		TRNN A,770000		;WERE WE IN COLUMN A?
03100		TRO A,20000		;YES, GO TO COLUMN B.
03200		SUBI A,4		; now, shift back to G pins
03300		TLO A,MAPGND		; set the GND flag in this descriptor
03400		POPJ P,
03500	
03600	;The following code hooks all GND voltages together
03700	;in a given jack, but doesn't connect them to anything!!!!!!!
03800	FGNDC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
03900		IOR A,[MAPGND,,0]
04000		POPJ P,
     	00100	PGPRNT:
00200		PUSH P,A
00300		JUMPL A,PGCPNT
00400		TLNE A,MAPPWR!MAPGND
00500		JRST PGPRPG
00600		PUSHJ P,LOCPIN
00700		POP P,A
00800		POPJ P,
00900	
01000	PGPRTM:
01100		PUSH P,A
01200		JUMPL A,PGCPNT
01300		TLNE A,MAPPWR!MAPGND
01400		JRST PGPRPG
01500		PUSHJ P,LOCPNM
01600		POP P,A
01700		POPJ P,
01800	
01900	PGPRPG:	PUSHJ P,LOCOUT
02000		POP P,A
02100		PUTBYT "-"
02200		TLNE A,MAPPWR
02300		PUTBYT "V"
02400		TLNE A,MAPGND
02500		PUTBYT "G"
02600		POPJ P,
02700	
02800	PGCPNT:	HRLI A,(A)
02900		TLZ A,MAPCON
03000		TRZ A,7777
03100		PUSHJ P,LOCPNC
03200		POP P,A
03300		POPJ P,
03400	
     	00100	BEND AUGDBL
     	00100	SUBTTL	CARD DEF -- AUGAT AX118-75-[G]
00200	BEGIN AUGCMU
00300	^^WAUCMU:
00400		-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
00500		JRST WWINIT	;WWINITialization
00600		JRST MAPRC
00700		JRST MAPPAD
00800		JRST PINMAP
00900		JRST PINBIT
01000		JRST VGCON
01100		JRST DSTCLC
01200		JRST FPWR
01300		JRST FGND
01400		JRST PGPRTM
01500		JRST PGPRNT
01600		JRST GNDCLR
01700		JRST WAGGND
01800		JRST GNDOUT
01900		JRST VCCOUT
02000		JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
02100		JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
02200		0		;NROWS	;YOU CANT DO A UML YET !!
02300		0		;NCOLS
02400		0		;NCLPRG
02500		0		;DIPSLT
02600		=12		;NPADS=JACKS PER GROUP(=2)*NUMBER OF GROUPS(=6)
02700		XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
02800		XWD -=34,1	;PADPIN	;# OF PINS PER PIN LETTER
02900		=4		;FRACTN	;FRACTION OF INCHES RESOLUTION
03000		=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
03100		0		;POSTMG	;BARE WIRE AROUND PIN
03200	CHECK WAUCMU,WTVLEN
03300	
03400	WWINIT:	MOVE T,[JRST CONMP]
03500		MOVEM T,CONMAP
03600		POPJ P,
03700	
03800	CONMP:	LSH T,-1		;GET GROUP
03900		CAILE T,6		;ONLY 6 CONNECTERS ON THE BOARD
04000		JRST PINERR
04100		IMULI T,=2700		;2.7" PER BETWEEN SECTIONS (,JACKS)
04200		LDB TT,[POINT 6,A,35]	;GET PIN #
04300		SOJL TT,MAPERR
04400		IDIVI TT,=17	;E=HALF THE NUMBER OF PINS IN THE JACK
04500		SOJG TT,MAPERR
04600		TDZN TT,TT
04700		HRLI T,=100	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
04800		TRNE A,10000
04900		SUB T,[<-=300>,,<=2700/2>]
05000		IMULI TTT,=100
05100		SUBI T,4440(TTT)	;E=-<<<JPINS/2>-1>*100+JOFF2-=2700>  WHERE
05200					;	JPINS=PINS IN A JACK= =34
05300					;	JOFF2=OFFSET OF JACK FROM COLUMN A= =300
05400		JRST MAPDON
     	00100	BEND AUGCMU
00200	
00300	BARELN:	0	;DO NOT INCLUDE BARE WIRE LENGTHS
     	00100	SUBTTL		CARD DEFINITIONS FOR AUGU1, AUGU6, AND AUGCMU
00200	MAPRC:	TDNE T,[777700,,770000]
00300		POPJ P,
00400		HALT .+1
00500		JRST CPOPJ1
00600	
00700	MAPPAD:			;MAP NUMBERS IN T,TT,TTT INTO EDGE PIN NAME (T).
00800		LSH T,14
00900		LSH TT,6
01000		IOR T,TT
01100		IOR T,TTT
01200		POPJ P,
     	00100	;PIN SPECIFICATION IN A
00200	;SIGN BIT (MAPCON) ON IN A MEANS CONNECTOR
00300	;# OF PINS ON THIS DIP IN B
00400	;RETURNS X,Y IN T, BITS IN LEFT HALF TT
00500	
00600	PINMAP:PUSHJ P,MAPIT
00700		JRST PINERR
00800		JRST CPOPJ1
00900	;JUST BITS INTO TT, ERROR RETURNS 0 BITS
01000	PINBIT:PUSHJ P,MAPIT
01100		SETZ TT,
01200		POPJ P,
01300	
01400	PINERR:	PUSH P,PUTCHR
01500		MOVE T,[OUTCHR TTT]
01600		MOVEM T,PUTCHR
01700		PUSHJ P,PGPRNT
01800		POP P,PUTCHR
01900		OUTSTR [ASCIZ/ Mapping error!
02000	/]
02100		POPJ P,
02200	MAPIT:	PUSH P,A
02300		PUSHJ P,ABSPIN
02400		LDB T,[POINT 6,A,23]	;GET GROUP LETTER
02500		JUMPL A,CONMAP		;IS IT A CONNECTOR PIN?
02600		CAILE T,6		;ONLY 6 SECTIONS ON BOARD
02700		JRST MAPERR
02800		JUMPE T,MAPERR
02900		IMULI T,=2700		;2.7" SPACING BETWEEN GROUPS
03000		LDB TT,[POINT 6,A,29]	;GET COLUMN LETTER
03100		CAILE TT,=9
03200		JRST MAPERR
03300		SOJL TT,MAPERR
03400		IMULI TT,=300		;.3" SPACING BETWEEN COLUMNS
03500		ADDI T,-=2700(TT)
03600		LDB TT,[POINT 6,A,35]	;GET ROW NUMBER
03700		CAILE TT,=50
03800		JRST MAPERR
03900		SOJL TT,MAPERR
04000		IMULI TT,=100		;.1" VERTICAL PIN SPACING
04100		HRLI T,=800(TT)		;ORIGIN SUCH THAT AA01 IS AT 800,,0
04200		TLNE A,MAPPWR!MAPGND	;IS THIS A VCC OR GND PIN?
04300		JRST PINPGP		;YES
04400		SETZ TT,		;NO AUTO GND OR PWR
04500	MAPDON:	AOS -1(P)
04600	MAPERR:	POP P,A
04700		POPJ P,
     	00100	PINPGP:	TLNN A,MAPPWR		;POWER?
00200		SKIPA TT,[GND,,0]
00300		MOVSI TT,PWR
00400		ADDI T,=100		;OVER .1"
00500		JRST MAPDON
00600	
00700	VGCON:	POPJ P,		;FOR NOW
     	00100	ABSPIN:
00200		JUMPL A,CPOPJ		;DON'T TOUCH CONNECTOR PINS
00300		LDB TT,[POINT 6,A,17]	;GET THE PIN NUMBER
00400		TLZ A,77
00500		SOJLE TT,CPOPJ		;NORMALIZE, GET OUT IF ALREADY ABSOLUTE
00600		LDB T,[POINT 6,A,29]	;GET COLUMN LETTER
00700		ASH TT,1		;DOUBLE PIN NUMBER
00800		CAIGE TT,(B)		;FIRST SIDE?
00900		JRST SIDEOK		;YES
01000		ADDI T,1		;NO, NEXT COLUMN
01100		CAIL B,=23		;DIP HAVE 23 OR MORE PINS?
01200		ADDI T,1		;YES, FUDGE ONE MORE COLUMN
01300		CAIG T,=9		;OVERFLOW INTO NEXT GROUP?
01400		JRST GRPOK		;NO
01500		SUBI T,=9		;YES, FIX THINGS UP
01600		HRRI A,1B23(A)		;INCLUDING THE GROUP
01700	GRPOK:	DPB T,[POINT 6,A,29]
01800		SUBM B,TT		;GET CORRECT PIN #
01900		ADDI TT,-2(B)
02000	SIDEOK:	ASH TT,-1
02100		ADDI A,(TT)
02200		POPJ P,
     	00100	;FIND POWER PINS
00200	
00300	FPWR:
00400		JUMPL A,FPWRC
00500		PUSHJ P,ABSPIN
00600		ADDI A,4
00700		TRZ A,100!7		;ROUND TO NEAREST MULTIPLE OF 8 IN EVEN COLUMN
00800		TRNN A,77		;PIN 0?
00900		TRO A,=8		;YES, GO TO PIN 8.
01000		TRNN A,7700		;WERE WE IN COLUMN A?
01100		TRO A,200		;YES, GO TO COLUMN B.
01200		TLO A,MAPPWR
01300		POPJ P,
01400	
01500	;The following code hooks all MAINV voltages together
01600	;in a given jack, but doesn't connect them to anything!!!!!!!
01700	FPWRC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
01800		IOR A,[MAPPWR,,0]
01900		POPJ P,
02000	
02100	;FIND GROUND PINS
02200	
02300	FGND:
02400		JUMPL A,FGNDC
02500		PUSHJ P,ABSPIN
02600		ADDI A,4
02700		TRZ A,100!7		;ROUND TO NEAREST MULTIPLE OF 8 IN EVEN COLUMN
02800		TRNN A,77		;PIN 0?
02900		TRO A,=8		;YES, GO TO PIN 8.
03000		TRNN A,7700		;WERE WE IN COLUMN A?
03100		TRO A,200		;YES, GO TO COLUMN B.
03200		SUBI A,4
03300			TLO A,MAPGND
03400			POPJ P,
03500	
03600	;The following code hooks all GND voltages together
03700	;in a given jack, but doesn't connect them to anything!!!!!!!
03800	FGNDC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
03900		IOR A,[MAPGND,,0]
04000		POPJ P,
     	00100	PGPRNT:
00200		PUSH P,A
00300		JUMPL A,PGCPNT
00400		TLNE A,MAPPWR!MAPGND
00500		JRST PGPRPG
00600		PUSHJ P,LOCPIN
00700		POP P,A
00800		POPJ P,
00900	
01000	PGPRTM:
01100		PUSH P,A
01200		JUMPL A,PGCPNT
01300		TLNE A,MAPPWR!MAPGND
01400		JRST PGPRPG
01500		PUSHJ P,LOCPNM
01600		POP P,A
01700		POPJ P,
01800	
01900	PGPRPG:	PUSHJ P,LOCOUT
02000		POP P,A
02100		PUTBYT "-"
02200		TLNE A,MAPPWR
02300		PUTBYT "V"
02400		TLNE A,MAPGND
02500		PUTBYT "G"
02600		POPJ P,
02700	
02800	PGCPNT:	HRLI A,(A)
02900		TLZ A,MAPCON
03000		TRZ A,7777
03100		PUSHJ P,LOCPNC
03200		POP P,A
03300		POPJ P,
03400	
     	00100	SUBTTL	DISTANCE CALCULATOR FOR ROUTER STUFF
00200	;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G
00300	
00400	
00500	DSTCLC:
00600	NRMLDST:
00700		PUSHJ P,PINMAP		;MAP ONE OF THEM
00800		JRST DSTERR
00900		MOVE A,C		;GET OTHER POINT
01000		MOVE B,D
01100		MOVE C,T		;SAVE X,Y
01200		PUSHJ P,PINMAP
01300		JRST DSTERR
01400		HLRE TT,T
01500		HLRE TTT,C
01600		SUB TT,TTT		;GET VERTICAL DISTANCE
01700		HRRE T,T
01800		HRRE C,C
01900		SUB T,C			;HORIZONTAL DISTANCE
02000		SKIPGE CITYBL		;CITY BLOCK WIRING?
02100		JRST [	MOVM T,T	;YES, GET ABSOLUTE VALUES
02200			MOVM TT,TT
02300			ADD T,TT
02400			JRST GOTDST ]
02500		IMUL TT,TT		;SQUARE VERTICAL DISTANCE
02600		IMUL T,T		;SQUARE HORIZONTAL DISTANCE
02700		ADD T,TT
02800		JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGTH RUNS
02900		PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
03000	GOTDST:	CAILE T,=8000		;LONGER THAN 8 INCHES?
03100		ADDI T,=250		;YES, ADD 1/4 INCH
03200		ADD T,BARELN		;ADD THE BARE WIRE AT EACH END, IF WANTED
03300		ADD T,WRAPMG		;ADD SOME INSULATION TO GO AROUND THE PINS
03400		IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
03500		IDIVI T,=1000		; "		"		"
03600		SKIPE TT		;REMAINDER?
03700		ADDI T,1		;YES, ROUND UP
03800	DSTIS0:	MOVE G,T
03900		POPJ P,
04000	
04100	DSTERR:	SETZ G,
04200		POPJ P,
04300	
04400	GNDCLR:OUTSTR[ASCIZ/24 pin dips not yet implemented!
04500	/]
04600		POPJ P,
     	00100	WAGGND:
00200	GNDOUT:
00300	VCCOUT:
00400		OUTSTR[ASCIZ/Not supported for universal Augat boards!!
00500	/]
00600		POPJ P,
00700	
00800	LOCPNM:		;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
00900		PUSH P,T
01000		PUSHJ P,ABSPIN
01100		PUSHJ P,LOCOUT
01200		POP P,T
01300		POPJ P,
     	00100	BEND AUGAT
00200	>;MWL
00300	BEND AUG
  