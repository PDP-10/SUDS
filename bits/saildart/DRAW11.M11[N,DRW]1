00100	.TITLE DRAW11  PDP11 SUPPORT FOR STANFORD DRAWING PROGRAM
00200	.REQUIRE GRADEF.P11[A630GS00]
00300	.SBTTL
00400	.REQUIRE SX.P11[a630gs00]
00500	.SBTTL
00600	.CSECT DRAW11
00700	
00800	GCORE = 40000	;beginning of graphics core, in case we use DDT
00802	
00804	GDPKBF=165202		; keyboard input buffer
00806	TABLET=165400
00900	
01000	.SBTTL	GLOBALS and MODIFICATIONS
01100	.GLOBL	XTAB		;VARIABLE
01200	.GLOBL	YTAB		;VARAIBLE
01300	.GLOBL	MENUDSP		;VARIABLE
01400	.GLOBL	MENUACTIVE	;VARIABLE
01500	.GLOBL	SETUPDSP
01600	.GLOBL	SETUPMENU
01700	.GLOBL	DELMENU
01800	.GLOBL	PENUP
01900	.GLOBL	PENDOWN
02000	.GLOBL	NEWMENU
02100	
02200	;;;	LIST OF HACKERS WHO HAVE WORKED THIS PROGRAM OVER
02300	;;;	INITIALS	NAME
02400	;;;	AED		ALFRED E. DUNLOP
02500	;;;
02600	;;;	LIST OF ALL THE HACKS DONE TO THIS PROGRAM AFTER 4/1/76.
02700	;;;	INITIALS TAB DATE	COMMENT ON HACK
02800	;;;	;AED	4/20/76		Modification to correctly scale for tablet
02900	;;;	;AED	4/21/76		Change in pen opperation of tablet. Now
03000	;;;				the cursor is continually updated in the
03100	;;;				PDP-11 and sent to the PDP-10 on transitions
03200	;;;				from up to down, or down to up.
03300	;;;	;AED	3/23/77		AT THIS POINT A MENU WAS PUT INTO THIS PROGRAM.
03400	;;;				ALSO THE NEW D PROGRAM WAS MODIFIED TO ALLOW
03500	;;;				USE OF THE TABLET ROUTINES WITHOUT CRASHING THE
03600	;;;				PDP-11. (MENU IS IN MENU.B11[X335AD0L].)
03700	;;;	JN11	9-Feb-79	Added symbolic names for graphics keyboard,
03800	;;;				other CSRs
     	00100		.SBTTL	Stanford keyboard interrupt handler
00200	
00300	SKISR:	MOV	R0,-(SP)		;KEYBOARD INTERRUPT SERVICE ROUTINE
00400		TST	CHRBUF			;CHECK FOR TWO CHRS WITHOUT A SERVICE
00500		BEQ	CHROK			;IF ZERO ALL IS WELL
00600		HALT				;IF NOT BAD BERRIES
00700	CHROK:	MOV	@#GDPKBF,R0		;GET CHARACTER
00800		MOV	R0,CHRBUF		;SAVE CHARACTER
00900		BIC	#100,R0			;IGNORE SHIFT BIT
01000		CMP	R0,#100043		;META CALL??
01100		BNE	NORSRT
01200		JMP	@#1000			;YES, HARD RESTART BUT NOT A BOOTLOAD
01300	NORSRT:	CMP	R0,#100041		;META BREAK??
01400		BNE	GOTCHR
01500		MOV	(PC)+,R0
01600	JOBDDT:	.WORD	0			;IF DDT PRESENT, LINK11 WILL CHANGE THIS
01700	.GLOBL JOBDDT
01800		BEQ	GOTCHR
01900		CLR	CHRBUF
02000		BR	DOACT
02100	GOTCHR:	MOV	#SKRTN,R0
02200	DOACT:	ACTVAT				;ACTIVATE CHARACTER HANDLER
02300		MOV	(SP)+,R0		;PREPARE TO GO AWAY
02400	INTRET:	RTI				;BEGONE
     	00100		.SBTTL	Keyboard character dispatch
00200	
00300	SKRTN:	MOV	R0,-(SP)
00400		MOV	CHRBUF,R0
00500		CLR	CHRBUF			;MARK THAT WE HAVE PROCESSED THIS ONE
00600		CMP	R0,#100675		;CTRL META TOP ESCAPE????
00700		BEQ	CMPKBD
00800		CMP	R0,#100775		;HOW ABOUT WITH SHIFT??
00900		BEQ	CMPKBD
01000	.if ne 0	;false if any non-META character gets us out of NOMAP mode
01100		TST	NOMAP
01200		BNE	CHAROK
01300	.iftf
01400		CLR	METCHR			;CLEAR SPECIAL CHARACTER FLAG
01500		MOV	R0,-(SP)		;IF META BIT IS SET
01600		BPL	NOMET
01700	.iff
01800		TST	NOMAP
01900		BNE	NOSPL
02000	.iftf
02100		MOV	#1003,METCHR		;THEN INSERT SPECIAL CHARACTER FOR META
02200	NOMET:
02300	.iff
02400		CLR	NOMAP			;TURN OFF MAPPING IF NON-META CHARACTER
02500	.endc
02600		BIT	#400,R0			;CHECK FOR CONTROL
02700		BEQ	NOCNTL			;IF BRANCHES, NO CONTROL
02800		TST	METCHR			;IF META AND CONTROL
02900		BNE	MET1
03000		MOV	#1002,METCHR		;CONTROL FUNNY CHARACTER
03100		BR	NOCNTL
03200	MET1:	MOV	#1006,METCHR		;CONTROL AND META FUNNY
03300	NOCNTL:	BIC	#100400,(SP)		;CLEAR CONTROL AND META BITS
03400	;	MOV	#TRANT,R0		;LOOK FOR SPECIAL CHARS
03500	;TRCHK:	CMP	(SP),(R0)		;SAME THING?
03600	;	BEQ	GUDUN			;GOOD ONE
03700	;	TST	(R0)+			;ADVANCE POINTER AND TEST FOR DONE
03800	;	BNE	TRCHK			;TRANSLATE CHECK ANOTHER
03900	FIXED:	MOV	METCHR,R0		;SET ADDRESS FOR SKISOM
04000		BEQ	NOSPL			;IF ZERO, THEN SPECIAL CHARACTER IS NOT NEEDED
04100		SKIRTN
04200	NOSPL:	MOV	(SP)+,R0		;GET FIXED CHARACTER
04300	CHAROK:	SKIRTN				;SEND TO PDP10
04400	SKDONE:	MOV	(SP)+,R0
04500		RTS	PC			;ALL DONE WITH THIS CHARACTER
04600	
04700	CMPKBD:	COM	NOMAP
04800		BR	SKDONE
04900	
05000	;GUDUN:	MOV	TRNVAL-TRANT(R0),(SP)	;TRANSLATE THE CHARACTER
05100	;	BPL	FIXED			;IF NEG, SPECIAL
05200	;	NEG	(SP)			;CLEAR THE FLAG BIT
05300	;	MOV	#1020,METCHR		;DO YOUR OWN CONTROL P THING
05400	;	BR	FIXED			;SEND IT
05500	;
05600	;TRANT:	.WORD	75,175,275,375		;ALTMODE TRANSLATES TO 175
05700	;	.WORD	42,142,242,342		;ESCAPE TRANSLATES TO 33
05800	;	.WORD	230,330			;BETA TRANSLATES TO 7
05900	;	.WORD	74,174,274,374		;BACKSPACE TRANSLATES TO 177
06000	;	.WORD	226			;LAMBDA TRANSLATES TO 10
06100	;	.WORD 0				;END OF	TABLE
06200	;
06300	;TRNVAL:.WORD	-1175,-1175,-1175,-1175	;VALUE FOR ALT
06400	;	.WORD	-1033,-1033,-1033,-1033	;VALUE FOR ESC
06500	;	.WORD	1007,1007		;VALUE FOR BETA
06600	;	.WORD	1177,1177,1177,1177	;VALUE FOR BACKSPACE
06700	;	.WORD 10			;VALUE FOR LAMBDA
06800	;	.WORD 0,0			;END OF TABLE
     	00100		.SBTTL	Variables
00200	
00300	
00400	NOMAP:	.WORD	0
00500	METCHR:	.WORD	0
00600	CHRBUF:	.WORD	0
00700	FRSTXQ:	.WORD	0
00800	SVFSXQ:	.WORD	0
00900	RPLXQT:	.WORD	0
01000	SVRPXQ:	.WORD	0
01100	RPLBRT:	.WORD	0
01200	RPTR:	.WORD	0
01300	PGJMS:	.WORD	0
01400	P0L1:	.WORD	0
01500	MENU:	.WORD	0		;MENU DISPLAY RESERVED LOCATION IN DSP LIST
01600	CURS1:	.WORD	0
01700	CURS2:	.WORD	0
01800	FLVEC1:	.WORD	0
01900	FLVEC2:	.WORD	0
02000	BRTWRD:	.WORD	0
02100	LOCWRD:	.WORD	0
02200	CURWRD:	.WORD	0
02300	FILWRD:	.WORD	0
02400	CHR301:	.WORD	0
02500	PENUDS: .WORD	0		;AED	4/22/76  PEN UP OR DOWN ON LAST
02600	;;;				;AED	4/22/76  CYCLE THROUGH SPKPEN SUBROUTINE.
     	00100		.SBTTL	Initialization
00200	
00300	NOSP2:	JMP	NOSP
00400	
00500	DRWINI:	MOV	R0,-(SP)		;DRAW INIT ROUTINE
00600		MOV	R1,-(SP)
00700		MOV	R2,-(SP)
00800		MOV	R3,-(SP)
00850		JSR	PC,TBINI
00900		MOV #2,R0
01000		GTGRSP
01100		MOV R0,CHR301
01200		BEQ NOSP2
01300		MOVB #214,(R0)+
01400		MOVB #340,(R0)+
01500		MOV #TERM,(R0)
01600		MOV	#SKISR,@#200		;TAKE OVER BIHARY INTERRUPT
01700		MOV	#300,@#212		;IGNORE ALL SPARK PEN INTERRUPTS
01800		MOV	#300,@#216
01900		MOV	#INTRET,@#210
02000		MOV	#INTRET,@#214
02100		MOV	#EMTCNT+1,R0
02200		EMTSZ				;SET UP EMT TABLE SIZE
02300		MOV	#EMTAB,R2		;GET EMT TABLE
02400		CLR	R3
02500	EMTLP:	MOV	(R2)+,R0		;GET A ROUTINE ADDRESS
02600		BEQ	EMTDN			;IF ZERO, END OF TABLE
02700		INC	R3
02800		MOV	R3,R1			;EMT NUMBER
02900		EMTSET				;SET IT UP
03000		BR	EMTLP
03100	EMTDN:	MOV	#132.,R0		;GET SPACE FOR PGJMS TABLE
03200		GTGRSP				;GET SPACE
03300		TST	R0
03400		BEQ	NOSP2			;NO ROOM
03500		TST	(R0)+			;BUMP PAST RETURN ADDR WORD
03600		MOV	R0,PGJMS		;SET UP VARIABLE
03700		MOV	#P0L1L+FLVECL+1+LOCL+CURS1L+CURS2L,R0	;GET SOME SPACE FOR PG 0
03800		GTGRSP			
03900		TST	R0
04000		BEQ	NOSP2
04100		MOV	R0,P0L1			;POINTER TO LINE ONE
04200		MOV	#PGPROT,R1		;PROTOTYPE PAGE 0
04300	P0FILL:	MOV	(R1)+,(R0)+		;DROP PROTOTYPE INTO BUFFER
04400		BNE	P0FILL
04500		MOV	#TERM,-2(R0)		;FIX END WITH TERM
04600		MOV	PGJMS,R1		;GET BACK POINTER TO JMS TABLE
04700		MOV	#LCMD+1,(R1)+		;Get around gdp2 bug in next SETS
04800		MOV	#SETS,(R1)+		;SET STATE
04900		MOV	#146200,(R1)+		;SCALE 14,INTENSITY 14,CMODE
05000		MOV	P0L1,(R1)
05100		BIS	#GXQT,(R1)+		;XQT FIRST LINE
05200		MOV	R1,FILWRD
05300		MOV	#GNOP,(R1)+		;WILL HOLD FILE XQT
05400		MOV	#LCMD+0,(R1)+		;Get around gdp2 bug in next SETS
05500		MOV	#SETS,(R1)+		;SET STATE
05600		MOV	#106022,(R1)+		;SCALE 10,INTENSITY 14,ION,FMT LONG
05700		MOV	R0,(R1)			;SET UP THE XQT FOR FV'S AND LOC
05800		BIS	#GXQT,(R1)+
05900		MOV	#SETXY,(R0)+		;SET X AND Y
06000		MOV	#4000,(R0)+		;PUT IT OFF SCREEN
06100		MOV	#4000,(R0)+
06200		MOV	R0,FLVEC1
06300		CLR	(R0)+			;RESERVED FOR VECTOR Y
06400		CLR	(R0)+			;RESERVED FOR VECTOR X
06500		MOV	#SETXY,(R0)+		;SECOND FOLLOW VECTOR SET
06600		MOV	#4000,(R0)+		;PUT IT OFF SCREEN
06700		MOV	#4000,(R0)+
06800		MOV	R0,FLVEC2
06900		CLR	(R0)+
07000		CLR	(R0)+
07100	FLVECL=10.				;THAT TOOK US 10 WORDS!
07200		MOV	R0,BRTWRD
07300		MOV	#LILA+14,(R0)+		;CHANGE THE INTENSITY FOR REST
07400		MOV	#SETXY,(R0)+		;NOW THE LOCATE STUFF
07500		MOV	R0,LOCWRD
07600		MOV	#4000,(R0)+
07700		MOV	#4000,(R0)+
07800		MOV	#IALT,(R0)+
07900		MOV	#-2000,(R0)+
08000		CLR	(R0)+
08100		MOV	#4000,(R0)+
08200		CLR	(R0)+
08300		MOV	#-2000,(R0)+
08400		MOV	#-2000,(R0)+
08500		CLR	(R0)+
08600		MOV	#4000,(R0)+
08700		MOV	#TERM,(R0)+
08800	LOCL=13.				;THAT TOOK 13, FOR NOW!
08900		MOV	R1,CURWRD
09000		MOV	R0,(R1)
09100		BIS	#GXQT,(R1)+		;AND SET UP THE CURSOR EXECUTE
09200		MOV	#SETXY,(R0)+
09300		MOV	R0,CURS1
09400		CLR	(R0)+
09500		CLR	(R0)+
09600		MOV	#LSCA+16,(R0)+
09700		MOV	#LFMT+0,(R0)+		;SHORT FORMAT
09800		MOV	#156617,(R0)+		;IALT, (-3,-3)
09900		MOV	#005146,(R0)+		;(+6,+6), (0,-6)
10000		MOV	#104246,(R0)+		;(-6,+6), TERM1
10100	CURS1L=8.				;THAT TOOK 8 WORDS.
10200		MOV	#SETXY,(R0)+
10300		CLR	(R0)+
10400		MOV	R0,CURS2
10500		CLR	(R0)+
10600		MOV	#TERM,(R0)+		;TERMINATE IT
10700	CURS2L=4.				;THAT TOOK 4 WORDS, FOR NOW
10800		MOV	#17,R0			;GET LOOP COUNT
10900	INLP:	MOV	#SETS,(R1)+		;SET STATE
11000		MOV	#104021,(R1)+		;SCALE 10, ILVL 10,BEAM ON,FMT 1
11100		MOV	#SETXY,(R1)+		;SET XY
11200		CLR	(R1)+
11300		CLR	(R1)+
11400		MOV	#GNOP,(R1)+		;BLINK NOP
11500		MOV	#GNOP,(R1)+		;SKIP POINT FOR BLINKING
11600		MOV	#GNOP,(R1)+		;JMS POINT
11700		DEC	R0			;COUNT THE NUMBER OF POGS
11800		BGT	INLP			;DO SOME MORE
11900		MOV	R1,MENU			;AED  MENU DISPATCH IF IN USE
12000		MOV	#GNOP,(R1)+		;NO-OP UNLESS IN USE
12100		MOV	PGJMS,(R1)		;RETURN JUMP
12200		SUB	#2,(R1)			;AND MAKE IT GO TO RIGHT PLACE
12300		MOV	#10,R0			;INTERCEPT INTERRUPT 10
12400		MOV	#BLNKIT,R1		;FOR BLINKING
12500		INTRST
12600		MOV	PGJMS,R0
12700		ADD	#GJMS-2,R0		;GET JMS BITS AND SUBTRACT 2
12800	SETUSE:	USEDIS
12900		JSR	PC,SETUPDSP		;AED	3/23/77	  Alocate menu space
13000		MOV	(SP)+,R3
13100		MOV	(SP)+,R2
13200		MOV	(SP)+,R1
13300		MOV	(SP)+,R0
13400	ENDINI:	RTS	PC
     	00100		.SBTTL	Tables and Display prototypes
00200	
00300	EMTAB:	.WORD	LOADPG			;EMT 1
00400		.WORD	BLNKPG			;EMT 2
00500		.WORD	ADDPG			;EMT 3
00600		.WORD	DELPG			;EMT 4
00700		.WORD	CLRDPY			;EMT 5
00800		.WORD	PPSIZ			;EMT 6
00900		.WORD	PG0SET			;EMT 7
01000		.WORD	SETCUR			;EMT 10
01100		.WORD	SETFIL			;EMT 11
01200		.WORD	SETRDY			;EMT 12
01300		.WORD	SETMOD			;EMT 13
01400		.WORD	SETSCL			;EMT 14
01500		.WORD	SETLVL			;EMT 15
01600		.WORD	SETFV1			;EMT 16
01700		.WORD	SETFV2			;EMT 17
01800		.WORD	SETBRT			;EMT 20
01900		.WORD	SETLOC			;EMT 21
02000		.WORD	SETFLG			;EMT 22
02100		.WORD	GETCUR			;EMT 23
02200		.WORD	REPPG			;EMT 24
02300		.WORD	REPAPG			;EMT 25
02400		.WORD	REPLPG			;EMT 26
02500		.WORD	SAVPOG			;EMT 27
02600		.WORD	RSTPOG			;EMT 30
02700	EMTEND:	.WORD	0
02800	EMTCNT=<EMTEND-EMTAB>/2
02900	
03000	PGPROT:	SETXY	-500.,-500.		;almost bottom left corner
03100	RDYWRD:	.BYTE 200			;SET UP THE CHARACTER SET
03200		.ASCII	/?/			;READY FLAG
03300		SETXY	-500.,450.		;FAR LEFT, NEAR TOP
03400		.ASCII	/MODE=/
03500		.EVEN
03600	MODWRD:	.ASCII	/??  SCALE=/
03700		.EVEN
03800	SCLWRD:	.ASCII	/??  LEVEL=/
03900		.EVEN
04000	LVLWRD:	.ASCII  /?? /
04100		.BYTE	25			;THERE EXISTS
04200		.ASCII	/=/
04300		.EVEN
04400		.WORD	0
04500	P0L1ND:
04600	P0L1L=<P0L1ND-PGPROT>/2
04700	
04800	PG0CLT:	.WORD	GNOP
04900		.WORD	0
05000		.BYTE	40,40
05100		.BYTE	40,40
05200		.BYTE	40,40
05300		.WORD	GNOP,GNOP
05400		.WORD	GNOP,GNOP
05500		.WORD	GNOP
05600		.WORD	4000,4000
05700		.WORD	0,0
05800		.WORD	0			;FLAGS
     	00100		.SBTTL	No space available
00200	
00300	OOSM:	SETS	17,17,1,1,0		;ALL ON MAX, ION, FMT=0
00400		SETXY	-500,300
00500		.BYTE	200
00600		.ASCII	/OUT OF SPACE, YOU LOSE!!/
00700		.EVEN
00800		.WORD	TERM
00900	
01000	NOSP:	MOV	#52525,R0
01100		HALT
01200		BR	NOSP			;IN CASE WE GET CONTINUED, BOMB AGAIN
     	00100		.SBTTL	Clear display
00200	
00300	CLRDPY:	MOV	R1,-(SP)
00400		MOV	#17,R1			;CLEAR THE SCREEN
00500	CLP:	MOV	R1,R0			;GET A POG#
00600		JSR	PC,DELPG
00700		DEC	R1			;NEXT POG
00800		BGE	CLP
00900	MOV CHR301,R0
01000	MOV #301,R1
01100	CHRSET
01200		MOV	(SP)+,R1
01300		RTS	PC
     	00100		.SBTTL	Received Piece Of Glass from PDP-10
00200	LOADPG:	
00300		MOV	(R0),-(SP)		;SAVE PIECE OF GLASS #
00400		ADD	#GXQT+2,R0		;GET OURSELVES AN XQT
00500		MOV	R0,-(SP)		;SAVE IT
00600		MOV	2(SP),R0		;GET BACK THE PG #
00700		JSR	PC,DELPG		;DELETE PIECE OF GLASS
00800		MOV	#8.+1,R0		;GET A PIECE OF SPACE FOR XQT TABLE
00900		GTGRSP				;GET SPACE IN GRAPHICS CORE
01000		TST	R0
01100	NOSP1:	BEQ	NOSP			;NOSPACE
01200		TST	(R0)+			;SKIP THE FIRST WORD FOR GIVSPC
01300		MOV	R0,FRSTXQ		;SAVE FOR ADDPG
01400		TST	(R0)+			;SKIP OVER THE JMS RETURN WORD
01500		MOV	(SP)+,(R0)+		;POP THE XQT INTO 2ND ENTRY
01600		MOV	R0,RPLXQT		;SAVE THE POINTER FOR REPAPG
01700		MOV	#GNOP,R1		;NOP THE 3RD THRU 7TH ENTRY
01800		MOV	R1,(R0)+
01900		MOV	R1,(R0)+
02000		MOV	R1,(R0)+
02100		MOV	R1,(R0)+
02200		MOV	R1,(R0)+
02300		MOV	FRSTXQ,(R0)		;RETURN JUMP FOR JMS
02400		ADD	#GJMS-<7*2>,R0		;MAKE A JMS OUT OF XQT TAB ADDRS
02500		MOV	(SP)+,R1		;RESTORE THE PG #
02600		ASL	R1			;MULT BY 16 TO GET OFFSET IN DISPLAY
02700		ASL	R1
02800		ASL	R1
02900		ASL	R1
03000		ADD	PGJMS,R1		;GET OFFSET FOR THIS POG
03100		MOV	R0,16+4(R1)		;PUT JMS TO US IN JMS TAB
03200		RTS	PC
03300	
03400	BLNKPG:	JSR	PC,LOADPG		;SET UP THE PAGE
03500		MOV	#INTR+10,12+4(R1)	;BLINK REQUEST
03600		RTS	PC
03700	
03800	ADDPG:	BIS	#GXQT,R0		;MAKE THE ADDRESS INTO AN XQT
03900		MOV	R0,-(SP)		;SAVE IT
04000		MOV	FRSTXQ,R1		;GET ADDRESS OF FIRST XEQ TABLE
04100		TST	(R1)+			;SKIP THE JMS RETURN ADDRESS
04200	XFLP:	MOV	(R1)+,R0		;GET A POSSIBLE UNIT
04300		CMP	R0,#GNOP		;CHECK FOR NOP
04400		BEQ	FSLOT			;FOUND A SLOT
04500		BIT	#1,R0			;LOOK FOR XQT BITS
04600		BNE	XFLP			;IF BITS SET, THEN IT AINT A JUMP
04700		CMP	R0,FRSTXQ		;LOOK FOR LAST SLOT
04800		BEQ	LSLOT			;FULL UP HERE
04900		MOV	R0,R1			;END OF FILE, WITH ANOTHER TO GO
05000		BR	XFLP			;AND KEEP LOOKING
05100	FSLOT:	MOV	R1,RPLXQT		;SAVE POINTER FOR REPAPG
05200		MOV	(SP)+,-(R1)		;PUT INTO DISPLAY LIST
05300		RTS	PC
05400	
05500	LSLOT:	MOV	#8.+1,R0		;GET A NEW XQT TABLE
05600		GTGRSP				;GET SOME SPACE
05700		TST	R0
05800		BEQ	NOSP1			;NO ROOM
05900		TST	(R0)+			;SKIP FIRST WORD FOR GIVSPC
06000		MOV	(SP),(R0)+		;SET FIRST XQT IN NEW LIST
06100		MOV	R1,(SP)			;SAVE ADDRESS OF THE END OF PREVIOUS FILE
06200		MOV	R0,RPLXQT		;SAVE POINTER FOR REPAPG
06300		MOV	#GNOP,R1		;FILL WITH NO OPS
06400		MOV	R1,(R0)+
06500		MOV	R1,(R0)+
06600		MOV	R1,(R0)+
06700		MOV	R1,(R0)+
06800		MOV	R1,(R0)+
06900		MOV	R1,(R0)+
07000		MOV	FRSTXQ,(R0)		;POINT THIS BUFFER TO JMS RETURN ADDRESS
07100		SUB	#7*2,R0
07200		MOV	(SP)+,R1		;GET BACK ADDRESS OF PREVIOUS XQT LIST
07300		MOV	R0,-(R1)		;LINK LAST LIST TO THIS ONE
07400		RTS	PC
     	00100	REPPG:	MOV	(R0),R1			;GET PIECE OF GLASS #
00200		ASL	R1			;MULT BY 16 TO GET OFFSET IN DISPLAY
00300		ASL	R1
00400		ASL	R1
00500		ASL	R1
00600		ADD	PGJMS,R1		;GET OFFSET FOR THIS POG
00700		MOV	#GNOP,12+4(R1)		;TURN OFF BLINKING
00800		MOVB	#204,3+4(R1)		;CHANGE INTENSITY TO 4
00900		MOV	R1,RPLBRT
01000		MOV	16+4(R1),R1		;GET THE OLD JMS
01100		CMP	#GNOP,R1		;SEE IF IT'S REALLY A JMS
01200		BEQ	LOADPG			;NO, WE REALLY ARE A LOADPG
01300		ADD	#GXQT+2,R0		;MAKE AN EXECUTE FOR THE NEW ONE
01400		MOV	R0,-(SP)		;SAVE IT
01500		SUB	#GJMS,R1		;MAKE IT AN ADDRESS
01600		MOV	R1,FRSTXQ		;SAVE IT
01700		TST	(R1)+			;BUMP PAST THE JMS RETURN WORD
01800		MOV	(R1),R0			;GET THE OLD XQT
01900		MOV	(SP)+,(R1)+		;AND REPLACE IT WITH THE NEW
02000		MOV	R1,RPLXQT		;SAVE AS THE FIRST XQT TO BE REPLACED
02100		SUB	#GXQT+2,R0		;GET BACK THE STARTING ADDRESS OF OLD BLOCK
02200		GIVSPC				;GIVE BACK THE SPACE
02300		RTS	PC
02400	
02500	REPAPG:	BIS	#GXQT,R0		;MAKE THE ADDRESS INTO AN XQT
02600		MOV	R0,-(SP)		;SAVE IT
02700		MOV	RPLXQT,R1		;GET THE POSSIBLE UNIT TO REPLACE
02800	RXFLP:	MOV	(R1)+,R0		;GET A POSSIBLE UNIT
02900		CMP	#GNOP,R0		;TAKE IT IF ITS A NOP
03000		BEQ	RFSLOT
03100		BIT	#1,R0			;OR AN XQT
03200		BNE	RFSLOT
03300		CMP	R0,FRSTXQ		;LOOK FOR LAST SLOT
03400		BEQ	LSLOT			;FULL UP HERE
03500		MOV	R0,R1			;END OF FILE, WITH ANOTHER TO GO
03600		BR	RXFLP			;AND KEEP LOOKING
03700	RFSLOT:	MOV	R1,RPLXQT		;SAVE POINTER TO NEXT XQT
03800		MOV	(SP)+,-(R1)		;CHANGE TO THE NEW XQT
03900		BIC	#GXQT,R0		;GET THE OLD BLOCK POINTER
04000		GIVSPC				;GIVE IT BACK
04100		RTS	PC
04200	
04300	REPLPG:	JSR	PC,REPAPG
04400		MOV	RPLXQT,R0
04500	RPLCLN:	MOV	R0,R1
04600	RPLCLR:	MOV	(R1)+,R0		;GET A POSSIBLE XQT
04700		CMP	#GNOP,R0
04800		BEQ	RPLCLR
04900		CMP	FRSTXQ,R0		;IS THIS THE LAST JUMP
05000		BEQ	RPLDON			;YES, ALL DONE
05100		BIT	#1,R0			;IS IT AN XQT?
05200		BEQ	RPLCLN			;NO, JUMP TO NEXT BLOCK
05300		MOV	#GNOP,-(R1)		;DELETE THIS XQT
05400		BIC	#GXQT,R0
05500		GIVSPC
05600		BR	RPLCLR
05700	RPLDON:	
05800		MOV	RPLBRT,R1
05900		MOVB	#210,3+4(R1)		;FIX UP INTENSITY TO 10
06000		RTS	PC
06100	
06200	SAVPOG:	;SAVES THE CURRENT POG INFO
06300		MOV	FRSTXQ,SVFSXQ
06400		MOV	RPLXQT,SVRPXQ
06500		RTS	PC
06600	
06700	RSTPOG:	;RESTORE THE CURRENT POG INFO
06800		MOV	SVFSXQ,FRSTXQ
06900		MOV	SVRPXQ,RPLXQT
07000		RTS	PC
     	00100		.SBTTL	Delete Piece of Glass
00200	
00300	DELPG:	TST	R0			;IS IT PG 0?
00400		BEQ	PG0CLR			;YES, SPECIAL CASE THIS
00500		MOV	R1,-(SP)		;DELETE A PIECE OF GLASS
00600		MOV	R2,-(SP)
00700		ASL	R0			;MULT POG# TIMES 16
00800		ASL	R0
00900		ASL	R0
01000		ASL	R0
01100		ADD	PGJMS,R0		;ADD BASE 
01200		MOV	#GNOP,12+4(R0)		;DISABLE BLINK
01300		MOV	16+4(R0),R1		;GET XQT TABLE ADRRESS
01400		CMP	R1,#GNOP		;ALREADY DELETED?
01500		BEQ	EOLST			;YES, DON'T BOTHER
01600		MOV	#GNOP,16+4(R0)		;REMOVE FROM JMS TABLE
01700		SUB	#GJMS,R1		;GET ADDRESS OF FIRST XQT TABLE
01800		MOV	R1,R2			;SAVE TWO COPIES
01900		TST	(R1)+			;SKIP THE JUMP RETURN
02000		SUB	#2,(R1)			;FIRST XQT IS SPECIAL
02100	RLP1:	MOV	(R1)+,R0		;GET TABLE ENTRY
02200		BGE	RLNXT			;GET OUT IF ITS A GOTO
02300		MOV	R2,-2(R1)		;IN CASE GRAPHICS IS RUNNING AROUND
02400		BIC	#GXQT,R0		;EXTRACT ADDRESS
02500		CMP	#360,R0			;CHECK IF IT WAS A NOP
02600		BEQ	RLP1			;YES, SKIP IT
02700		GIVSPC				;RELEASE THE SPACE
02800		BR	RLP1			;AND GO DO THE NEXT
02900	RLNXT:	MOV	R1,R0			;ADDRESS OF XQT TABLE
03000		MOV	-(R1),R1		;GET ADDRESS OF NEXT TABLE
03100		SUB	#<8.+1>*2,R0		;BACKUP TO BEGINNING OF ALLOCATION
03200		GIVSPC				;RELEASE THE SPACE TO DEAD SPACE LIST
03300		CMP	R1,R2			;END OF LIST YET?
03400		BNE	RLP1			;RELEASE THE NEXT ONE
03500	EOLST:	MOV	(SP)+,R2
03600		MOV	(SP)+,R1
03700		RTS	PC
     	00100		.SBTTL	Set Scroller parameters
00200	
00300	PPSIZ:	JMPCHN				;SET LINES/JUMP
00400		MOV	R1,R0
00500		LINCHN				;AND SET LINES ON PAGE
00600		RTS	PC
     	00100		.SBTTL	Blink Piece of Glass
00200	
00300	BLNKIT:	MOV	R1,-(SP)
00400		MOV	#2,R0			;Flag indicating Graphics PC
00500		TST	-(SP)			;GET SOME STORAGE
00600		MOV	SP,R1
00700	;;;	GETREG
00800	MOV @#165102,(R1)+
00900		LINTIM				;GET THE TIME
01000		BIT	#20,R0			;ON OR OFF?
01100		BNE	BLNKON
01200		MOV	(SP),R0			;GET GRAPHICS PC
01300		CMP	(R0)+,(R0)+		;MAKE IT A SKIP
01400		MOV	R0,@(SP)+		;STORE IT
01500	BLNKXT:	MOV	(SP)+,R1
01600	;AT THIS POINT R0 MUST BE NON-ZERO, SO MONITOR WILL RESTART GRAPHICS
01700		RTS	PC
01800	
01900	BLNKON:	MOV	#GNOP,@(SP)+		;DON'T SKIP
02000		BR	BLNKXT
     	00100		.SBTTL	Change Piece of Glass 0 values
00200	
00300	PG0SET:	MOV	R0,-(SP)		;SAVE BUFFER F0R LATER
00400		JSR	PC,PG0ST2		;DO THE DIRTY WORK
00500		MOV	(SP)+,R0		;RESTORE THE BUFFER
00600		GIVSPC				;GIVE BACK THE STORAGE
00700		RTS	PC
00800	
00900	PG0CLR:	MOV	#PG0CLT,R0		;RESET PIECE OF GLASS 0
01000	PG0ST2:	MOV	R1,-(SP)		;SET EVERYTHING IN PG 0
01100		MOV	R2,-(SP)
01200		MOV	R0,R2
01300		MOV	(R2)+,R0		
01400		JSR	PC,SETFIL		;SET FILE NAME
01500		MOV	(R2)+,R0		;SET UP READY
01600		JSR	PC,SETRDY
01700		MOV	(R2)+,R0
01800		JSR	PC,SETMOD
01900		MOV	(R2)+,R0
02000		JSR	PC,SETSCL		;SET SCALE
02100		MOV	(R2)+,R0
02200		JSR	PC,SETLVL		;SET MACRO LEVEL
02300		MOV	(R2)+,R0
02400		MOV	(R2)+,R1
02500		JSR	PC,SETFV1
02600		MOV	(R2)+,R0
02700		MOV	(R2)+,R1
02800		JSR	PC,SETFV2
02900		MOV	(R2)+,R0
03000		JSR	PC,SETBRT
03100		MOV	(R2)+,R0
03200		MOV	(R2)+,R1
03300		JSR	PC,SETLOC
03400		MOV	(R2)+,R0
03500		MOV	(R2)+,R1
03600		JSR	PC,SETCUR
03700		MOV	(R2)+,R0
03800		JSR	PC,SETFLG
03900		MOV	(SP)+,R2
04000		MOV	(SP)+,R1
04100		RTS	PC
     	00100	SETFIL:	MOV	@FILWRD,-(SP)		;SAVE OLD CONTENTS
00200		BIS	#GXQT,R0		;MAKE XQT OUT OF IT
00300		MOV	R0,@FILWRD		;NEW POINTER
00400		MOV	(SP)+,R0		;GET OLD BACK
00500		BIC	#GXQT,R0		;UNHACK THE XQT
00600		CMP	R0,#360			;COULD HAVE BEEN A NOP
00700		BEQ	RETURN			;IF SO GO AWAY NOW
00800		GIVSPC				;RELEASE THE OLD BUFFER
00900	RETURN:	RTS	PC
     	00100	SETRDY:	MOV	R2,-(SP)		;SET READY FLAG
00200		MOV	P0L1,R2
00300		MOV	R0,RDYWRD-PGPROT(R2)
00400	R2RET:	MOV	(SP)+,R2
00500		RTS	PC
     	00100		.SBTTL	MODE CHANGER
00200	
00300	SETMOD:	MOV	R2,-(SP)		;SET MODE=
00400		MOV	P0L1,R2			;POINTER TO FIRST LINE
00500		MOV	R0,MODWRD-PGPROT(R2)	;REPLACE WITH NEW VALUE
00600		JSR	PC,NEWMENU		;AED	3/23/77	  IF DISPLAYING A MENU,
00700						;  CHANGE OR DELETE APPROPRIATELY
00800		BR	R2RET
     	00100	SETSCL:	MOV	R2,-(SP)
00200		MOV	P0L1,R2
00300		MOV	R0,SCLWRD-PGPROT(R2)
00400		BR	R2RET
     	00100	SETLVL:	MOV	R2,-(SP)
00200		MOV	P0L1,R2
00300		MOV	R0,LVLWRD-PGPROT(R2)
00400		BR	R2RET
     	00100	SETFV1:	MOV	R2,-(SP)
00200		MOV	FLVEC1,R2
00300	SETFV:	CMP	R0,#GNOP
00400		BEQ	NOFV			;IF NOP, NO FOLLOW VECTOR
00500		MOV	R1,-(R2)		;SET THE Y
00600		MOV	R0,-(R2)		;SET X
00700		MOV	@CURS1,R0		;GET CURSOR X
00800		MOV	@CURS2,R1		;GET CURSOR Y
00900		SUB	(R2)+,R0		;MAKE IT RELATIVE
01000		SUB	(R2)+,R1
01100		MOV	R1,(R2)+		;STORE Y PART OF VECTOR
01200		MOV	R0,(R2)			;AND STORE X PART
01300		BR	R2RET
01400	NOFV:	MOV	#4000,-(R2)		;PUT IT OFF SCREEN
01500		MOV	#4000,-(R2)
01600		BR	R2RET
01700	
01800	SETFV2:	MOV	R2,-(SP)
01900		MOV	FLVEC2,R2
02000		BR	SETFV
     	00100	SETBRT:	MOV	R0,@BRTWRD
00200		RTS	PC
     	00100	SETLOC:	MOV	R1,-(SP)
00200		MOV	LOCWRD,R1
00300		MOV	R0,(R1)+
00400		MOV	(SP)+,(R1)
00500		RTS	PC
     	00100	SETFLG:	
00150	; not needed with tablet module		MOV	R0,-(SP)
00200	; not needed with tablet module		MOV	#SPKPEN,R0
00300	; not needed with tablet module		TSTB	(SP)
00400	; not needed with tablet module		BGE	PENOFF
00500	; not needed with tablet module		LINPUT
00600		MOV	#0,MENUACTIVE		;AED	3/23/77	  FLAG THE MENU AS ACTIVE
00700		JSR	PC,SETUPMENU		;AED	3/23/77	   INIT THE MENU
00800		MOV	MENUDSP,@MENU		;AED	3/23/77	   SEE THE MENU NOW!!
00900	;	MOV	#1,@#TABLET
01000		BR	PENDON
01100	; not needed with tablet module	PENOFF:	LINCLR
01200	; not needed with tablet module		JSR	PC,DELMENU		;AED	3/23/77	  CLEAR THE MENU DISPLAY
01300	; not needed with tablet module		MOV	#-1,MENUACTIVE		;AED	3/23/77	  FLAG THE MENU AS INACTIVE
01400	PENDON:	MOV	CURS1,R0
01500		TST	(SP)+			;CHECK CURSOR FLAG
01600		BGE	SMLCUR			;OFF MEANS SMALL CURSOR
01700		MOV	CURS2,R0
01800	SMLCUR:	ADD	#GXQT-2,R0		;MAKE IT AN EXECUTE
01900		MOV	R0,@CURWRD
02000		RTS	PC
     	00100		.SBTTL	Cursor position
00200	
00300	SETCUR:	MOV	R2,-(SP)		;SAVE R2
00400		MOV	CURS1,R2		;GET LOCATION OF FIRST CURSOR
00500		MOV	R0,(R2)+		;X
00600		MOV	R1,(R2)			;Y
00700		MOV	CURS2,R2		;AND SECOND CURSOR
00800		SUB	(R2),R1			;Y
00900		ADD	R1,(R2)
01000		SUB	-(R2),R0		;X
01100		ADD	R0,(R2)
01200		MOV	FLVEC1,R2
01300		ADD	R1,(R2)+		;Y
01400		ADD	R0,(R2)			;X
01500		MOV	FLVEC2,R2
01600		ADD	R1,(R2)+		;Y
01700		ADD	R0,(R2)			;X
01800		BR	R2RET
     	00100	GETCUR:	MOV	CURS1,R1
00200		MOV	(R1)+,R0		;GET X
00300		MOV	(R1),R1			;GET Y
00400		RTS	PC
     	00100	;;;		.SBTTL	Tablet/Spark-pen/Light-pen
00200	;;;	
00300	;;;	SPKPEN:	MOV	R0,-(SP)
00400	;;;		MOV	R1,-(SP)
00500	;;;		MOV	R2,-(SP)
00600	;;;		MOV	#TABLET+6,R2
00700	;;;		MOV	-(R2),R1		;GET Y
00800	;;;		SUB	#1000,R1		;AED	4/20/76	SCALING SET FOR PRESENT TABLET
00900	;;;		MOV	R1,YTAB			;AED	3/23/77	SAVE IT FOR THE BLISS PROGRAM
01000	;;;	;;;	MOV	#2000,R0
01100	;;;	;;;	SUB	-(R2),R0		;GET X
01200	;;;		MOV	-(R2),R0		;Get X
01300	;;;		SUB	#1000,R0		;AED	4/20/76	SCALING SET FOR PRESENT TABLET
01400	;;;		MOV	R0,XTAB			;AED	3/23/77	SAVE IT FOR THE BLISS PROGRAM
01500	;;;	;;;;	BIT	-(R2),#100002
01600	;;;	;;;;	BNE	SPKRET
01700	;;;	;;;	ASR	R0
01800	;;;	;;;	ASR	R1
01900	;;;		CMP	R0,#-1000		;OFF LEFT?
02000	;;;		BLT	SPKRET
02100	;;;		CMP	R0,#1000		;OFF RIGHT?
02200	;;;		BGT	SPKRET
02300	;;;		CMP	R1,#-1000		;OFF BOTTOM?
02400	;;;		BLT	SPKRET
02500	;;;		CMP	R1,#700			;OFF TOP?
02600	;;;		BGT	SPKRET
02700	;;;		JSR	PC,SETCUR
02800	;;;	
02900	;;;		CMP	-(R2),PENUDS		;AED	4/22/76  CHECK IF Z-AXIS HAS CHANGED SINCE LAST TIME
03000	;;;		BEQ	SPKRET			;AED	4/22/76  IF NO THEN RETURN
03100	;;;		MOV	(R2),PENUDS		;AED	4/22/76  UPDATE PENUDS
03200	;;;		BIT	(R2),#100002		;AED	3/23/77  IS THE PEN DOWN?
03300	;;;		BEQ	1$			;AED	3/23/77
03400	;;;		JSR	PC,PENUP		;AED	3/23/77  PEN IS UP
03500	;;;		BR	2$			;AED	3/23/77
03600	;;;	1$:	JSR	PC,PENDOWN		;AED	3/23/77  PEN IS DOWN
03700	;;;	2$:					;AED	3/23/77
03800	;;;	SPKRET:	INC	(R2)
03900	;;;		MOV	(SP)+,R2
04000	;;;		MOV	(SP)+,R1
04100	;;;		MOV	(SP)+,R0
04200	;;;		RTS	PC
04204	;;;	
     	00100	.sbttl New Tablet support
00200		.globl PENUPG, PENDNG		; in TABLET support
00300		.globl TABINI
00400	
00500	TBINI:
00600		JSR	PC,TABINI
00700		MOV	#PENU,PENUPG		; rouine to call on penup
00800		MOV	#PEND,PENDNG		; routine to call on pendown
00900		RTS	PC
01000	
01100	
01200	; up-routine
01300	
01400	PENU:	MOV	R0,XTAB			; save for menu routine
01500		MOV	R1,YTAB
01600		JSR	PC,PENUP			; call Dunlop's menu pkg
01700		RTS	PC
01800	
01900	PEND:	MOV	R0,XTAB
02000		MOV	R1,YTAB
02100		JSR	PC,PENDOWN
02200		RTS	PC
02300	
     	00100	 DRWINI
00200	.END DRWINI
  