DEFINE VERSION ' (V) <V'4>
VERSION SUBTTL PLOTS V
VERSION VPLOTS__

TITLE PLOTS
;THESE ARE THE PLOT ROUTINES FOR THE CALCOMP PLOTTER
;THE CALLING SEQUENCE IS ASSUMED TO BE THE SAME AS THAT
;USED BY FORTRAN IV.

XALL

DEFINE SETSW $ (NAME,DEFVAL)
<	IFNDEF NAME$SW,<NAME$SW__IFIDN <DEFVAL> <> <0;> DEFVAL
>
	NAME$SW__NAME$SW
>

DEFINE ONOFSW $ (NAME,DEFVAL)
<	SETSW(NAME,DEFVAL)
	IFN NAME$SW,<NAME$SW__-1>	;MAKE IT NICE FOR  AND 
>
DEFINE DEFSW $ (NAME)
<	DEFINE NAME,<IFN NAME$SW>
	DEFINE NO$NAME,<IFE NAME$SW>
>
DEFINE MAKESW(NAME,VAL)
<	ONOFSW(NAME,VAL)
	DEFSW(NAME)
>

MAKESW(STAN)
MAKESW(DEC)
MAKESW(CMU)
MAKESW(ITS)

DEFINE STANFO,<STAN>		;LONG FORM FOR HYSTERICAL RAISINS

DEFINE CHECK $ (SITE,VAR) <IFDEF VAR,<SITE$SW__-1;>>
IFE STANSW!DECSW!CMUSW!ITSSW,<
;IF NO SITE SET MANUALLY ABOVE, WE MUST DECIDE FOR OURSELVES WHERE WE ARE
CHECK(ITS,.IOT) CHECK(CMU,CMUDEC) CHECK(STAN,SPWBUT) DECSW__-1
>

MAKESW(PPWR,DECSW)

NOITS,<
PENUP__40
PENDWN__20
MVLFT__2
MVRT__1
MVDWN__10
MVUP__4
>;NOITS
ITS,<
MVDWN__2
MVUP__1
MVRT__4
MVLFT__10
PENUP__20
PENDWN__40
>;ITS
EXTERNAL DOPLT,.JBFF,CHRTAB
REF__-1

;PLOTTER CHANNEL
NOITS,<	PCHN__17	>
ITS,<	PCHN__10	>	;ITS COMPATIBILITY PACKAGE USES 17

;PLOTTER BYTE SIZE
NOITS,<	PLTSIZ__6>	;6 BITS IN PLOTTER COMMAND
ITS,<	PLTSIZ__7>	;EXCEPT ON ITS

INTERNAL SETXY,REF,ROTIT,XTHICK,VPLOTS,PLOTS,PLOT,PLT1,SYMBOL,WHERE

NOSTAN,<
	OPDEF	EXIT	[CALLI 12]
	OPDEF	DEVTYP	[CALLI 53]
>;NOSTAN
;SETXY
SETXY:	0
	HRREM 1,Y
	HLREM 1,X
	SETZM PEN
	JRA 16,(16)
;PLOTS IS THE ROUTINE WHICH INITIALIZES EVERYTHING
PLOTS:	0
	SKIPN DOPLT
	JRST NOINIT
	MOVEM 16,SV16
	SKIPN 16,@(16)
STANFO,<MOVSI 16,'PTP'>	;CALCOMP REPLACES PTP
NOSTANFO,<MOVSI 16,'PLT'>
	MOVEM 16,PLTDEV
NOITS,<	INIT PCHN,13	>
ITS,<	INIT PCHN,10	>;ASCII MODE PLEASE
PLTDEV:	0
	XWD POB,0
	JRST FOOP	;ERROR RETURN
NOINIT:	SETZM X#	;INITIALIZE X,Y TO 0 PEN TO UP
	SETZM Y#
	SETZM PEN#	;0 IS UP, 1 DOWN
	SETZM ROTIT#	;START WITH UPRIGHT PIC
	SETZM XTHICK#
STANFO,<	SETZM XPEN#	;START WITH MANY PEN COMMANDS
	MOVE 16,SV16
	SKIPE @(16)
	SETOM XPEN
>;STANFO
	SKIPN DOPLT
	JRST NOUT
	MOVSI 16,PLTSIZ*100	;BYTE SIZE
	MOVEM 16,POB+1
	MOVEI 16,PTPBUF
	EXCH 16,.JBFF
	OUTBUF PCHN,3
	MOVEM 16,.JBFF
PPWR,<MOVEM 17,TMP17
	MOVEI 17,PCHN
	DEVTYP 17,
	MOVEI 17,77		;INVENT CODE WHICH CAN'T BE PLOTTER IF UUO FAILURE
	ANDI 17,77
	SETZM ISPLTR#		;ASSUME NOT A PLOTTER
	CAIN 17,13		;PLOTTER CODE
	SETOM ISPLTR
	JSR PCHECK		;CHECK PLOTTER POWER
	MOVE 17,TMP17
>;PPWR
NOUT:	MOVE 16,SV16
	SETZM @(16)	;SETS PARAMETER TO 0 IF OK
	JRA  16,1(16)

FOOP:	MOVE 16,SV16
	SETOM @(16)	;ELSE TO -1
	JRA 16,1(16)
;PLOT HAS X,Y,PEN AS PARAMETERS. PEN HAS CODES: 1 SAME
;2 DOWN 3 UP. IF CODE IS MINUS CLEAR BUFFER RESET X,Y TO 0.
PLOT:	0
	MOVEM 16,SV16	;SAVE RETURN
	MOVE 16,@(16)	;GET ARGUMENTS
	MOVEM 16,SVX#
	MOVE 16,SV16
	MOVE 16,@1(16)
	MOVEM 16,SVY#
	MOVE 16,SV16
	MOVE 16,@2(16)
	MOVEM 16,SVPEN#
	MOVE 16,SV16
	MOVEM 17,SV17	;NOW SAVE ACS
	MOVEI 17,SV0
	BLT 17,SV0+16
	MOVM 2,SVPEN		;GET ABS OF PEN CODE
	CAIN 2,1	;SEE IF IT NEEDS CHANGING
	JRST PENOK
	SUBI 2,3
	CAMN 2,PEN
	JRST PENOK
	MOVEI 17,PENUP	;IT DOES, DECIDE HOW
	SKIPGE 2
	MOVEI 17,PENDWN
	JSR PLT1B	;TO WAIT
PENOK:	MOVEM 2,PEN	;SAVE CURRENT STATUS
	MOVE 0,SVX
	MOVE 1,SVY
	SUB 0,X		;GET X DIFFERENCE
	SETZM 16	;16 WILL HAVE THE X CODE TO USE
	SKIPG 0		;EITHER RIGHT, LEFT OR NONE
	MOVEI 16,MVLFT
	SKIPL 0
	MOVEI 16,MVRT
	SETZM 15	;NOW THE SAME FOR Y AND 15
	SUB 1,Y
	SKIPG 1
	MOVEI 15,MVDWN
	SKIPL 1
	MOVEI 15,MVUP
	MOVMS 1		;GET MAGNITUDES OF X AND Y CHANGES
	MOVMS 0
	CAMG 1,0	;FIND GREATEST
	JRST NOEX
	EXCH 1,0	;AND GET IT IN AC 0
	EXCH 15,16	;AND MOVEMENT CODE IN AC 16
NOEX:	JUMPE NOMOVE	;SPECIAL CHECK FOR NO MOVEMENT
	JUMPE 1,NORM
	MOVEI 3,0	;NOW CONVERT TO
NY:	TLNE 1,200000	;SHIFT SMALLER LEFT AS FAR AS POSSIBLE
	JRST NX
	LSH 1,1
	TRO 1,1
	AOJA 3,NY
NX:	SUBI 3,=34
MKSC:	IDIV 1,0	;NOW DIVIDE BY LARGER
	MOVNS 3		;GET REMAINING SHIFT AMOUNT
	LSH 1,(3)	;SHIFT THAT AMOUNT
NORM:	MOVEM 1,STEP#	;SAVE MAGIC NUMBER
	SETZM 1		;ZERO AC 1
	IOR 15,16	;WILL EITHER TAKE BOTH STEPS OR ONE FOR
			;LARGER NUMBER
    

INLOOP:	ADD 1,STEP	;ADD AND CHECK FOR OVERFLOW
	MOVE 17,16	;ON NO OVERFLOW USE ONLY INC IN LARGEST
			;DIRECTION
	TLZE 1,200000	;OVERFLOW CHECK AND CLEAR
	MOVE 17,15	;OTHERWISE STEP IN BOTH DIRECTIONS
	JSR PLT1	;ISSUE PLOT COMMAND
	SOJG INLOOP	;COUNT DOWN ON LARGER INCREMENT
	MOVE 1,SVX
	MOVEM 1,X	;RESET CURRENT X AND Y POSITIONS
	MOVE 1,SVY
	MOVEM 1,Y
NOMOVE:	SKIPL SVPEN	;SHOULD WE FORCE OUTPUT AND RESET X Y
	JRST ENDOUT
PPWR,<SKIPE DOPLT
	JSR PCHECK
>;PPWR
NOPPWR,<CLOSE PCHN,>
	SETZM X
	SETZM Y
ENDOUT:	HRLZI 17,SV0	;RESTORE AC'S
	BLT 17,16
	MOVE 17,SV17
	JRA 16,3(16)
;ROUTINES TO PUT THINGS IN OUTPUT BUFFER

DEFINE PLTCMD (A,B,C,D,E)
<
BYTE (=36-5*PLTSIZ)0(PLT