SUBTTL	AUG.FAI: ROUTINES WITH KNOWLEDGE  OF CMU AUGUAT BOARD LOCATIONS
BEGIN AUG

;THE TRANSFER VECTOR FOR   AUGAT 8136-UG1  WIRE WRAP BOARD

^AUGU1:
	JRST LCIU1	;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SET UP AUGU1 execution FLOW CONTROL VECTORS
	JRST LOCOUT
MDPC,<
	JRST CSLTLP
	JRST GTSLTL
MD,<
	JRST GTCONP
	JRST CSLTLD
>;MD
>;MDPC
MWL,<
	JRST WLOCOUT
	JRST LOCPNC
	JRST LOCPNW
	JRST PRCNPN
	JRST LOCAU1
	JRST PADPRT
	JRST RAYDIP
	JRST RAYCON
; begin added 4-May-79 ROB, AVB
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
; end added
>;MWL
	[ASCIZ/#L#/]			;BAY RACK SLOT
MDPC,<	[ASCIZ/Connector pin (L-#)?/]
	[ASCIZ/Dip location (LL#)?/]
>;MDPC
MWL,<	[ASCIZ/LL#/]
	[ASCIZ/*LL# or J#-#/]
>;MWL
CHECK AUGU1,LTVLEN		;CHECK THE LENTH OF THE AUGU1 TRANSFER VECTORS


;	VECTORS FOR execution FLOW CONTROL
;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
VECU1:				;AUGU1 VECTORS (AUGAT 8136-UG1)
	JRST JP1U1		; jmp1
	JRST RETJP2		; jmp2
	JRST	AU1L2		; jmp3
	JRST	JP4U1		; jmp4
	JFCL			; jmp5 not used
	JFCL			; jmp6 not used
	JFCL			; jmp7 not used
	JFCL			; jmp8 not used
MD,<
	JRST JP9U1		; jmp9
	JRST JP0U1		; jmp10
>;MD
;THE TRANSFER VECTOR FOR   AUGAT 8136-UG6  WIRE WRAP BOARD

^AUGU6:
	JRST LCIU6	;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SETUP AUGU6 execution FLOW CONTROL VECTORS
	JRST LOCOUT
MDPC,<
	JRST CSLTLP
	JRST GTSLTL
MD,<
	JRST GTCONP
	JRST CSLTLD
>;MD
>;MDPC
MWL,<
	JRST WLOCOUT
	JRST LOCPNC
	JRST LOCPNW
	JRST PRCNPN
	JRST LOCAU6
	JRST PADPRT
	JRST RAYDIP
	JRST RAYCON
; begin added 4-May-79 ROB, AVB
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
; end added
>;MWL
	[ASCIZ/#L#/]		;BAY RACK SLOT
MDPC,<	[ASCIZ/Connector pin (L#-#)?/]
	[ASCIZ/Dip location (LL#)?/]
>;MDPC
MWL,<	[ASCIZ/LL#/]
	[ASCIZ/*LL# or J#-#/]
>;MWL
CHECK AUGU6,LTVLEN		;CHECK THE LENTH OF THE AUGU6 TRANSFER VECTORS
;	VECTORS FOR execution FLOW CONTROL
;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
VECU6:				;AUGU6 VECTORS (AUGAT 8136-UG6)
	JRST JP1U6		; jmp1
	JRST RETJP2		; jmp2
	JRST	AU6L2		; jmp3
	JRST	JP4U6		; jmp4
	JFCL			; jmp5 not used
	JFCL			; jmp6 not used
	JFCL			; jmp7 not used
	JFCL			; jmp8 not used
MD,<
	JRST JP9U6		; jmp9
	JRST JP0U6		; jmp10
>;MD
;THE TRANSFER VECTOR FOR  AUGAT AX118-75-[G]

^AUGCMU:
	JRST LCICMU		;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SET UP AUGCMU execution FLOW CONTROL VECTORS
	JRST LOCOUT
MDPC,<
	JRST CSLTLP
	JRST GTSLTL
MD,<
	JRST GTCONP
	JRST CSLTLD
>;MD
>;MDPC
MWL,<
	JRST WLOCOUT
	JRST LOCPNC
	JRST LOCPNW
	JRST PRCNPN
	JRST LOCAUC
	JRST PADPRT
	JRST RAYDIP
	JRST RAYCON
; begin added 4-May-79 ROB, AVB
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
; end added
>;MWL
	[ASCIZ/#L#/]		;BAY RACK SLOT
MDPC,<	[ASCIZ/Connector pin (L#-#)?/]
	[ASCIZ/Dip location (LL#)?/]
>;MDPC
MWL,<	[ASCIZ/LL#/]
	[ASCIZ/*LL# or J#-#/]
>;MWL
CHECK AUGCMU,LTVLEN		;CHECK THE LENTH OF THE AUGCMU TRANSFER VECTORS


;	VECTORS FOR execution FLOW CONTROL
;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
VECCMU:				;AUGCMU VECTORS (AUGAT AX118-75-[G])
	JRST JP1CMU		; jmp1
	JRST RETJP2		; jmp2
	JRST	ACML2		; jmp3
	JRST	JP4CMU		; jmp4
	JFCL			; jmp5 not used
	JFCL			; jmp6 not used
	JFCL			; jmp7 not used
	JFCL			; jmp8 not used
MD,<
	JRST JP9CMU		; jmp9
	JRST JP0CMU		; jmp10
>;MD
;THE TRANSFER VECTOR FOR  AUGAT 8136-LG498-49

^AUGHEX:
	JRST LCIHEX		;INITIALIZE LETTER/NUMBER CONVERSION TABLES AND SETUP AUGHEX execution FLOW CONTROL VECTORS
	JRST LOCOUT
MDPC,<
	JRST CSLTLP
	JRST GTSLTL
MD,<
	JRST GTCONP
	JRST CSLTLD
>;MD
>;MDPC
MWL,<
	JRST WLOCOUT
	JRST LOCPNC
	JRST LOCPNW
	JRST PRCNPN
	JRST LOCAUX
	JRST PADPRT
	JRST RAYDIP
	JRST RAYCON
; begin added 4-May-79 ROB, AVB
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
; end added
>;MWL
	[ASCIZ/#L#/]		;BAY RACK SLOT
MDPC,<	[ASCIZ/Connector pin (J#-# or *LL#)?/]
	[ASCIZ/Body location (LL#)?/]
>;MDPC
MWL,<	[ASCIZ/LL#/]			;IC location used in ''P command
	[ASCIZ/*LL# or J#-#/]		;Connecter used in ''P command
>;MWL
CHECK AUGHEX,LTVLEN		;CHECK THE LENTH OF THE AUGHEX TRANSFER VECTOR


;	VECTORS FOR execution FLOW CONTROL
;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
VECHEX:				;AUGHEX VECTORS (AUGAT 8136-LG498-49)
	JRST JP1HEX		; jmp1
	JRST JP2HEX		; jmp2
	JRST AUXL2		; jmp3
	JRST	JP4HEX		; jmp4
	JFCL			; jmp5 not used
	JFCL			; jmp6 not used
	JFCL			; jmp7 not used
	JFCL			; jmp8 not used
MD,<
	JRST JP9HEX		; jmp9
	JRST JP0HEX		; jmp10
>;MD
; The transfer vector for AUGAT 8136-UG157

^AUGDBL:
	JRST	LCIDBL		; initialize letter/no conversion
	JRST	LOCOUT		; print location
MDPC,<
	JRST	CSLTLP
	JRST	GTSLTL
MD,<	
	JRST	GTCONP
	JRST	CSLTLD
>;MD
>;MDPC
MWL,<
	JRST	WLOCOUT
	JRST	LOCPNC
	JRST	LOCPNW
	JRST	PRCNPN
	JRST LOCAUD
	JRST PADPRT
	JRST RAYDIP
	JRST RAYCON
; begin added 4-May-79 ROB, AVB
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
	JRST [	OUTSTR [ASCIZ/NO WIRING SERVICES WRAP DRIVER FOR THIS BOARD!!
/]
		JRST ERRET]
; end added
>;MWL
	[ASCIZ/#L#/]		;BAY RACK SLOT
MDPC,<	[ASCIZ/Connector pin (*J#-# or *LL#)?/]
	[ASCIZ/Body location (L#)?/]
>;MDPC
MWL,<	[ASCIZ/L#/]			;IC location used in ''P command
	[ASCIZ/LL# or *LL# or J#-#/]		;Connecter used in ''P command
>;MWL
CHECK AUGDBL,LTVLEN		;CHECK THE LENTH OF THE AUGDBL TRANSFER VECTOR


;	VECTORS FOR EXECUTION FLOW CONTROL
;  VECTORS ARE CALLED BY A  "JRST @JMP  UNLESS OTHER WISE SPECIFIED.
VECDBL:				;AUGDBL VECTORS (AUGAT 8136-UG157)
	JRST JP1DBL
	JRST JP2DBL
	JRST	ADBL2
	JRST	JP4DBL
	JFCL
	JFCL
	JFCL
	JFCL
MD,<
	JRST JP9DBL
	JRST JP0DBL
>;MD
L2NSUB:	BLOCK L2NLEN		;SET UP A BLOCK FOR LETTER TO NUMBER CONVERSION TABLE FOR BOARDS IN AUG4
N2LSUB:	REPEAT N2LLEN, < "?"	;SET UP A BLOCK FOR NUMBER TO LETTER CONVERSION TABLES FOR BOARDS IN AUG4
>
EN2L__.				;SET A MARKER SO WE CAN GET BACK HERE AFTER MAKING UP THE LETTER AND NUMBER CONVERSION TABLES

NNN__1
FOR I IN(A,B,C,D,E,F,G,H,J,K,L,M,N,P,Q,R,S,T,U,V,W,X,Y,Z)
<	L2N2L I,0
>				;MAKE THE LETTER TO NUMBER AND NUMBER TO LETTER CONVERSION TABLES

N2LMAX__NNN-1			;SET THE MAXIMUM NUMBER WHICH CAN BE CONVERTED INTO A LETTER

ORG EN2L			;GET BACK NOW THAT WE HAVE MADE UP THE LETTER AND NUMBER CONVERSION TABLES

	STORAGE (LOW)
	VECBLK:			;VECTOR BLOCK ALLOWING execution FLOW CONTROL
JMP1:	JRST NBOARD
JMP2:	JRST NBOARD
JMP3:	JRST NBOARD		
JMP4:	JRST NBOARD		
JMP5:	JRST NBOARD		; not used
JMP6:	JRST NBOARD		; not used
JMP7:	JRST NBOARD		; not used
JMP8:	JRST NBOARD		; not used
MD,<
JMP9:	JRST NBOARD
JMP0:	JRST NBOARD
>;MD
	STORAGE (PURE)
LCIU1:	MOVE T,[VECU1,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGU1
	JRST LCINIT
LCIU6:	MOVE T,[VECU6,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGU6
	JRST LCINIT
LCICMU:	MOVE T,[VECCMU,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGCMU
	JRST LCINIT
LCIHEX:	MOVE T,[VECHEX,,VECBLK]	;LOAD execution FLOW CONTROL VECTORS FOR AUGHEX
	JRST	LCINIT
LCIDBL:	MOVE	T,[VECDBL,,VECBLK]	; load execution flow control vectors for AUGDBL
LCINIT:
	BLT	T,VECBLK+ MD,<=9;> 7	;TRANSFER IN THE SPECIFIC BOARD'S VECTORS FOR execution FLOW CONTROL.
	MOVE	T,[L2NSUB,,L2N]		;BLOCK TRANSFER TO BOARDS THE NUMBER AND LETTER CONVERSION TABLES
	BLT	T,L2N+L2NLEN+N2LLEN-1	;BLOCK TRANSFER TO BOARDS THE NUMBER AND LETTER CONVERSION TABLES
	MOVEI	T,N2LMAX		;TRANSFER TO BOARDS THE LARGEST NUMBER THAT CAN BE CONVERTED TO A LETTER
	MOVEM	T,MAXN2L		;TRANSFER TO BOARDS THE LARGEST NUMBER THAT CAN BE CONVERTED TO A LETTER
	POPJ	P,

SUBTTL	WLOCOUT, LOCOUT -- LOCATION PRINTING ROUTINES; SLTLPN

MWL,<
WLOCOUT:
>;MWL
LOCOUT:
	LDB TTT,[POINT 6,A,23]
	JUMPE TTT,CPOPJ		;NOTHING HERE, MEANS NOTHING AT ALL
	TRNN A,7777		;CONNECTOR PIN?
	JRST @JMP1		; board-dependent code
	PUTBYT @N2L(TTT)
	JRST	@JMP4			; board-dependent

JP4U1:
JP4U6:
JP4CMU:
JP4HEX:
	LDB TTT,[POINT 6,A,29]
	PUTBYT @N2L(TTT)
JP4DBL:
	MOVEI TTT,2
	MOVEM TTT,NDIG
	LDB T,[POINT 6,A,35]
	JRST NPUTDEC

JP1U1:
		PUTBYT "J"
		PUTBYT @N2L(TTT)
		POPJ P,


JP1U6:
JP1CMU:
		PUTBYT "J"
		ROT TTT,-1
		PUTBYT @N2L(TTT)
		LSH TTT,1-=36
		PUTBYT "1"(TTT)
		POPJ P,

JP1HEX:
		TRNE TTT,40		;Is it a DEC paddle?
		JRST [	PUTBYT "J"
			MOVEI T,-40(TTT)
			JRST PUTDEC ]
		PUTBYT "*"		;yes
		PUTBYT @N2L(TTT)
		POPJ P,
JP1DBL:
	TRNE TTT,40
	JRST	[PUTBYT  "J"
		PUTBYT	21(TTT)
		POPJ	P,]
	PUTBYT	"*"		; yes, DEC paddle
	PUTBYT	@N2L(TTT)	; get letter code
	POPJ	P,

SUBTTL	CSLTLP,LOCPNC,LOCPNW,PRCNPN -- CONNECTOR PIN PRINTING STUFF

CSLTLP:
MD,<	PUSHJ P,CSLTOUT
	HLRZ A,A
	PUSH P,A
	TRZ A,7777
	PUSHJ P,LOCOUT
	POP P,A
>;MD
MWL,<
LOCPNC:
LOCPNW:
	PUSHJ P,LOCOUT
	MOVSS A,A		;tTHIS IS TO ALLOW RESTITUTION FOR SECOND CALL
>;MWL
	JRST @JMP2		; board-dependent code
JP2HEX:
JP2DBL:
	TRNE A,7700
	JRST [	LDB T,[POINT 6,A,29]
		PUTBYT @N2L(T)
		LDB T,[POINT 6,A,35]
		MWL,<	MOVSS A,A	>	;RETURN LEFT HALF TO LEFT HALF FOR SECOND CALL
		JRST PUTDEC ]
RETJP2:
MWL,<
PRCNPN:
>;MWL
DEC,<
	TRNE A,4000
	JRST [	LDB T,[POINT 11,A,35]
		JRST PUTDEC]
>;DEC
	LDB T,[POINT 6,A,29]
	PUTBYT @N2L(T)
	PUTBYT "-"
	LDB T,[POINT 6,A,35]
	MWL,<	MOVSS A,A	>	;PUT LEFT HALF BACK IN LEFT HALF FOR SECOND CALL
	JRST NPUTDEC
SUBTTL	GETLOC [AUGHEX] -----
;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
; for AUGHEX boards
;	Valid syntax
;
;	Bay/rack/slot:	#L#
;	Connector pin:	J#-# or *LL#
;	Body location:	LL#
;
;
;	For connector pins, the scanner is left pointing to:
;	J#-#
;	  ^
;	*LL#
;	  ^

;CALL IS:
;	PUSHJ P,GETLOC
;	JRST ERROR
;MDPC,<	JRST CRLF.ONLY >
;	JRST GOT.CONNECTOR.IN.TT
;	(DIP LOC IN TT)

BEGIN LOCAUX
^LOCAUX:
;SHOULD PRINT A CUE MESAGE HERE
^AUXL2:
	GETCH

MDPC,<	CAIN CHRREG,12
	JRST CPOPJ1
>;MDPC
GTLOC3:	

	CAIN	CHRREG,"*"		; DEC paddle?
	JRST	GDECCN
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
	POPJ P,				; unless illegal or missing!
	PUSH P,TT
	GETNUM
	POP P,TT
	JUMPN NUMREG,GETCON
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ	P,
	SKIPN CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	LSH TT,6
	TRO TT,(CHRREG)
	HRLM TT,(P)
	GETNUM
	JUMPLE NUMREG,CPOPJ
	CAILE NUMREG,=99
	POPJ P,
	HLRZ TT,(P)
	LSH TT,6
	TRO TT,(NUMREG)
MDPC,<	AOS (P) >
	JRST CPOPJ2

GETCON:
	CAMN TT,L2N+"J"-"A"	; must be the letter "J"
	CAIL NUMREG,40
	POPJ P,
	MOVEI TT,40(NUMREG)		; SET HIGH-ORDER BIT
GCNXIT:	LSH TT,6
	LSH TT,6
MDPC,<	AOS (P) >
	JRST CPOPJ1
;	Encoding of J# (form J#-#)
;;	----------------------------------------
;	|               |1| 5  |       12      |
;	|               |1| #  |       0       |
;;	----------------------------------------
GDECCN:	GETCH
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	SKIPN TT,L2N-"A"(CHRREG)
	POPJ P,
	GETCH
	JRST GCNXIT
;	Jack encoding for DEC paddle designated by "L"
;;	----------------------------------------
;	|               |  6   |       12      |
;	|               |(L+32)|        0      |
;;	----------------------------------------
	
BEND LOCAUX
SUBTTL GETLOC [AUGU1] -----
BEGIN LOCAU1
;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
; for AUGU1 boards
;	valid syntax is:
;	Bay/Rack/Slot: #L#
;	Connector pin: L-#
;	Body location: LL#
;

;CALL IS:
;	PUSHJ P,GETLOC
;	JRST ERROR
;MDPC,<	JRST CRLF.ONLY >
;	JRST GOT.CONNECTOR.IN.TT
;	(DIP LOC IN TT)

^LOCAU1:
;SHOULD PRINT A CUE MESAGE HERE
^AU1L2:
	MOVSI NUMREG,400000
	IORM NUMREG,(P)		;sleazy hack to find spare flag
				; bit on top of stack
				; set flag that we haven't seen a "J"
	GETCH

MDPC,<	CAIN CHRREG,12
	JRST CPOPJ1
>;MDPC
	CAIN CHRREG,"J"
	JRST [	ANDCAM NUMREG,(P)	; clear flag in LHS of top of stack temp
					; we know now we have seen a "J"
		GETCH
		JRST GTLOC3 ]
RETJP4:
GTLOC3:	

	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
	POPJ P,				; unless illegal or missing!
	GETCH

	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	JRST	GETCON
	SKIPN CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	LSH TT,6
	TRO TT,(CHRREG)
	HRLM TT,(P)
	GETNUM
	JUMPLE NUMREG,CPOPJ
	CAILE NUMREG,=99
	POPJ P,
	HLRZ TT,(P)
	LSH TT,6
	TRO TT,(NUMREG)
MDPC,<	AOS (P) >
	JRST CPOPJ2
;	Encoding of LL#
;;	----------------------------------------
;	|               |   6  |   6   |   6   |
;	|               |   L  |   L   |   #   |
;;	----------------------------------------

GETCON:
GCNXIT:	LSH TT,6
	IOR	TT,L2N+"J"-"A"
	LSH TT,6
MDPC,<	AOS (P) >
	JRST CPOPJ1
;	Encoding of L (of L-#)
;;	----------------------------------------
;	|               |   6  |   6   |   6   |
;	|               |   L  |  "J"  |   0   |
;;	----------------------------------------
BEND LOCAU1
SUBTTL  GETLOC [AUGU6] -----
;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
; for AUGU6 boards
; 	valid syntax is:
;	Bay/Rack/Slot:	#L#
;	Connector pin: L#-#
;	Body location: LL#

;CALL IS:
;	PUSHJ P,GETLOC
;	JRST ERROR
;MDPC,<	JRST CRLF.ONLY >
;	JRST GOT.CONNECTOR.IN.TT
;	(DIP LOC IN TT)

BEGIN LOCAU6
^LOCAU6:
;SHOULD PRINT A CUE MESAGE HERE
^AU6L2:
	MOVSI NUMREG,400000
	IORM NUMREG,(P)		;sleazy hack to find spare flag
				; bit on top of stack
				; set flag that we haven't seen a "J"
	GETCH

MDPC,<	CAIN CHRREG,12
	JRST CPOPJ1
>;MDPC
	CAIN CHRREG,"J"
	JRST [	ANDCAM NUMREG,(P)	; clear flag in LHS of top of stack temp
					; we know now we have seen a "J"
		GETCH
		JRST GTLOC3 ]
GTLOC3:	
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
	POPJ P,				; unless illegal or missing!
	PUSH P,TT
	GETNUM
	POP P,TT
	JUMPN NUMREG,GETCON
	SKIPL (P)
	POPJ P,
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ	P,
	SKIPN CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	LSH TT,6
	TRO TT,(CHRREG)
	HRLM TT,(P)
	GETNUM
	JUMPLE NUMREG,CPOPJ
	CAILE NUMREG,=99
	POPJ P,
	HLRZ TT,(P)
	LSH TT,6
	TRO TT,(NUMREG)
MDPC,<	AOS (P) >
	JRST CPOPJ2
;	Encoding of LL#
;;	----------------------------------------
;	|               |   6  |   6   |   6   |
;	|               |   L  |   L   |   #   |
;;	----------------------------------------

GETCON:
JP7U6:
	CAILE NUMREG,2
	POPJ P,
	LSH TT,1
	ADDI TT,-1(NUMREG)
GCNXIT:	LSH TT,6
	IOR	TT,L2N+"J"-"A"
	LSH TT,6
MDPC,<	AOS (P) >
	JRST CPOPJ1
;	Encoding of connector L# for #=1 or #=2
;;	-------------------------------------------
;	|               |   6     |   6   |   6   |
;	|               |L*2+(#-1)|  "J"  |   0   |
;;	-------------------------------------------
BEND LOCAU6
SUBTTL GETLOC [AUGDBL]
;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
; for AUGDBL boards
;	Valid syntax is:
;	Bay/rack/slot:  #L#
;	Connector pin:  *J#-# or *LL#
;	Body location:	L#

;	The scan point is left at:
;	J#-#
;	  ^
;	*LL#
;	  ^


;CALL IS:
;	PUSHJ P,GETLOC
;	JRST ERROR
;MDPC,<	JRST CRLF.ONLY >
;	JRST GOT.CONNECTOR.IN.TT
;	(DIP LOC IN TT)

BEGIN LOCAUD
^LOCAUD:
;	should print a cue message here
^ADBL2:

	GETCH				; read a letter
	
MDPC,<
	CAIN	CHRREG,12		; LF?
	JRST	CPOPJ1			; yes, skip-return
>;MDPC
	CAIN	CHRREG,"*"		; jack id or  dec paddle flag?
	JRST	GDECCN			; yes, go process it
	CAIL	CHRREG,"A"		; valid letter?
	CAILE	CHRREG,"Z"		; ...
	POPJ	P,			; nope!
	SKIPN	TT,L2N-"A"(CHRREG)	; convert to integer
					; TT now has integer encoding
	POPJ	P,			; unless it was bogus

	PUSH	P,TT			; save TT
	GETNUM				; read a number
	POP	P,TT			; restore TT
	JUMPLE	NUMREG,CPOPJ		; illegal---must be
					; L#!
	CAILE	NUMREG,=99		; out of range?
	POPJ	P,			; yes, error
	LSH	TT,6			; move letter code left
	LSH	TT,6			; to correct position
	IOR	TT,NUMREG		; and or-in NUMREG

;
;	The encoding of L#:
;;	----------------------------------------
;	|               |   6  |   6   |   6   |
;	|               |   L  |   0   |   #   |
;;	----------------------------------------
	
MDPC,<	AOS (P)  >	; for double-skip return
	JRST	CPOPJ2	; success
GCNXIT:
	LSH	TT,6
	LSH	TT,6
MDPC,<	AOS	(P)>
	JRST	CPOPJ1

GDECCN:	GETCH
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	CAIN	CHRREG,"J"		; jack pin?
	JRST	GETCON			; yes
	SKIPN TT,L2N-"A"(CHRREG)
	POPJ P,
	GETCH
	JRST GCNXIT
;	Jack encoding for DEC paddle designated by "L"
;;	----------------------------------------
;	|               |  6   |       12      |
;	|               |(L+32)|        0      |
;;	----------------------------------------

GETCON:	
	GETNUM				; read a number
	JUMPLE	NUMREG,CPOPJ	; if zero or negative, lose
;	CAILE	NUMREG,2	; J1 or J2 only
;	POPJ	P,		; otherwise lose
	MOVEI	TT,-1(NUMREG)	; store zero-based
	TRO	TT,40		; TURN ON HIGH ORDER BIT
	JRST	GCNXIT
;	Encoding of a connector pin (J1 or J2)
;;	----------------------------------------
;	|               |1| 5  |       12      |
;	|               |1|0or1|        0      |
;;	----------------------------------------

BEND LOCAUD
SUBTTL GETLOC [AUGCMU] -----
;GETLOC -- READS A LOC FOR EITHER A DIP OR A CONNECTOR PIN
; for AUGCMU boards

;CALL IS:
;	PUSHJ P,GETLOC
;	JRST ERROR
;MDPC,<	JRST CRLF.ONLY >
;	JRST GOT.CONNECTOR.IN.TT
;	(DIP LOC IN TT)

BEGIN LOCAUC
^LOCAUC:
;SHOULD PRINT A CUE MESAGE HERE
^ACML2:
	MOVSI NUMREG,400000
	IORM NUMREG,(P)		;sleazy hack to find spare flag
				; bit on top of stack
				; set flag that we haven't seen a "J"
	GETCH

MDPC,<	CAIN CHRREG,12
	JRST CPOPJ1
>;MDPC
	CAIN CHRREG,"J"
	JRST [	ANDCAM NUMREG,(P)	; clear flag in LHS of top of stack temp
					; we know now we have seen a "J"
		GETCH
		JRST GTLOC3 ]
GTLOC3:	
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ P,
	SKIPN TT,L2N-"A"(CHRREG)	; get the integer to TT
	POPJ P,				; unless illegal or missing!
	PUSH P,TT
	GETNUM
	POP P,TT
	JUMPN NUMREG,GETCON
	SKIPL (P)
	POPJ P,
	CAIL CHRREG,"A"
	CAILE CHRREG,"Z"
	POPJ	P,
	SKIPN CHRREG,L2N-"A"(CHRREG)
	POPJ P,
	LSH TT,6
	TRO TT,(CHRREG)
	HRLM TT,(P)
	GETNUM
	JUMPLE NUMREG,CPOPJ
	CAILE NUMREG,=99
	POPJ P,
	HLRZ TT,(P)
	LSH TT,6
	TRO TT,(NUMREG)
MDPC,<	AOS (P) >
	JRST CPOPJ2

GETCON:
	CAILE NUMREG,2
	POPJ P,
	LSH TT,1
	ADDI TT,-1(NUMREG)
GCNXIT:	LSH TT,6
	IOR	TT,L2N+"J"-"A"
	LSH TT,6
MDPC,<	AOS (P) >
	JRST CPOPJ1
BEND LOCAUC
;GTSLTL -- READS A BAY/RACK/SLOT/DIPLOC OR JUST A DIPLOC

;CALL IS:
;	PUSHJ P,GTSLTL
;	JRST ERROR
;	JRST CRLF.ONLY
;MD,<	JFCL	>	;LOC ONLY
;	(BRS,,LOC IN DESTIN)
;		MD,< NOTE: REGISTER D CLOBBERED >

MDPC,<

GTSLTL:
	SETZM DESTIN
;;;	CHKCUE
	PUSHJ P,@JMP3		; board-dependent
	POPJ P,
	JRST CPOPJ1
	POPJ P,
	HRRZM TT,DESTIN
	JRST CPOPJ2
>;MDPC
;GTCONP -- LIKE GTSLTL BUT FOR CONNECTOR PINS.

;CALL IS LIKE GTSLTL EXCEPT:
;LAY,<	CPOPJ1 RETURN MAY BE TAKEN ON TEXIST CHAR ALSO >

MD,<
GTCONP:
	SETZM DESTIN
;;;	CHKCUE
	PUSHJ P,@JMP3		; board-dependent
	POPJ P,			; error
	JRST CPOPJ1		; CRLF only
	JRST @JMP9		; connector: board-dependent code
	JRST @JMP0		; dip loc: board-dependent code
;
;	The scanner is left pointing to the "-" if this is
;	a valid connector pin for any of the boards listed below
;
JP9U1:
JP9U6:
JP9CMU:
	CAIE CHRREG,"-"
	POPJ	P,		; not "-", error
	JRST	RETJP0		; otherwise go on

; For dip locations on the boards below, we just return
JP0U1:
JP0U6:
JP0CMU:
JP0DBL:
	POPJ P,
; Further processing on the connector name for Hex boards:
JP9HEX:
JP9DBL:
	JRST [	TRNN TT,400000
		JRST [	CAIL CHRREG,"A"
			CAILE CHRREG,"Z"
			POPJ P,
			SKIPN CHRREG,L2N-"A"(CHRREG)
			POPJ P,
			LSH CHRREG,=6
			IORI TT,(CHRREG)
			JRST GTCNP2 ]
		CAIE CHRREG,"-"
		POPJ P,
		JRST GTCNP2 ]
JP0HEX:
	JRST [	HRRZM TT,DESTIN
		JRST CPOPJ2 ]
RETJP0:
GTCNP2:	HRRZM TT,DESTIN
	GETNUM
	CAILE T,77
	POPJ P,
	IORM T,DESTIN
	JRST CPOPJ2

>;MD
CSLTLD:
	OUTSTR	[ASCIZ /You should not be able to get here.  CSLTLD: In AUG4.FAI
/]
	JRST ERRET
PADPRT:
	OUTSTR	[ASCIZ /Not implemented..  PADPRT: In AUG4.FAI
/]
	JRST ERRET
RAYDIP:
RAYCON:
	OUTSTR	[ASCIZ /Not implemented.. RAYDIP: or RAYCON: IN AUG4.FAI
/]
	JRST ERRET
;-----------------WIRELISTER CODE STARTS HERE --------------------
MWL,<
^CITYBL:	0		;DIAGONAL INITIALLY!

^DOCITY:
		SETOM CITYBL
		POPJ P,
^NOCITY:
		SETZM CITYBL
		POPJ P,
BEGIN AUGHEX
SUBTTL	CARD DEF -- AUGAT 8136-LG498-49
^^WAUHEX:	-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
	JRST 	CPOPJ;WWINITialization (CPOPJ=POPJ P,)
	JRST MAPRC
	JRST MAPPAD
	JRST PINMAP
	JRST PINBIT
	JRST VGCON
	JRST DSTCLC
	JRST FPWR
	JRST FGND
	JRST PGPRTM
	JRST PGPRNT
	JRST GNDCLR
	JRST WAGGND
	JRST GNDOUT
	JRST VCCOUT
	JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
	JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	0		;NROWS	;YOU CANT DO A UML YET !!
	0		;NCOLS
	0		;NCLPRG
	0		;DIPSLT
	0		;NPADS
	XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
	XWD -0,1	;PADPIN	;# OF PINS PER PIN LETTER
	=4	;FRACTN	;FRACTION OF INCHES RESOLUTION
	=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
	0		;POSTMG	;BARE WIRE AROUND PIN
	0	; NEXTR, whatever that is!!! ROB, AVB - 4-MAY-79
CHECK WAUHEX,WTVLEN
;    AUGHEX
BARELN:	0		;DO NOT INCLUDE BARE WIRE LENGTHS

MAPRC:	TDNE T,[777700,,770000]
	POPJ P,
	HALT .+1
	JRST CPOPJ1

MAPPAD:			;MAP NUMBERS IN T,TT,TTT INTO EDGE PIN NAME (T).
	LSH T,14
	LSH TT,6
	IOR T,TT
	IOR T,TTT
	POPJ P,


;PIN SPECIFICATION IN A
;SIGN BIT (MAPCON) ON IN A MEANS CONNECTOR
;# OF PINS ON THIS DIP IN B
;RETURNS X,Y IN T, BITS IN LEFT HALF TT

PINMAP:PUSHJ P,MAPIT
	JRST PINERR
	JRST CPOPJ1

;JUST BITS INTO TT, ERROR RETURNS 0 BITS
PINBIT:PUSHJ P,MAPIT
	SETZ TT,
	POPJ P,

PINERR:	PUSH P,PUTCHR
	MOVE T,[OUTCHR TTT]
	MOVEM T,PUTCHR
	PUSHJ P,PGPRNT
	POP P,PUTCHR
	OUTSTR [ASCIZ/ Mapping error!
/]
	POPJ P,
;    AUGHEX
MAPIT:	PUSH P,A
	JUMPL A,CONMAP		;IS IT A CONNECTOR PIN?
	PUSHJ P,ABSPIN
	LDB TT,[POINT 6,A,23]	;GET GROUP LETTER
	LDB T,[POINT 6,A,29]	;GET COLUMN LETER
	CAIG TT,3
	CAMN T,L2N-"A"+"Q"
	JRST MAPERR
	SOJL T,MAPERR
	CAML T,(TT)[	400000,,0
			L2N-"A"+"S"
			L2N-"A"+"T"
			L2N-"A"+"S" ]
	JRST MAPERR
	CAML T,L2N-"A"+"Q"
	SUBI T,1
	IMULI T,=300		;.3" SPACING BETWEEN COLUMNS
	ADD T,(TT)[	=300
			=4800+=300
			=10200+=300
		]-1
	LDB TT,[POINT 6,A,35]	;GET ROW NUMBER
	CAIGE T,=600+=300	;COLUMNS AA THROUGH AF?
	CAIL TT,=13		;yes, rows 1-12 do not exist
	CAILE TT,=62
	JRST MAPERR
	SOJL TT,MAPERR
	IMULI TT,=100		;.1" VERTICAL PIN SPACING
	HRLI T,=700(TT)		;ORIGIN SUCH THAT AA01 IS AT 700,,300
	TLNE A,MAPPWR!MAPGND	;IS THIS A VCC OR GND PIN?
	JRST PINPGP		;YES
	SETZ TT,		;NO AUTO GND OR PWR
MAPDON:	AOS -1(P)
MAPERR:	POP P,A
	POPJ P,
;    AUGHEX
CONMAP:	LDB T,[POINT 6,A,23]
	TRZN T,40		;IS IT A DEC PADDLE?
	JRST DECCON		;YES
	CAILE T,=10
	JRST MAPERR
	JUMPE T,MAPERR
	LDB TT,[POINT 12,A,35]	;GET PIN #
	SOJL TT,MAPERR
	IDIVI TT,=13
	SOJG TT,MAPERR
	CAIG T,4
	JRST [	IMULI T,=400
		TDZE TT,TT
		SUBI T,=100
		IMUL TTT,[-=100]
		HRLI T,=800+=700(TTT)
		JRST MAPDON ]
	IMULI TTT,=100
	TDZN TT,TT
	HRLI TTT,=100
	MOVE T,[	0,,=2700+=300
			=400,,=2700+=300
			0,,=6000+=300
			=400,,=6000+=300
			0,,=11100+=300
			=400,,=11100+=300
		]-5(T)
CMAPDN:	ADD T,TTT
	JRST MAPDON
;    AUGHEX
DECCON:	LDB TTT,[POINT 6,A,29]	;GET PADDLE LETTER
	CAIG T,6
	CAMLE TTT,L2N-"A"+"V"
	JRST MAPERR
	SOJL T,MAPERR
	CAME TTT,L2N-"A"+"Q"
	CAMN TTT,L2N-"A"+"G"
	JRST MAPERR
	CAME TTT,L2N-"A"+"R"		;THERE IS A GAP BETWEEN FINGERS S AND T
	CAMN TTT,L2N-"A"+"S"		;AND THERE IS NO FINGER Q
	SUBI TTT,1
	CAML TTT,L2N-"A"+"D"		;THERE IS A GAP BETWEEN FINGERS C AND D
	CAMLE TTT,L2N-"A"+"G"	;AND THERE IS NO FINGER G
	SOJL TTT,MAPERR
	IMULI TTT,=100
	LDB TT,[POINT 6,A,35]
	SOJL TT,MAPERR
	SOJG TT,MAPERR
	TDZE TT,TT
	HRLI TTT,=200
	CAIN TTT,0		;FINGER A2?
	TLO TT,PWR		;YES, IT IS Vcc
	CAIE TTT,=200		;FINGER C2
	CAMN TTT,[=200,,=1700]	;OR T1?
	TLO TT,GND		;YES, IT IS GND
	MOVE T,(T)[	=6500+=700,,0
			=6500+=700,,=2700
			=6500+=700,,=5300
			=6500+=700,,=8000
			=6500+=700,,=10500
			=6500+=700,,=13300 ]
	JRST CMAPDN

PINPGP:	TLNN A,MAPPWR		;POWER?
	SKIPA TT,[GND,,0]
	MOVSI TT,PWR
	ADDI T,=100		;OVER .1"
	JRST MAPDON

VGCON:	POPJ P,	;FOR NOW
;    AUGHEX
; ABSPIN
;
; This routine takes as inputs:
;   a dip location (in RH of A)
;   a pin number (part of the LH of A)
;   the number of pins on this dip (in B)
;
; The routine calulates where on the board the indicated pin really is,
; and returns the "absolute location" of that pin in A.
;
; call:
;	MOVE A,[flags,,group-slot-pin]
;	MOVEI B,<number of pins on this dip>
;	PUSHJ P,ABSPIN
;	(returns here with A appropriately munged to indicate the specified pin)
;
ABSPIN:
	JUMPL A,CPOPJ		;DON'T TOUCH CONNECTOR PINS
	LDB TT,[POINT 6,A,17]	;GET THE PIN NUMBER
	TLZ A,77		; turn off flag bits in LH(?)
	SOJLE TT,CPOPJ		;NORMALIZE, GET OUT IF ALREADY ABSOLUTE
; TT has pin number, range from [0:maxpin-1]
	LDB T,[POINT 6,A,29]	;GET COLUMN LETTER
	ASH TT,1		;DOUBLE PIN NUMBER
	CAIGE TT,(B)		;FIRST SIDE?
	JRST SIDEOK		;YES
	CAML T,L2N-"A"+"Q"		;THERE IS NO Q COLUMN
	SUBI T,1
	CAIL B,=23		;DIP HAVE 23 OR MORE PINS?
	SUBI T,1		;YES, OVER ONE EXTRA
	SOJG T,GRPOK
	ADDI T,=16		;FUDGE OVER TO NEXT GROUP
	HRRI A,-1B23(A)
	TRNN A,1B23		;DID WE MOVE INTO GROUP B??
	ADDI T,2		;YES, IT IS WIDER THAN THE REST
GRPOK:	CAML T,L2N-"A"+"Q"		;ADD Q COLUMN BACK IN
	ADDI T,1
	DPB T,[POINT 6,A,29]
	SUBM B,TT		;GET CORRECT PIN #
	ADDI TT,-2(B)
SIDEOK:	ASH TT,-1
	ADDI A,(TT)
	POPJ P,
;    AUGHEX
;FIND POWER AND GROUND PINS
FPWR:
	PUSHJ P,ABSPIN	;FIND THE ABSOLUTE PIN NUMBER ON THE BOARD
	AOJL A,FPWRC	;JUMP IF IT IS A DEC EDGE CONECTOR OR SCOTCH FLEX JACK
	TRZ A,7		;ROUND TO NEAREST MULTIPLE OF 8+2 IN ODD COLUMN
;;;	ADDI A,2	;This ADDI is distributed in the next two SUBI's
	TRNN A,2000	;COLUMN R, S, or T?
	SUBI A,100-2	;if yes the ADDI A,100 and SUBI A,100 would cancel
	TRO A,100
	TRNE A,2000	;COLUMN R, S, or T?
	SUBI A,100-2	;yes, fudge back
	TLO A,MAPPWR
	TRNE A,767060	;did we get AA10,AB10,AC10,AD10,AE10, or AF10?
	POPJ P,		;Certainly not
	TRC A,700
	TRCE A,700	;Watch out for AG10, which is OK
	ADDI A,=8	;yes, change to pin 18, since pin 10 does not exist
	POPJ P,
FGND:
	PUSHJ P,ABSPIN	;FIND THE ABSOLUTE PIN NUMBER ON THE BOARD
	AOJL A,FGNDC	;JUMP IF IT IS AN DEC EDGE CONECTOR OR SCOTCH FLEX JACK
	TRZ A,7		;ROUND TO NEAREST MULTIPLE OF 8+2 IN ODD COLUMN
;;;	ADDI A,2	;This ADDI is distributed in the next two SUBI's
	TRNN A,2000	;COLUMN R, S, or T?
	SUBI A,100-2	;if yes the ADDI A,100 and SUBI A,100 would cancel
	TRO A,100
	TRNE A,2000	;COLUMN R, S, or T?
	SUBI A,100-2	;yes, fudge back

	ADDI A,4
		TLO A,MAPGND
		POPJ P,
;    AUGHEX
IFN 0,<;The following code hooks all GND and MAINV voltages together
;in a given jack, but doesn't connect them to anything!!!!!!!
>;IFN 0
;SCOTCH FLEX CONNECTORS POWER AND GROUND'S ARE TREATED LIKE ANY
;OTHER POWER OR GROUND.
;DEC paddles are wired to the appropriate power/gnd fingers, however.

FPWRC:	TLNE A,40B23		;DEC PADDLE?
	JRST FPWRSF		;(SCOTCH FLEX)
	TRZ A,7777		;(DEC EDGE CONNECTOR)
	LSH A,-6
	IOR A,L2N-"A"+"A"
	LSH A,6
	IOR A,[MAPPWR,,2]
	POPJ P,
FGNDC:	TLNE A,40B23		;DEC PADDLE?
	JRST FGNDSF		;(SCOTCH FLEX)
	LDB T,[POINT 6,A,29]
	TRZ A,7777
	CAMG T,L2N-"A"+"K"	;WHICH IS THE CLOSER GND -T1 OR -C2
	JRST MAPC2		;-C2 IS CLOSER
	LSH A,-6		;-T1 IS CLOSER
	IOR A,L2N-"A"+"T"
	LSH A,6
	IOR A,[MAPGND,,1]
	POPJ P,
MAPC2:	LSH A,-6
	IOR A,L2N-"A"+"C"
	LSH A,6
	IOR A,[MAPGND,,2]
	POPJ P,

FPWRSF:	LDB A,[POINT 4,A,23]	;GET JUST THE JACK NUMBER
	MOVE A,FPWRST(A)	;TABLE LOOK UP THE APPROPRIATE BOARD PIN
	POPJ P,

FGNDSF:	LDB A,[POINT 4,A,23]	;GET JUST THE JACK NUMBER
	MOVE A,FGNDST(A)	;TABLE LOOK UP THE APPROPRIATE BOARD PIN
	POPJ P,

FPWRST:	0,,0	;NO 0 JACK	;TABLE FOR FINDING SCOTCH FLEX'S A BOARD PWR
	MAPPWR,,010120		;J1 _ AA18-V
	MAPPWR,,010320		;J2 _ AC18-V
	MAPPWR,,010520		;J3 _ AE18-V
	MAPPWR,,010702		;J4 _ AG02-V
	MAPPWR,,011302		;J5 _ AL02-V
	MAPPWR,,011502		;J6 _ AL02-V
	MAPPWR,,020702		;J7 _ BG02-V
	MAPPWR,,021102		;J8 _ BJ02-V
	MAPPWR,,030502		;J9 _ CE02-V
	MAPPWR,,030702		;J10 _ CG02-V

FGNDST:	0,,0	;NO 0 JACK	;TABLE FOR FINDING SCOTCH FLEX'S A BOARD GND
	MAPGND,,010116		;J1 _ AA14-G
	MAPGND,,010316		;J2 _ AC14-G
	MAPGND,,010516		;J3 _ AE14-G
	MAPGND,,010706		;J4 _ AG06-G
	MAPGND,,011306		;J5 _ AL06-G
	MAPGND,,011506		;J6 _ AN06-G
	MAPGND,,020706		;J7 _ BG06-G
	MAPGND,,021106		;J8 _ BJ06-G
	MAPGND,,030506		;J9 _ CE06-G
	MAPGND,,030706		;J10 _ CG06-G
;    AUGHEX
PGPRNT:
	PUSH P,A
	JUMPL A,PGCPNT
	TLNE A,MAPPWR!MAPGND
	JRST PGPRPG
	PUSHJ P,LOCPIN
	POP P,A
	POPJ P,

PGPRTM:
	PUSH P,A
	JUMPL A,PGCPNT
	TLNE A,MAPPWR!MAPGND
	JRST PGPRPG
	PUSHJ P,LOCPNM		;PRINT ABSOLUTE PIN LOCATION
	POP P,A
	POPJ P,

PGPRPG:	PUSHJ P,LOCOUT
	POP P,A
	PUTBYT "-"
	TLNE A,MAPPWR
	PUTBYT "V"
	TLNE A,MAPGND
	PUTBYT "G"
	POPJ P,

PGCPNT:	HRLI A,(A)
	TLZ A,MAPCON
	TRZ A,7777
	PUSHJ P,LOCPNC
	POP P,A
	POPJ P,

;    AUGHEX
SUBTTL	DISTANCE CALCULATOR FOR ROUTER STUFF
;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G


DSTCLC:
NRMLDST:
	PUSHJ P,PINMAP		;MAP ONE OF THEM
	JRST DSTERR
	MOVE A,C		;GET OTHER POINT
	MOVE B,D
	MOVE C,T		;SAVE X,Y
	PUSHJ P,PINMAP
	JRST DSTERR
	HLRE TT,T
	HLRE TTT,C
	SUB TT,TTT		;GET VERTICAL DISTANCE
	HRRE T,T
	HRRE C,C
	SUB T,C			;HORIZONTAL DISTANCE
	SKIPGE CITYBL		;CITY BLOCK WIRING?
	JRST [	MOVM T,T	;YES, GET ABSOLUTE VALUES
		MOVM TT,TT
		ADD T,TT
		JRST GOTDST ]
	IMUL TT,TT		;SQUARE VERTICAL DISTANCE
	IMUL T,T		;SQUARE HORIZONTAL DISTANCE
	ADD T,TT
	JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGTH RUNS
	PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
GOTDST:	CAILE T,=8000		;LONGER THAN 8 INCHES?
	ADDI T,=250		;YES, ADD 1/4 INCH
	ADD T,BARELN		;ADD THE BARE WIRE AT EACH END, IF WANTED
	ADD T,WRAPMG		;ADD SOME INSULATION TO GO AROUND THE PINS
	IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
	IDIVI T,=1000		; "		"		"
	SKIPE TT		;REMAINDER?
	ADDI T,1		;YES, ROUND UP
DSTIS0:	MOVE G,T
	POPJ P,

DSTERR:	SETZ G,
	POPJ P,

;    AUGHEX
GNDCLR:OUTSTR[ASCIZ/24 pin dips not yet implemented!
/]
	POPJ P,

WAGGND:
GNDOUT:
VCCOUT:
	OUTSTR[ASCIZ/Not supported for universal Augat boards!!
/]
	POPJ P,

LOCPNM:		;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	PUSH P,T
	PUSHJ P,ABSPIN
	PUSHJ P,LOCOUT
	POP P,T
	POPJ P,
BEND AUGHEX
BEGIN AUGAT

	STORAGE(LOW)
CONMAP:	0	;USED IN BOARD INITIALIZATION FOR AUGU1 , AUGU6 AND AUGCMU
	STORAGE(PURE)

BEGIN AUGU1
SUBTTL	CARD DEF -- AUGAT 8136-U1
^^WAUGU1:
	-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
	JRST WWINIT	;WWINITialization
	JRST MAPRC
	JRST MAPPAD
	JRST PINMAP
	JRST PINBIT
	JRST VGCON
	JRST DSTCLC
	JRST FPWR
	JRST FGND
	JRST PGPRTM
	JRST PGPRNT
	JRST GNDCLR
	JRST WAGGND
	JRST GNDOUT
	JRST VCCOUT
	JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
	JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	0		;NROWS	;YOU CANT DO A UML YET !!
	0		;NCOLS
	0		;NCLPRG
	0		;DIPSLT
	6		;NPADS=JACKS PER GROUP(=1)*NUMBER OF GROUPS(=6)
	XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
	XWD -=46,1	;PADPIN	;# OF PINS PER PIN LETTER
	=4		;FRACTN	;FRACTION OF INCHES RESOLUTION
	=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
	0		;POSTMG	;BARE WIRE AROUND PIN
	0	; NEXTR, whatever that is!!! ROB, AVB - 4-MAY-79
CHECK WAUGU1,WTVLEN

WWINIT:	MOVE T,[JRST CONMP]
	MOVEM T,CONMAP
	POPJ P,

CONMP:	
; [JN11] I have a suspicion that the interface changed
;	 and this code was never updated to follow it!
;	 if you get Mapping Error! for connectors at this
;	 point, try adding the instruction
;	LDB T,[POINT 6,A,23]
;	 and see if they go away.  I can't find anywhere where
;	 T is properly loaded, but linear search of the entire
;	 awful control structure of this module is probably
;	 a waste of my time
	LDB T,[POINT 6,A,23]
	CAILE T,6		;ONLY 6 CONNECTERS ON THE BOARD
	JRST PINERR
	IMULI T,=2700		;2.7" BETWEEN SECTIONS (,JACKS)
	LDB TT,[POINT 6,A,35]	;GET PIN #
	SOJL TT,MAPERR
	IDIVI TT,=23	;E=HALF THE NUMBER OF PINS IN THE JACK
	SOJG TT,MAPERR
	TDZN TT,TT
	HRLI T,=300	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
	IMULI TTT,=100
	SUBI T,2414	;E=-<<<JPINS/2>-1>*100+JOFF2-=2700>(TTT)  WHERE
			;	JPINS=PINS IN A JACK= =46
			;	JOFF2=OFFSET OF JACK FROM COLUMN A= =0
	JRST MAPDON

BEND AUGU1
BEGIN AUGU6
SUBTTL	CARD DEF -- AUGAT 8136-U6
^^WAUGU6:
	-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
	JRST WWINIT	;WWINITialization
	JRST MAPRC
	JRST MAPPAD
	JRST PINMAP
	JRST PINBIT
	JRST VGCON
	JRST DSTCLC
	JRST FPWR
	JRST FGND
	JRST PGPRTM
	JRST PGPRNT
	JRST GNDCLR
	JRST WAGGND
	JRST GNDOUT
	JRST VCCOUT
	JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
	JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	0		;NROWS	;YOU CANT DO A UML YET !!
	0		;NCOLS
	0		;NCLPRG
	0		;DIPSLT
	=12		;NPADS=JACKS PER GROUP(=2)*NUMBER OF GROUPS(=6)
	XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
	XWD -=26,1	;PADPIN	;# OF PINS PER PIN LETTER
	=4	;FRACTN	;FRACTION OF INCHES RESOLUTION
	=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
	0		;POSTMG	;BARE WIRE AROUND PIN
	0	; NEXTR, whatever that is!!! ROB, AVB - 4-MAY-79
CHECK WAUGU6,WTVLEN

WWINIT:	MOVE T,[JRST CONMP]
	MOVEM T,CONMAP
	POPJ P,

CONMP:	
; [JN11] I have a suspicion that the interface changed
;	 and this code was never updated to follow it!
;	 if you get Mapping Error! for connectors at this
;	 point, try adding the instruction
;	LDB T,[POINT 6,A,23]
;	 and see if they go away.  I can't find anywhere where
;	 T is properly loaded, but linear search of the entire
;	 awful control structure of this module is probably
;	 a waste of my time
	LSH T,-1		;GET GROUP
	CAILE T,6		;ONLY 6 CONNECTERS ON THE BOARD
	JRST PINERR
	IMULI T,=2700		;2.7" BETWEEN SECTIONS (,JACKS)
	LDB TT,[POINT 6,A,35]	;GET PIN #
	SOJL TT,MAPERR
	IDIVI TT,=13	;E=HALF THE NUMBER OF PINS IN THE JACK
	SOJG TT,MAPERR
	TDZN TT,TT
	HRLI T,=100	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
	TRNE A,10000
	SUB T,[<-=300>,,<=2700/2>]
	IMULI TTT,=100
	SUBI T,4150(TTT)	;E=-<<<JPINS/2>-1>*100+JOFF2-=2700>  WHERE
				;	JPINS=PINS IN A JACK= =26
				;	JOFF2=OFFSET OF JACK FROM COLUMN A= =500
	JRST MAPDON
BEND AUGU6
BEGIN AUGDBL
SUBTTL  Card Def -- Augat 8136-UG157
^^WAUDBL:
	-1		; is a WW board
	JRST	WWINIT
	JRST	MAPRC
	JRST MAPPAD
	JRST PINMAP
	JRST PINBIT
	JRST VGCON
	JRST DSTCLC
	JRST FPWR
	JRST FGND
	JRST PGPRTM
	JRST PGPRNT
	JRST GNDCLR
	JRST WAGGND
	JRST GNDOUT
	JRST VCCOUT
	JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
	JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	0		;NROWS	;YOU CANT DO A UML YET !!
	0		;NCOLS
	0		;NCLPRG
	0		;DIPSLT
	=2		;NPADS=JACKS PER GROUP(=1)*NUMBER OF GROUPS(=2)
	XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
	XWD -=26,1	;PADPIN	;# OF PINS PER PIN LETTER
	=4		;FRACTN	;FRACTION OF INCHES RESOLUTION
	=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
	0		;POSTMG	;BARE WIRE AROUND PIN
	0	; NEXTR, whatever that is!!! ROB, AVB - 4-MAY-79
CHECK WAUDBL,WTVLEN

WWINIT:	MOVE T,[JRST CONMP]
	MOVEM T,CONMAP
	POPJ P,

CONMP:	
;	This LDB wasn't in any of the other code, but I
;	believe it is the right thing [JN11]
	LDB	T,[POINT 6,A,23]
	LSH T,-=13		;Get group/2
	CAIL T,2		;ONLY 2 CONNECTERS ON THE BOARD
				; so only values/2 are 0,1
	JRST PINERR		; if other, lose big
	IMULI T,=2400		;2.4" BETWEEN SECTIONS (,JACKS)
	LDB TT,[POINT 6,A,35]	;GET PIN #
	SOJL TT,MAPERR		; normalize to 0, should not be 0 already
	IDIVI TT,=13	;E=HALF THE NUMBER OF PINS IN THE JACK
			; this is the multiplier for the inter-row
			; distance
	SOJG TT,MAPERR  ; it better be either 0 or 1 
			; pins [1..13] compute [0..12]/13 = 0
			; pins [14..26] compute [13..25]/13 = 1
	TDZN TT,TT	; hack --- clear TT, skip if already zero
				; same as
				; SKIPE  TT
				; next instr
				; SETZ	TT,
			; don't know why this was done at all!!! [JN11]
	HRLI T,=100	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
	IMULI TTT,=100	; TTT = TT+1, so this is the remainder
			; from the IDIVI above, computes the
			; horizontal distance in the jack
	ADDI	TTT,-=1200	; complement of distance
	ADDI	T,TTT		; add to basic jack offset
;
;	(0,0)
;
;		(200,700)
;		13 ............. 1    13 ............. 1
;		26 ............. 14   26 ............. 14
;
;
;	A01 B01 C01
;	(700,300)
;
;	Y -----@
;
;	X
;	|
;	v
;
	JRST MAPDON
;    AUGDBL
;
;	Input:
;		A - encoded pin descriptor
;
;	Output:
;		TT - "PWR",,0
;		     "GND",,0
;			 0,,0
;
;		T:	row,,column
;			i.e.,
;				X,,Y ---@
;				|
;				v
;
MAPIT:	PUSH	P,A		; save encoded value
	JUMPL	A,CONMAP	; connector pin?
	PUSHJ	P,ABSPIN	; no, fix it to absolute
	LDB	T,[POINT 6,A,23]	; get column letter
	CAMLE	T,L2N-"A"+"S"		; too big?
	JRST	MAPERR			; yes, no greater than "S"
	SOJL	T,MAPERR		; normalize to zero-base;
					; if already 0, error
	IMULI	T,=300			; .3" spacing between columns
	LDB	TT,[POINT 6,A,35]	; get pin #
	SOJL	TT,MAPERR		; if zero, error; else 0-based
	IMULI	TT,=100			; .1" between rows

;	normalize to board origin @ 700,,300
	ADDI	T,=300
	HRLI	T,=700(TT)		; add & stor in LHS
	TLNE	A,MAPPWR!MAPGND		; power run of any sort?
	JRST	PINPGP			; yes, go handle it
	SETZ	TT,
	POP	P,A			; restore A
	JRST	CPOPJ1			; skipreturn OK
MAPERR:	POP	P,A			; restore A
	POPJ	P,			; nonskip loses
;    AUGDBL
PINMAP:	PUSHJ	P,MAPIT
	JRST	PINERR
	JRST	CPOPJ1

PINBIT:	PUSHJ	P,MAPIT
	SETZ	TT,
	POPJ	P,

PINERR:	PUSH	P,PUTCHR
	MOVE	T,[OUTCHR TTT]
	MOVEM	T,PUTCHR
	PUSHJ	P,PGPRNT
	POP	P,PUTCHR
	OUTSTR	[ASCIZ / Mapping error!
/]
	POPJ	P,
LOCPNM:		;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	PUSH P,T
	PUSHJ P,ABSPIN
	PUSHJ P,LOCOUT
	POP P,T
	POPJ P,
;    AUGDBL
; ABSPIN computes the absolute board position of an encoded pin
;	Input conditions:
;		A - encoded pin
;		B - number of pins in this DIP boy
;	Output conditions:
;		A - encoded absolute pin position
;			column letter will be updated
;			pin # in LHS will be 0

ABSPIN:	JUMPL	A,CPOPJ		; return if connector pin
	LDB	TT,[POINT 6,A,17]	; get the pin number from LHS
	TLZ	A,77			; and remove from input argument
	SOJLE	TT,CPOPJ		; normalize to 0-base
					; get out if it was already
					; in absolute format
	LDB	T,[POINT 6,A,23]	; Get column letter of "L#"
	
; sleazy hack: pin is on LHS if it is gtr dip-pins/2 which is the
;	       same as 2*pin gtr dip-pins

	ASH	TT,1			; 2*pin
	CAIGE	TT,(B)			; gtr dip-pins
	JRST	SIDEOK			; yes, use true pin #

; otherwise compute new pin offset

	CAML	T,L2N-"A"+"Q"		; no row Q
	SUBI	T,1			; fake it
	CAIL	B,=23			; gtr 23 pins?
	ADDI	T,1			; yes, move over one more
	ADDI	T,1			; move to next column
	CAML	T,L2N-"A"+"Q"		; did we land in Q
	ADDI	T,1			; likewise, fake it out
	DPB	T,[POINT 6,A,23]	; put back new column position
	SUBM	B,TT			; get correct pin #
					; by computing dip-pins - 2*pin 
					; except "pin" is normalized,
					; so we compute - 2*(pin+1)
					; or - 2*pin - 2
	ADDI	TT,-2(B)		; ...
SIDEOK:	ASH	TT,-1			; undo *2 from above
	ADDI	A,(TT)			; put back into encoded pin #
	POPJ	P,			; and we are done (whew!)
;    AUGDBL
SUBTTL	DISTANCE CALCULATOR FOR ROUTER STUFF
;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G


DSTCLC:
NRMLDST:
	PUSHJ P,PINMAP		;MAP ONE OF THEM
	JRST DSTERR
	MOVE A,C		;GET OTHER POINT
	MOVE B,D
	MOVE C,T		;SAVE X,Y
	PUSHJ P,PINMAP
	JRST DSTERR
	HLRE TT,T
	HLRE TTT,C
	SUB TT,TTT		;GET VERTICAL DISTANCE
	HRRE T,T
	HRRE C,C
	SUB T,C			;HORIZONTAL DISTANCE
	SKIPGE CITYBL		;CITY BLOCK WIRING?
	JRST [	MOVM T,T	;YES, GET ABSOLUTE VALUES
		MOVM TT,TT
		ADD T,TT
		JRST GOTDST ]
	IMUL TT,TT		;SQUARE VERTICAL DISTANCE
	IMUL T,T		;SQUARE HORIZONTAL DISTANCE
	ADD T,TT
	JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGTH RUNS
	PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
GOTDST:	CAILE T,=8000		;LONGER THAN 8 INCHES?
	ADDI T,=250		;YES, ADD 1/4 INCH
	ADD T,BARELN		;ADD THE BARE WIRE AT EACH END, IF WANTED
	ADD T,WRAPMG		;ADD SOME INSULATION TO GO AROUND THE PINS
	IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
	IDIVI T,=1000		; "		"		"
	SKIPE TT		;REMAINDER?
	ADDI T,1		;YES, ROUND UP
DSTIS0:	MOVE G,T
	POPJ P,

DSTERR:	SETZ G,
	POPJ P,

GNDCLR:OUTSTR[ASCIZ/24 pin dips not yet implemented!
/]
	POPJ P,
;    AUGDBL
;FIND POWER PINS

FPWR:
	JUMPL A,FPWRC		; if connector pin, wire together
	PUSHJ P,ABSPIN		; find out where it is
	ADDI A,4
	TRZ A,10000!7		;Round to nearest multiple of 8 in even column
				; ("even" in 0-based co-ordinates)
	TRNN A,77		;PIN 0?
	TRO A,=8		;YES, GO TO PIN 8.
	TRNN A,770000		;WERE WE IN COLUMN A?
	TRO A,20000		;YES, GO TO COLUMN B.
	TLO Q,MAPPWR		; set the flag in this descriptor
	POPJ P,

;The following code hooks all MAINV voltages together
;in a given jack, but doesn't connect them to anything!!!!!!!
FPWRC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
	IOR A,[MAPPWR,,0]
	POPJ P,

;FIND GROUND PINS

FGND:
	JUMPL A,FGNDC
	PUSHJ P,ABSPIN
	ADDI A,4
	TRZ A,100!7		;ROUND TO NEAREST MULTIPLE OF 8 IN EVEN COLUMN
	TRNN A,77		;PIN 0?
	TRO A,=8		;YES, GO TO PIN 8.
	TRNN A,770000		;WERE WE IN COLUMN A?
	TRO A,20000		;YES, GO TO COLUMN B.
	SUBI A,4		; now, shift back to G pins
	TLO A,MAPGND		; set the GND flag in this descriptor
	POPJ P,

;The following code hooks all GND voltages together
;in a given jack, but doesn't connect them to anything!!!!!!!
FGNDC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
	IOR A,[MAPGND,,0]
	POPJ P,
;    AUGDBL
PGPRNT:
	PUSH P,A
	JUMPL A,PGCPNT
	TLNE A,MAPPWR!MAPGND
	JRST PGPRPG
	PUSHJ P,LOCPIN
	POP P,A
	POPJ P,

PGPRTM:
	PUSH P,A
	JUMPL A,PGCPNT
	TLNE A,MAPPWR!MAPGND
	JRST PGPRPG
	PUSHJ P,LOCPNM
	POP P,A
	POPJ P,

PGPRPG:	PUSHJ P,LOCOUT
	POP P,A
	PUTBYT "-"
	TLNE A,MAPPWR
	PUTBYT "V"
	TLNE A,MAPGND
	PUTBYT "G"
	POPJ P,

PGCPNT:	HRLI A,(A)
	TLZ A,MAPCON
	TRZ A,7777
	PUSHJ P,LOCPNC
	POP P,A
	POPJ P,

BEND AUGDBL
BEGIN AUGCMU
SUBTTL	CARD DEF -- AUGAT AX118-75-[G]
^^WAUCMU:
	-1		;ISWW  WIRE WRAP BOARD (0=PC BOARD)
	JRST WWINIT	;WWINITialization
	JRST MAPRC
	JRST MAPPAD
	JRST PINMAP
	JRST PINBIT
	JRST VGCON
	JRST DSTCLC
	JRST FPWR
	JRST FGND
	JRST PGPRTM
	JRST PGPRNT
	JRST GNDCLR
	JRST WAGGND
	JRST GNDOUT
	JRST VCCOUT
	JRST RAYDIP		;GOES TO AN ERROR MESSAGE. (THIS IS RAYGEN.)
	JRST LOCPNM	;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	0		;NROWS	;YOU CANT DO A UML YET !!
	0		;NCOLS
	0		;NCLPRG
	0		;DIPSLT
	=12		;NPADS=JACKS PER GROUP(=2)*NUMBER OF GROUPS(=6)
	XWD 1,0		;PADLET	;# OF PIN LETTERS PER PAD
	XWD -=34,1	;PADPIN	;# OF PINS PER PIN LETTER
	=4		;FRACTN	;FRACTION OF INCHES RESOLUTION
	=200*2		;WRAPMG	;.2" INSULATION AROUND EACH PIN
	0		;POSTMG	;BARE WIRE AROUND PIN
	0	; NEXTR, whatever that is!!! ROB, AVB - 4-MAY-79
CHECK WAUCMU,WTVLEN

WWINIT:	MOVE T,[JRST CONMP]
	MOVEM T,CONMAP
	POPJ P,

CONMP:	LSH T,-1		;GET GROUP
	CAILE T,6		;ONLY 6 CONNECTERS ON THE BOARD
	JRST PINERR
	IMULI T,=2700		;2.7" PER BETWEEN SECTIONS (,JACKS)
	LDB TT,[POINT 6,A,35]	;GET PIN #
	SOJL TT,MAPERR
	IDIVI TT,=17	;E=HALF THE NUMBER OF PINS IN THE JACK
	SOJG TT,MAPERR
	TDZN TT,TT
	HRLI T,=100	;E=DISTANCE BETWEEN ROW 1 AND ROW 2 OF A JACK
	TRNE A,10000
	SUB T,[<-=300>,,<=2700/2>]
	IMULI TTT,=100
	SUBI T,4440(TTT)	;E=-<<<JPINS/2>-1>*100+JOFF2-=2700>  WHERE
				;	JPINS=PINS IN A JACK= =34
				;	JOFF2=OFFSET OF JACK FROM COLUMN A= =300
	JRST MAPDON
BEND AUGCMU

BARELN:	0	;DO NOT INCLUDE BARE WIRE LENGTHS
;AUGU1, AUGU6, and AUGCMU
SUBTTL		CARD DEFINITIONS FOR AUGU1, AUGU6, AND AUGCMU
MAPRC:	TDNE T,[777700,,770000]
	POPJ P,
	HALT .+1
	JRST CPOPJ1

MAPPAD:			;MAP NUMBERS IN T,TT,TTT INTO EDGE PIN NAME (T).
	LSH T,14
	LSH TT,6
	IOR T,TT
	IOR T,TTT
	POPJ P,
;AUGU1, AUGU6, and AUGCMU
;PIN SPECIFICATION IN A
;SIGN BIT (MAPCON) ON IN A MEANS CONNECTOR
;# OF PINS ON THIS DIP IN B
;RETURNS X,Y IN T, BITS IN LEFT HALF TT

PINMAP:PUSHJ P,MAPIT
	JRST PINERR
	JRST CPOPJ1
;JUST BITS INTO TT, ERROR RETURNS 0 BITS
PINBIT:PUSHJ P,MAPIT
	SETZ TT,
	POPJ P,

PINERR:	PUSH P,PUTCHR
	MOVE T,[OUTCHR TTT]
	MOVEM T,PUTCHR
	PUSHJ P,PGPRNT
	POP P,PUTCHR
	OUTSTR [ASCIZ/ Mapping error!
/]
	POPJ P,
MAPIT:	PUSH P,A
	PUSHJ P,ABSPIN
	LDB T,[POINT 6,A,23]	;GET GROUP LETTER
	JUMPL A,CONMAP		;IS IT A CONNECTOR PIN?
	CAILE T,6		;ONLY 6 SECTIONS ON BOARD
	JRST MAPERR
	JUMPE T,MAPERR
	IMULI T,=2700		;2.7" SPACING BETWEEN GROUPS
	LDB TT,[POINT 6,A,29]	;GET COLUMN LETTER
	CAILE TT,=9
	JRST MAPERR
	SOJL TT,MAPERR
	IMULI TT,=300		;.3" SPACING BETWEEN COLUMNS
	ADDI T,-=2700(TT)
	LDB TT,[POINT 6,A,35]	;GET ROW NUMBER
	CAILE TT,=50
	JRST MAPERR
	SOJL TT,MAPERR
	IMULI TT,=100		;.1" VERTICAL PIN SPACING
	HRLI T,=800(TT)		;ORIGIN SUCH THAT AA01 IS AT 800,,0
	TLNE A,MAPPWR!MAPGND	;IS THIS A VCC OR GND PIN?
	JRST PINPGP		;YES
	SETZ TT,		;NO AUTO GND OR PWR
MAPDON:	AOS -1(P)
MAPERR:	POP P,A
	POPJ P,
;AUGU1, AUGU6, and AUGCMU
PINPGP:	TLNN A,MAPPWR		;POWER?
	SKIPA TT,[GND,,0]
	MOVSI TT,PWR
	ADDI T,=100		;OVER .1"
	JRST MAPDON

VGCON:	POPJ P,		;FOR NOW
;AUGU1, AUGU6, and AUGCMU
ABSPIN:
	JUMPL A,CPOPJ		;DON'T TOUCH CONNECTOR PINS
	LDB TT,[POINT 6,A,17]	;GET THE PIN NUMBER
	TLZ A,77
	SOJLE TT,CPOPJ		;NORMALIZE, GET OUT IF ALREADY ABSOLUTE
	LDB T,[POINT 6,A,29]	;GET COLUMN LETTER
	ASH TT,1		;DOUBLE PIN NUMBER
	CAIGE TT,(B)		;FIRST SIDE?
	JRST SIDEOK		;YES
	ADDI T,1		;NO, NEXT COLUMN
	CAIL B,=23		;DIP HAVE 23 OR MORE PINS?
	ADDI T,1		;YES, FUDGE ONE MORE COLUMN
	CAIG T,=9		;OVERFLOW INTO NEXT GROUP?
	JRST GRPOK		;NO
	SUBI T,=9		;YES, FIX THINGS UP
	HRRI A,1B23(A)		;INCLUDING THE GROUP
GRPOK:	DPB T,[POINT 6,A,29]
	SUBM B,TT		;GET CORRECT PIN #
	ADDI TT,-2(B)
SIDEOK:	ASH TT,-1
	ADDI A,(TT)
	POPJ P,
;AUGU1, AUGU6, and AUGCMU
;FIND POWER PINS

FPWR:
	JUMPL A,FPWRC		; Jump if this is a connector
	PUSHJ P,ABSPIN		; generate the absolute pin loc on the board
	ADDI A,4
	TRZ A,100!7		;ROUND TO NEAREST MULTIPLE OF 8 IN EVEN COLUMN
	TRNN A,77		;PIN 0?
	TRO A,=8		;YES, GO TO PIN 8.
	TRNN A,7700		;WERE WE IN COLUMN A?
	TRO A,200		;YES, GO TO COLUMN B.
	TLO A,MAPPWR		; turn on the PWR flag bit
	POPJ P,

;The following code hooks all MAINV voltages together
;in a given jack, but doesn't connect them to anything!!!!!!!
FPWRC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
	IOR A,[MAPPWR,,0]	; couldn't this be TLO A,MAPPWR? (ROB Aug-80)
	POPJ P,

;FIND GROUND PINS

FGND:
	JUMPL A,FGNDC
	PUSHJ P,ABSPIN
	ADDI A,4
	TRZ A,100!7		;ROUND TO NEAREST MULTIPLE OF 8 IN EVEN COLUMN
	TRNN A,77		;PIN 0?
	TRO A,=8		;YES, GO TO PIN 8.
	TRNN A,7700		;WERE WE IN COLUMN A?
	TRO A,200		;YES, GO TO COLUMN B.
	SUBI A,4
		TLO A,MAPGND
		POPJ P,

;The following code hooks all GND voltages together
;in a given jack, but doesn't connect them to anything!!!!!!!
FGNDC:	LDB A,[POINT 6,A,23]	;GET JUST THE JACK NUMBER
	IOR A,[MAPGND,,0]
	POPJ P,
;AUGU1, AUGU6, and AUGCMU
PGPRNT:
	PUSH P,A
	JUMPL A,PGCPNT
	TLNE A,MAPPWR!MAPGND
	JRST PGPRPG
	PUSHJ P,LOCPIN
	POP P,A
	POPJ P,

PGPRTM:
	PUSH P,A
	JUMPL A,PGCPNT
	TLNE A,MAPPWR!MAPGND
	JRST PGPRPG
	PUSHJ P,LOCPNM
	POP P,A
	POPJ P,

PGPRPG:	PUSHJ P,LOCOUT
	POP P,A
	PUTBYT "-"
	TLNE A,MAPPWR
	PUTBYT "V"
	TLNE A,MAPGND
	PUTBYT "G"
	POPJ P,

PGCPNT:	HRLI A,(A)
	TLZ A,MAPCON
	TRZ A,7777
	PUSHJ P,LOCPNC
	POP P,A
	POPJ P,

;AUGU1, AUGU6, and AUGCMU
SUBTTL	DISTANCE CALCULATOR FOR ROUTER STUFF
;CALLS WITH ONE PIN IN A,B OTHER IN C,D RETURNS DISTANCE IN G


DSTCLC:
NRMLDST:
	PUSHJ P,PINMAP		;MAP ONE OF THEM
	JRST DSTERR
	MOVE A,C		;GET OTHER POINT
	MOVE B,D
	MOVE C,T		;SAVE X,Y
	PUSHJ P,PINMAP
	JRST DSTERR
	HLRE TT,T
	HLRE TTT,C
	SUB TT,TTT		;GET VERTICAL DISTANCE
	HRRE T,T
	HRRE C,C
	SUB T,C			;HORIZONTAL DISTANCE
	SKIPGE CITYBL		;CITY BLOCK WIRING?
	JRST [	MOVM T,T	;YES, GET ABSOLUTE VALUES
		MOVM TT,TT
		ADD T,TT
		JRST GOTDST ]
	IMUL TT,TT		;SQUARE VERTICAL DISTANCE
	IMUL T,T		;SQUARE HORIZONTAL DISTANCE
	ADD T,TT
	JUMPE T,DSTIS0		;DON'T WASTE TIME ON 0 LENGTH RUNS
	PUSHJ P,SQRT		;SQUARE ROOT = HYPOTENEUSE (?SP?)
GOTDST:	CAILE T,=8000		;LONGER THAN 8 INCHES?
	ADDI T,=250		;YES, ADD 1/4 INCH
	ADD T,BARELN		;ADD THE BARE WIRE AT EACH END, IF WANTED
	ADD T,WRAPMG		;ADD SOME INSULATION TO GO AROUND THE PINS
	IMUL T,FRACTN		;CONVERT TO INCREMENTS OF 1/FRACTN INCHES
	IDIVI T,=1000		; "		"		"
	SKIPE TT		;REMAINDER?
	ADDI T,1		;YES, ROUND UP
DSTIS0:	MOVE G,T
	POPJ P,

DSTERR:	SETZ G,
	POPJ P,

GNDCLR:OUTSTR[ASCIZ/24 pin dips not yet implemented!
/]
	POPJ P,
;AUGU1, AUGU6, and AUGCMU
WAGGND:
GNDOUT:
VCCOUT:
	OUTSTR[ASCIZ/Not supported for universal Augat boards!!
/]
	POPJ P,

LOCPNM:		;PRINTS DIP LOC AND PIN # ON WIRE-WRAP SIDE
	PUSH P,T
	PUSHJ P,ABSPIN
	PUSHJ P,LOCOUT
	POP P,T
	POPJ P,
BEND AUGAT
>;MWL
BEND AUG
    