;<DRAW>DECSUB.FAI;146, 11-AUG-75 23:59:40, EDIT BY HELLIWELL
VERSION(DECSUB,6)
;THIS FILE CONTAINS ALL SPECIAL SUBROUTINES FOR THE DEC ASSEMBLY
DEC,<
;SETPOL - INSERT DEFAULT POLARITY INTO BODY DEFINITION
;EDIT-PIN MODE ONLY

MD,<
SETPOL:	PUSHJ	P,GETCLS	;GET NEAREST PIN
	JRST	PERRET
	TLNN	M,DSKACT!MACACT
	OUTSTR	[ASCIZ /POLARITY (H OR L OR <CR>)?/]
	PUSHJ	P,GETCHR
	CAIN	C,ALTMOD
	POPJ	P,
	SETO	B,
	CAIN	C,12		;BLANK?
	SETZ	B,
	CAIE	C,"H"
	CAIN	C,"h"
	MOVEI	B,ASSH
	CAIE	C,"L"
	CAIN	C,"l"
	MOVEI	B,ASSL
	JUMPL	B,PERRET	;INVALID!
	HLRZ	A,(A)
	HLRZ	T,(A)
	TRZ	T,ASSH!ASSL
	TRO	T,(B)
	HRLM	T,(A)
	TLNE M,PINIDS		;IF PINIDS
	TRO MCHG		;THEN UPDATE SCREEN
	POPJ	P,

;DEFPOL - TRACE A LINE, STOP AT THE FIRST BODY POINT WITH A DEFAULT
;POLRITY DEFINITION

DEFPOL:	JFCL			;DON'T BEHAVE DIFFERENTLY FOR BUSSED THORUGH
	HLRZ	B,(A)		;A HAS PTR TO POINT
	HRRZ	C,1(B)
	MOVE	D,1(C)		;BITS
	TLNN	D,ISPIN		;BODY POINT?
	JRST	WRECUR		;NO
	HRRZ	T,(C)		;YES, GET POLARITY BITS
	HLRZ T,(T)
	HLRZ T,(T)
	TRNN T,ASSH!ASSL
	JRST WRECUR
	MOVE A,T		;RETURN BITS IN A
	SKIPE B,WDOLST
	PUSHJ P,PUTFS
	SETZM WDOLST
	JRST CPOPJ1
;CHECK POLARITY OF ALL PINS AND SIGNALS ON A WIRE
POLCHK:	SKIPN PONPNT
	JRST PERRET
	MOVSI C,17
	MOVE A,PONPNT
	PUSHJ P,CLRBTS
	MOVE E,PONPNT
	PUSHJ P,ACLRP
	SETZM WDOLST
	SETZM FIND
	MOVE T,PONPNT
POLCK1:	HRLM T,(P)
FOR I IN(DX1,DX2,DX3,DY1,DY2)
<	SETZM I
>
	MOVE H,[1,,POLPSA]
	PUSHJ P,RECUR1
	PUSHJ P,RECCHK
	SETZM DY3		;ASSUME H
	SKIPE T,DY1		;ANY H PINS?
	JRST POLCK3		;YES
	SKIPE T,DY2		;NO, ANY L PINS?
	JRST POLCK4		;YES
	SKIPE T,DX1		;NO PINS, ANY H SIGS?
	JRST POLCK5		;YES
	SKIPN DX2		;NO, ANY L SIGS?
	JRST POLCK2		;NO, NO CHECK
	SKIPN DX3		;L SIGS, ANY BLANK SIGS?
	JRST POLCK2		;NO, NO CHECK
	JRST POLCKL		;YES, CHECK FOR L

POLCK3:	SKIPE TT,DY2		;H PINS, ANY L PINS?
	JRST POLCKM		;YES, COMPARE NUMBER
	SKIPE DX2		;H PINS ONLY, ALWAYS CHECK IF ANY L SIGS
	JRST POLCKH		;CHECK FOR H
	SKIPE DX1		;IF ONLY H,
	SKIPN DX3		;OR BLANK SIGS
	JRST POLCK2		;THEN NO CHECK
	JRST POLCKH		;ELSE CHECK FOR H

POLCK4:	SKIPE DX1		;L PINS ONLY, ANY H SIGS?
	JRST POLCKL		;YES, CHECK FOR L
	SKIPE DX2		;IF ONLY L,
	SKIPN DX3		;OR BLANK SIGS
	JRST POLCK2		;THEN NO CHECK
	JRST POLCKL		;ELSE CHECK FOR L

POLCK5:	SKIPE TT,DX2		;H SIGS (NO PINS), ANY L SIGS?
	JRST POLCKM		;YES, CHECK NUMBER
	SKIPN DX3		;NO H SIGS, ANY BLANK SIGS?
	JRST POLCK2		;NO
	JRST POLCKH		;YES, CHECK FOR H

POLCKM:	CAMGE T,TT		;IF <#OF H'S>.LT.<#OF L'S>,
POLCKL:	AOS DY3			;THEN CHECK FO L'S
POLCKH:	MOVE H,[2,,POLPSB]	;ELSE CHECK FOR H'S
	HLRZ T,(P)
	PUSHJ P,RECUR1
	PUSHJ P,RECCHK
POLCK2:	HLRZ T,(P)
	HRRZ T,(T)
	JUMPN T,POLCK1
	MOVE T,FIND
	MOVEM T,FNDNUM		;STORE FOR MACRO CALL AT ;R
	JUMPE T,CPOPJ
	PUSHJ P,DECOUT
	OUTSTR[ASCIZ/ POLARITY CHECK ERRORS.
/]
	SETOM FIND
	POPJ P,

POLPSB:	JFCL
	PUSHJ P,WACSET
	TLNN D,ISPIN
	JRST POLPS4
	HRRZ T,(C)
	HLRZ T,(T)
	HLRZ T,(T)
	MOVE TT,DY3
	XCT (TT)[TRNN T,ASSL	;SAW H, SKIP ON L
		TRNN T,ASSH]	;SAW L, SKIP ON H
	JRST POLPS4
	MOVE T,1(C)
	TLON T,FOUNDP
	AOS FIND
	MOVEM T,1(C)
	JRST POLPS4

POLPSA:	JFCL			;LOOK AT EVERYONE
	PUSHJ P,WACSET		;SETUP REGS
POLPS4:	HLRZ T,(C)
	JUMPE T,PRECUR
	HRLM A,(P)
	HRRZ A,(T)
	ADD A,[POINT 7,1]
	PUSHJ P,PERMUT		;CREATE CONONICAL FORM OF SIGNAL
	SKIPL T,POLAR		;WHICH SETS UP POLAR
	AOS DX3			;NO H OR L, COUNT BLANK
	HRRZ T,T
	CAIN T,"H"
	AOS DX1			;COUNT H
	CAIN T,"L"
	AOS DX2			;COUNT L
	HLRZ A,(P)
	PUSHJ P,WACSET
	TLNE H,1		;IS PASS 1,
	JRST PRECUR		;THEN DON'T DO ERROR TEST
	MOVE TT,DY3
	XCT (TT)[CAIN T,"H"	;SAW SIGNAL H, MUST BE H
		CAIN T,"L"]	;SAW SIGNAL L, MUST BE L
	JRST PRECUR
	MOVE T,1(C)
	TLON T,FOUNDP
	AOS FIND
	MOVEM T,1(C)
PRECUR:	HLRZ B,1(B)		;NEIGHBOR POINTER
	HLRZ T,(B)		;
	JUMPE T,.+2
	PUSHJ P,RECUR1
	HRRZ T,(B)
	JUMPE T,.+2
	PUSHJ P,RECUR1
	HLRZ T,1(B)		;_
	JUMPE T,.+2
	PUSHJ P,RECUR1
	HRRZ T,1(B)		;
	JUMPE T,.+2
	PUSHJ P,RECUR1
	TLNE D,ISPIN		;PIN?
	TLNE D,10		;PREVIOUS ERROR?
	JRST RECCHK		;NO, DONE
	HRRZ T,(C)
	HLRZ T,(T)
	HLRZ E,(T)		;GET BITS
	TRNE E,ASSL
	AOS DY2
	TRNE E,ASSH
	AOS DY1
	ANDI E,ASSL!ASSH
	SKIPN E
	TRO E,DPTMP1
	HRL F,1(T)
	HRR F,(T)		;PIN NAME,,PIN ID
	PUSH P,A
	HRLM E,(P)
	PUSHJ P,POLPR0
	  PUSHJ P,POLPCK
	POP P,A
	TRC E,DPTMP1!ASSL!ASSH
	JUMPN E,POLPS2
	MOVE T,1(C)
	TLON T,FOUNDP
	AOS FIND
	MOVEM T,1(C)
	JRST POLPS1

POLPS2:	HLRZ E,A
POLPS1:	PUSHJ P,POLPR0
	  PUSHJ P,POLPCR
	JRST RECCHK

POLPR0:	HLRZ A,(A)		;PIN DATA BLOCK
	HLRZ B,(A)		;BODY POINTER
	HLRZ B,(B)		;BODY DATA BLOCK
	JRST POLPR1

POLPR2:	HLRZ B,(A)
	HRRZ D,1(B)
	HRRZ TT,(D)
	HLRZ TT,(TT)
	HRL T,1(TT)
	HRR T,(TT)
	XOR T,F
	JUMPE T,POLPR1		;DON'T DO US
	TLNN T,-1		;SAME PIN NAME?
	XCT @(P)		;YES, CALL SUBR
POLPR1:	HRRZ A,(B)
	JUMPN A,POLPR2
	JRST CPOPJ1

POLPCK:	HLRZ TT,(TT)		;GET BITS
	ANDI TT,ASSL!ASSH
	SKIPN TT
	MOVEI TT,DPTMP1
	IOR E,TT		;COLLECT THEM ALL
	POPJ P,

POLPCR:	JUMPE E,POLPC1
	TRNE E,DPTMP1		;IF WE ARE BLANK
	JRST POLPC2		;THEN WE DO ALL
	HLRZ TT,(TT)		;GET BITS
	ANDI TT,ASSL!ASSH
	JUMPE TT,POLPC2		;ALWAYS DO IF NO ASSERTION
	XOR TT,E
	JUMPN TT,CPOPJ		;BUT DON'T DO IF DIFFERENT ASSERTION
POLPC2:	MOVE T,A
	JRST RECUR0

POLPC1:	MOVSI T,10
	IORM T,1(C)		;MARK ORIGINAL PIN IN ERROR
	MOVE T,1(D)
	TLON T,FOUNDP
	AOS FIND
	MOVEM T,1(D)
	POPJ P,
>;MD
;SIGMAT - SIGNAL NAME MATCHING WITH DEC-STYLE H & L, (1) & (0)
;ENTER WITH PTR TO SIGNAL NAME IN A, COMPARE STRING IN B
;SKIP RETURN IF EQUAL

IFN 0,<
SIGMAT:	PUSH	P,B		;SAVE COMPARE STRING
	PUSHJ	P,SIGMAA	;CREATE COMPARE STRING
	POP	P,A
	PUSH	P,B		;SAVE PTR FOR RETURNING TO FREE STG
	PUSHJ	P,TXTMAT	;COMPARE
	CAIA
	AOS	-1(P)		;SKIP IF TXMAT SKIPS
	POP	P,B
	JRST	PUTFS		;RETURN COMPARE STRING

;SIGMAA - COMPARE STRING GENERATOR FOR SIGMAT
;CALL WITH PTR TO STRING IN A, RETURNS WITH PTR TO COMPARE STRING IN B
;TAKES CARE OF MULTIPLE SPACES, ^W, LEADING "-", (0), (1), H, AND L

SIGMAA:	GETFS	(B)		;INIT THE COMPARE STRING
	SETZM	(B)
	SETZM	1(B)
	ADD	A,[POINT 7,1]	;BYTE PTR FOR GETTING INPUT STRING
	PUSH	P,B
	ADD	B,[POINT 7,1]	;BYTE PTR FOR MAKING COMPARE STRING
	SETZM	SPCNT
	TRZ	TFLG		;FLAG FOR LEADING "-"
SPFLUS:	PUSHJ	P,GETITA	;FLUSH LEADING SPACES
	JRST	SIGMA5		;EMPTY
	CAIE	T,DBLARR	;^W EQV TO SPACE
	CAIN	T," "
	JRST	SPFLUSH
	CAIN	T,"-"		;LEADING "-"?
	TROA	TFLG		;YES
	JRST	SIGMA6		;NO, PUT INTO COMPARE STRING

NONOT:	PUSHJ	P,GETITA
	JRST	SIGMA5		;END
	CAIE	T,DBLARR	;SPACES?
	CAIN	T," "
	JRST	DTRAIL		;FLUSH TRAILING OR MULTIPLE SPACES
	AOS	SPCNT		;COUNT NON-SPACES
SIGMA6:	PUSHJ	P,CPUTIT	;PUT INTO COMPARE STRING
	JRST	NONOT
DTRAIL:	PUSHJ	P,GETITA
	JRST	SIGMA5		;FLUSH TRAILING SPACES
	CAIE	T,DBLARR
	CAIN	T," "
	JRST	DTRAIL		;FLUSH MULTIPLE SPACES
	PUSH	P,T
	MOVEI	T," "
	TRNE	M,SPACES	;PUT IN A SPACE IF SIGNIFICANT
	PUSHJ	P,CPUTIT
	POP	P,T
	SETZM	SPCNT		;JUST SAW A SPACE
	JRST	SIGMA6

CPUTIT:	TLNE	B,760000
	JRST	CPUTI1
	HRRZ	TTT,-1(B)	;GOT THE NEXT BLOCK ALREADY?
	JUMPN	TTT,[HRR B,TTT	;YES, SO USE IT
		JRST CPUTI1]
	GETFS	(TTT)		;NO, GET ONE
	HRRM	TTT,-1(B)	;LINK
	HRLZM	B,(TTT)		;BACK PTR
	HRR	B,TTT
	SETZM	1(TTT)
CPUTI1:	IDPB	T,B
	POPJ	P,

SIGMA5:	SETZM	POLAR		;HAVEN'T SEEN POLARITY YET
	LDB	T,B		;GET LAST CHR
	CAIE	T,"H"		;H OR L?
	CAIN	T,"L"
	JRST	SIGMA7		;YES, CHECK FORMAT
	CAIN	T,")"		;MAYBE (0) OR (1)?
	JRST	SIGMA8		;YES, CHECK IT OUT
	CAIN T,"!"
	SKIPE SPCNT		;PRECEEDED BY SPACE?
	JRST SIGM16		;NO
	AOS POLAR		;INDICATE EXPLICIT NON-POLARITY
SIGMX:	PUSHJ P,GETREV		;BACK UP OVER SPACES
	JRST SIGMY
	CAIN T," "
	JRST SIGMX
SIGMY:	TRNN TFLG
	JRST SIGM19		;NO - NEEDED, JUST PAD OUT WITH NULLS
	PUSHJ P,SIGM18		;TAB
	MOVEI T,"-"
	PUSHJ P,CPUTIT		;-
	JRST SIGM19		;AND PAD OUT WITH NULLS

SIGM16:	TRNN	TFLG		;SEEN "-"
	JRST	SIGMA9		;NO, JUST CLEAN UP AND GO
	PUSHJ	P,SIGM18	;YES, PUT IN <TAB>-
	MOVEI	T,"-"
	PUSHJ	P,CPUTIT
	JRST	SIGMA9

GETREV:	ADD	B,[70000,,0]	;BACK UP PTR & GET ONE CHR
	JUMPGE	B,GETRE1	;OVER WORD BOUNDARY?
	HLRZ	T,-1(B)		;YES, GET BACK PTR
	JUMPE	T,CPOPJ		;AT BEGINNING
	HRRZ	B,T		;MAKE NEW PTR
	HRLI	B,10700
GETRE1:	LDB	T,B
	JRST	CPOPJ1
SIGMA7:	SKIPE	TTT,SPCNT	;H OR L PRECEEDED BY SPACE?
	JRST	SIGM12		;NO, CHECK FOR 0H OR (0)H ETC.
	HRROM	T,POLAR		;LIVE POLARITY
	CAIN	T,"L"
	TRC	TFLG		;CONVERT EVERYTHING TO "H" FORM
SIGM15:	PUSHJ	P,GETREV	;CHECK FOR "(1) H" ETC.
	JRST	SIGM11		;AT END
	CAIN	T," "		;IGNORE SPACES
	JRST	SIGM15
	CAIN	T,")"
	JRST	SIGM13		;MAY BE (0) ETC
SIGM11:	PUSHJ	P,SIGM18	;JUST H OR L, NO FF OUTPUT
	MOVEI	T," "
	TRNE	TFLG		;"-" OR "L" SEEN?
	MOVEI	T,"-"
SIGMA0:	PUSHJ	P,CPUTIT	;PLUG IN ASSERTION CHR
	MOVEI	T,"H"
SIGM19:	PUSHJ	P,CPUTIT
	SETZ	T,		;CHECK FOR SHRINKING STRING
SIGMA3:	TLNN	B,760000
	JRST	SIGMA4
	IDPB	T,B		;CLEAR THE REST OF THE LAST WORD
	JRST	SIGMA3

SIGMA4:	HRRZ	TTT,-1(B)	;RETURN ANY EXTRA BLOCKS
	HLLZS	-1(B)
	SKIPE	B,TTT
	PUSHJ	P,PUTFS
SIGMA9:	POP	P,B		;PTR TO COMPARE STRING
	POPJ	P,

SIGM12:	MOVE	A,B		;WHERE TO GO IF NO (0)H ETC
	MOVE	TT,T		;SAVE H OR L
	PUSHJ	P,GETREV
	HALT			;CANT HAPPEN!?!?
	CAIN	T,")"
	JRST	SIGM13		;COULD BE (0)H ETC!
	CAIE	T,"0"
	CAIN	T,"1"
	CAIE	TTT,1		;CHECK FOR " 0H" ETC
	JRST	SIGM14		;GIVE UP
	HRROM	TT,POLAR		;LIVE POLARITY
	CAIN	TT,"L"
	TRC	TFLG		;CONVERT ALL TO "H"
	MOVE	TT,T		;SAVE 0 OR 1
	JRST	SIGM20		;FLUSH PRECEEDING SPACE
SIGM13:	MOVE	A,B		;WHERE TO GO IF NO (0) FOUND
	HRROM	TT,POLAR		;LIVE POLARITY
	CAIN	TT,"L"
	TRC	TFLG		;CONVERT TO "H" FORM
	PUSHJ	P,GETREV
	JRST	SIGM10		;AT END
	CAIL	T,"0"
	CAILE	T,"1"		;0 OR 1 SEEN?
	JRST	SIGM10		;NO
	MOVE	TT,T
	PUSHJ	P,GETREV
	JRST	SIGM10		;AT END
	CAIE	T,"("
	JRST	SIGM10
SIGM20:	PUSHJ	P,SIGM17	;FLUSH PRECEEDING SPACE, PLUG IN A <TAB>
	TRNE	TFLG		;"-" OR "L" SEEN?
	TRC	TT,1		;YES, CHANGE 0 TO 1 & VICE VERSA
	MOVE	T,TT
	JRST	SIGMA0		;PLUG IN ASSERTION/POLARITY

SIGM10:	MOVE	B,A		;REVERT
	JRST	SIGM11		;PLUG IN " H" OR "-H"

SIGM14:	MOVE	B,A		;REVERT
	JRST	SIGM16		;PLUG IN "-" OR NOTHING

SIGM17:	PUSHJ	P,GETREV	;BACK UP ON CHR
	JRST	SIGM18		;AT BEGINNING
	CAIN	T," "		;SKIP OVER SPACES
	JRST	SIGM17
SIGM18:	MOVEI	T,11		;PUT IN A <TAB>
	JRST	CPUTIT

SIGMA8:	MOVE	A,B		;WHERE TO GO IF NO (0) OR (1)
	PUSHJ	P,GETREV
	JRST	SIGM14
	CAIL	T,"0"
	CAILE	T,"1"
	JRST	SIGM14
	MOVE	TT,T		;SAVE 0 OR 1
	PUSHJ	P,GETREV
	JRST	SIGM14
	CAIE	T,"("
	JRST	SIGM14
	PUSHJ	P,SIGM17	;WIN, FLUS PRECEEDING SPACE, INSERT <TAB>
	MOVE	T,TT		;GET 0 OR 1
	TRNE	TFLG		;"-" SEEN?
	TRC	T,1		;YES, CHANGE 0 TO 1 ETC
	JRST	SIGM19		;INSERT ASSERTION, NO POLARITY
>;IFN 0
;UUO ROUTINES
%UUOCON:
NOPGP,<	PUSH	P,0
	PUSH	P,1
	PUSHJ	P,PUSHIT	;SAVE ALL AC'S SO HANDLER HAS ALL AC'S
>;NOPGP
PGP,<	PUSHJ	P,PUSHAL >	;SAVE ALL AC'S SO HANDLER HAS ALL AC'S
	MOVE	A,40		;PUT UUO IN "A" FOR SUBHANDLER
	MOVE	B,.JBUUO
	LSH	B,-=27
	CAILE	B,37		;UUO IN CORRECT RANGE ?
	JRST	$UUOER		;NO
	PUSHJ	P,@UUODIS(B)	;UUO DISPATCH INSTRUCTION

;UUO EXIT ROUTINE

UUOEXT:
NOPGP,<	PUSHJ	P,POPIT
	POP	P,1
	POP	P,0		;RESTORE ALL ORIGINAL AC'S
>;NOPGP
PGP,<	PUSHJ	P,POPALL >	;RESTORE ALL ORIGINAL AC'S
	POPJ	P,
;ILLEGAL OR UNCODED UUO ROUTINE

$UUOER:	OUTSTR	[ASCIZ/
ILLEGAL UUO EXECUTED
/]
	PUSHJ	P,TODDT		;GO TRY DDT
	JRST	UUOEXT
;UUO DISPATCH TABLE

;TABLE TO UUO HANDLER ROUTINES
;POINTERS EITHER POINT TO A UUO HANDLER
;OR TO THE ERROR ROUTINE (WHICH WILL ENTER DDT IF AROUND).

UUODIS:	$UUOER			;ILL UUO, 0
	PTBYT			;PUTBYT
	PTSTR			;PUTSTR
	DPOUT			;DPYOUT
	%DPCLR			;DPYCLR
	$UUOER			;UUO 5
	$UUOER			;UUO 6
	$UUOER			;UUO 7
	%DSKPN			;DSKPPN
	$UUOER			;UUO 11
	$UUOER			;UUO 12
	$UUOER			;UUO 13
	$UUOER			;UUO 14
	$UUOER			;UUO 15
	$UUOER			;UUO 16
	$UUOER			;UUO 17
	$UUOER			;UUO 20
	$UUOER			;UUO 21
	$UUOER			;UUO 22
	$UUOER			;UUO 23
	$UUOER			;UUO 24
	$UUOER			;UUO 25
	$UUOER			;UUO 26
	$UUOER			;UUO 27
	$UUOER			;UUO 30
	$UUOER			;UUO 31
	$UUOER			;UUO 32
	$UUOER			;UUO 33
	$UUOER			;UUO 34
	$UUOER			;UUO 35
	$UUOER			;UUO 36
	$UUOER			;UUO 37
;DECGO, DCLAIM
DECGO:	MOVEI	TT,REENTER
	MOVEM	TT,.JBREN
	MOVEI	T,INTBLK
	MOVEM	T,.JBINT
	SETZM	INTBLK+2
	MOVEI	T,DECAPR	;ENABLE FOR PDL OVFL & ILL MEM REF
	MOVEM	T,.JBAPR
	MOVEI	T,620000
	APRENB	T,		;APRENB
	POPJ P,

;COME HERE TO INITIALLY CLAIM DISPLAY
DCLAIM:
VB10,<	SETO T,
	GETLIN T
	ANDI T,177777
	CAME T,VBCON		;IS HE AT THE RIGHT CONSOLE?
	JRST SETWRN		;NO
DTRY:	SKIPE DONTDPY		;DO WE WANT DISPLAY?
	JRST SETWRN		;NO
NOVIROS,<
	OPEN DISCHN,[	15
			'DIS   '
			0	]
	JRST NODIS		;NO CAN DO
>;NOVIROS
VIROS,<
	PUSH P,1
	PUSH P,2
	PUSH P,3
	SKIPGE 1,VBCJFN
	JRST NOJREL
	GTSTS
	TLNN 2,(1B10)
	JRST NOJREL
	DVCHR
	MOVE 3,1
	HRROI 1,[ASCIZ/VBC/]
	STDEV
	JRST NOJREL		;FOO
	CAMN 2,3		;VBC ON THIS JFN?
	PUSHJ P,VBCREL
NOJREL:	MOVSI 1,1
	HRROI 2,[ASCIZ/VBC:/]
	GTJFN
	JRST [	PUSHJ P,JSYSE
		JRST PNODIS]
	HRRZM 1,VBCJFN
	SETZ 2,
	OPENF
	JRST [	PUSHJ P,JSYSE
		JRST CNODIS]
	MOVEI 2,VBLOCK		;VB10C LOCK CODE
	MOVEI 3,=64		;TRY FOR THIS MANY PAGES
	MTOPR
	 ERJMP [SOJG 3,.-1		;TRY FOR LESS ON ERROR
		PUSHJ P,JSYSE		;MESSAGE IF NO MORE
		JRST .+1]
	LSH 3,9			;NUMBER OF PAGES TO PAGE POS
	SUBI 3,1		;END OF LAST PAGE LOCKED
	CAML 3,.JBFF		;ENOUGH FOR MIN DISPLAY?
	CORE 3,			;LET HURLEY KNOW ABOUT CHANGE
	JRST [	OUTSTR[ASCIZ/NOT ENOUGH PAGES AVAILABLE FROM SYSTEM FOR DISPLAY.
/]
		JRST CNODIS]
	POP P,3
	POP P,2
	POP P,1
>;VIROS
	HRRZ	TT,.JBFF
	MOVEM	TT,FBUF
	HRLM	TT,ENDPG1
	MOVEI T,1(TT)
	CAMG T,.JBREL
	JRST BUFOK
	CORE T,
	JRST [	OUTSTR[ASCIZ/NO CORE FOR DISPLAY BUFFER.
/]
		JRST XNODIS]
BUFOK:	MOVE	T,[XWD 10200,160000]
	MOVEM	T,(TT)
	MOVEI	T,FBUF+2
	MOVEM	T,1(TT)
	MOVE T,['VBD   ']
>;VB10
GT,<
NODLX,<
DTRY:	SKIPE DONTDPY
	JRST SETWRN
>;NODLX
DLX,<
	SETOM DLXFLG			;TRY DL10 FIRST
DTRY:	SKIPE DONTDPY
	JRST SETWRN
	PUSH P,1
	PUSH P,2
	PUSH P,3
	HRROI 1,[ASCIZ/DLX0/]
	STDEV				;USE THIS TO GET DEVICE #
	JRST [	SKIPN DLXFLG		;IF NOT TRYING DL10, LIMP ON
		JRST NORLDL
		PUSHJ P,JSYSE		;FOO
		JRST NODIS]
	HLLZM 2,DLDVDS			;SAVE HERE
	SKIPGE 1,DLXJFN			;SEE IF MAYBE WE ALREADY HAVE IT
	JRST NORLDL
	GTSTS				;GET JFN STATUS
	TLNN 2,(1B10)			;JFN ACTIVE?
	JRST NORLDL			;NO
	DVCHR				;GET DEVICE DESIGNATOR
	XOR 1,DLDVDS			;COMPARE WITH DEVICE PART OF DLX0
	TLNN 1,-1			;IS IT A DL10?
	PUSHJ P,DLREL			;YES, RELEASE IT
NORLDL:
>;DLX
	OPEN DISCHN,[	700
			'TTY   '
			0	]
	JRST NODIS
	IONEOU	[375]		;TICKLE THE GT40 IF THERE
	PUSHJ P,WAIT
	TTYUUO 2,T
	JRST PNODIS		;NO RESPONSE, NOBODY HOME
	CAIN T,33		;SOME MODES SEND THIS INSTEAD OF 175
	MOVEI T,175
	CAIE T,175		;GTPROG THERE?
	JRST PNODIS		;NO
DLX,<	SKIPN DLXFLG
	JRST SKPDLX
	MOVE T,[POINT 8,[BYTE(8)60,60,60,60,205,122,0]]
	PUSHJ P,GTSEND		;WHO ARE YOU
	TTYUUO 2,T		;GET RESPONSE
	JRST PNODIS		;NONE, FOO
	CLRBFI
	SUBI T,101		;CONVERT TO PORT #
	JUMPL T,PNODIS		;ERROR CHECK A LITTLE
	CAILE T,3
	JRST PNODIS
	HRRM T,DLDVDS		;STORE WITH DEVICE DESIGNATOR
	HRROI 1,DLXBUF
	MOVE 2,DLDVDS
	DEVST			;PUT STRING NAME OF CORRECT DEVICE IN DLXBUF
	JRST [	PUSHJ P,JSYSE
		JRST PNODIS]
	MOVEI 2,":"
	IDPB 2,1		;MAKE IT A DEVICE NAME
	MOVSI 1,1
	HRROI 2,DLXBUF
	GTJFN
	JRST [	PUSHJ P,JSYSE
		JRST PNODIS]
	HRRZM 1,DLXJFN		;STORE JFN HERE
	MOVE 1,DLXJFN
	MOVE 2,[100000,,300000]		;8 BIT BYTES, READ/WRITE
	OPENF
	JRST [	PUSHJ P,JSYSE
		PUSHJ P,DLREL
		JRST PNODIS]
SKPDLX:	POP P,3
	POP P,2
	POP P,1
	SKIPE DLXFLG		;IS WE GOT THE DL10?
	JRST GOTDLX		;YES
>;DLX
	MOVE T,[POINT 8,[BYTE(8)60,60,60,60,143,122,0]]
	PUSHJ P,GTSEND
	CLRBFI			;FLUSH ALL INPUT NOW
GOTDLX:	SETSTS DISCHN,0
	RELEASE DISCHN,
	PUSH P,[JBTABL]
	PUSHJ P,GTINIT		;SEND TITLE LINE, CURSOR, ETC.
	HRLZ T,JBCURX		;GET X VALUE WE JUST PUT CURSOR AT
	HRR T,JBCURY		;AND Y VALUE
	MOVEM T,JBCUR		;AND STORE AS CURRENT POS
	SETZM JBREDY		;MAKE SURE READY CHAR IS RETRANSMITTED.
	TRNE M,CURSOR		;ARE WE BULLSEYE TRACKING?
	PUSHJ P,CURSN1		;YES, SEND X,Y COORDS
	MOVE T,['GTD   ']
>;GT
PGP,<
	MOVSI	T,'PGP'		;GET PGP CHARACTERISTICS
	CALLI	T,4
	JUMPE	T,SETWRN	;DOES IT EXIST FROM THIS TERMINAL?
DTRY:	SKIPE	DONTDPY		;YES, TRYING TO DISPLAY?
	JRST	SETWRN		;NO
	SKIPN	T,PGPJBF	;ALREADY SET UP PGP BUFFER?
	MOVE	T,.JBFF		;NO, GET CURRENT FIRST FREE
	MOVEM	T,PGPJBF	;SET LOC OF PGP BUFFER
	EXCH	T,.JBFF		;INFORM THE SYSTEM
	PUSHJ	P,PUSHAL	;SAVE ACS
	SETZM	$VAL		;INIT ERROR CELL
	RTNCAL	(PGPINIT)	;CALL PGP INIT SUBR
	PUSHJ	P,POPALL	;RESTORE ACS
	CAMGE	T,.JBFF		;JUST TOOK SOME CORE?
	MOVEM	T,.JBFF		;NO, RESTORE JOBFF
	SETZM	GOING		;INIT NIL DISPLAY FLAG
	SKIPE	$VAL		;RETURN VALUE = SUCCESS?
	JRST	NODIS		;NO
	SETZM	BLNKIT		;INIT BLINK FLAG
	MOVE	T,['PGPD  ']	;NAME TO USE
>;PGP
	SETNAM T,
	SETOM ISDPY
	JRST DSPOUT

GT,<
GTSND1:	IONEOU TT
GTSEND:	ILDB TT,T
	JUMPN TT,GTSND1		;FALL INTO WAIT ON NULL
WAIT:	MOVE T,[4,,=2000]	;HIBERNATE FOR 2 SECONDS
	MOVEI TT,2		;OR SLEEP FOR 2 SECOND
	HIBER T,		;TRY HIBERNATE
	SLEEP TT,		;CAN'T, DO A SLEEP INSTEAD
	POPJ P,
>;GT
VIROS,<
..TEMP__0
NOGT,<..TEMP__-1>
DLX,<..TEMP__-1>
IFN ..TEMP,<
JSYSE:	PUSH P,1
	PUSH P,2
	PUSH P,3
	MOVEI 1,101
	HRLOI 2,400000
	MOVEI 3,400000
	ERSTR
	OUTSTR[ASCIZ/ERSTR: UNKNOWN ERROR LAST./]
	JFCL			;THIS CAN'T HAPPEN
	OUTSTR[ASCIZ/
/]
	POP P,3
	POP P,2
	POP P,1
	POPJ P,
>;..TEMP
>;VIROS

VB10,<
XNODIS:
NOVIROS,<RELEASE DISCHN,>
VIROS,<
	PUSH P,1
	PUSH P,2
	PUSH P,3
CNODIS:	SKIPGE 1,VBCJFN
	JRST PNODIS
	CLOSF
	PUSHJ P,JSYSE
PNODIS:	SETOM VBCJFN
	POP P,3
	POP P,2
	POP P,1
>;VIROS
>;VB10
GT,<
PNODIS:	SETSTS DISCHN,0
	RELEASE DISCHN,
	CLRBFI
>;GT
NODIS:
DLX,<	POP P,3
	POP P,2
	POP P,1
	SKIPE DLXFLG			;WAS THAT THE DL10?
	JRST [	SETZM DLXFLG		;YES, TRY WITHOUT IT
		OUTSTR[ASCIZ/NO DL10, TRYING TTY.
/]
		JRST DTRY]
>;DLX
	OUTSTR[ASCIZ/
DISPLAY NOT AVAILABLE
/]
SETWRN:	SETZM ISDPY
	MOVE T,['WIRES ']
	SETNAM T,
	JRST DSPSET

GT,<
RDLPEN:	PUSH P,13
	PUSH P,14
	PUSH P,15
	PUSH P,16
	MOVEM P,STCHPS
	PUSH P,[1]			;PICTURE # 1 IS CURSOR
	MOVE 16,P
	PUSH P,[JBCURX-PIC1]		;OFFSET OF X VALUE (FOLLOWED BY Y)
	PUSH P,[2]			;2 WORDS
	ADD P,[2,,2]			;LEAVE SPACE FOR 2 WORDS ON STACK
	PUSHJ P,BREADM
	EXCH P,STCHPS
	POP P,16
	POP P,15
	POP P,14
	POP P,13
	MOVE T,STCHPS			;GET BACK POINTER TO ARGS
	MOVE TT,-1(T)			;GET X
	HRLM TT,JBCUR			;STORE INTO CURRENT CURSOR CELL
	MOVE T,(T)			;AND Y
	HRRM T,JBCUR
	SUB T,[GTY]
	SUB TT,[GTX]
	LSH T,=36-=22
	DPB TT,[POINT 11,T,10]
	TRO T,1
	POPJ P,
>;GT
VB10,<
VIROS,<
RDLPEN:	PUSH P,1
	PUSH P,2
	PUSH P,3
	PUSH P,4
	MOVEI 2,VBSTAT
	MOVEI 3,1
	MOVEI 4,1
	SKIPGE 1,VBCJFN
	JRST NOLPEN
	MTOPR
	 ERJMP [PUSHJ P,JSYSE
		JRST NOLPEN]
	CAMN 1,[-1]
	JRST NOLPEN
	HLRZ 2,1
	SUBI 2,1000
	SUBI 1,1000
	LSH 1,=36-=11
	DPB 2,[POINT 11,1,21]
	TROA 1,1
NOLPEN:	MOVE 1,SAVWR2
	POP P,4
	POP P,3
	POP P,2
	EXCH 1,(P)
	POP P,T
	POPJ P,
>;VIROS

VBCON:
NOVIROS,<	16	>	;VB10 CONSOLE
VIROS,<		10	>	;ON VIROS
>;VB10
PGP,<
RDLPEN:	PUSHJ	P,PUSHAL	;SAVE ACS
	RTNCAL	(ERRACK)	;JUST TO BE SAFE
	RTNCAL	(INTERA,<[PLIT RDLPRG],[PLIT NULARG]>)	;SEND TRACKING SYMBOL XY
	PUSHJ	P,CHCINT	;MAKE IT HAPPEN
	RTNCAL	(INPUTW,<[=30],[PLIT TSXDAT]>)	;PICKUP TSX
	RTNCAL	(INPUTW,<[=31],[PLIT TSYDAT]>)	;PICKUP TSY
	PUSHJ	P,POPALL	;RESTORE ACS
	MOVE	T,TSXDAT	;FORMAT PROPERLY
	DPB	T,[POINT 11,TSYDAT,24]
	MOVE	T,TSYDAT
	LSH	T,=14
	POPJ	P,

	ERDLPG-.-1
RDLPRG:	ASCIZ	!BEGIN
	ON HCA
	 OUTT=TSXY;
	 END,
	END!
	0
	ERDLPG__.
>;PGP

DPYREL:	SKIPN ISDPY
	POPJ P,
	DPYCLR
VB10,<
NOVIROS,<
	RELEASE DISCHN,
>;NOVIROS
VIROS,<	SKIPGE VBCJFN
	JRST NORJFN
VBCREL:	PUSH P,1
	PUSH P,2
	PUSH P,3
	PUSH P,4
	PUSH P,5
	PUSH P,6
	MOVE 1,VBCJFN
	CLOSF
	PUSHJ P,JSYSE
	SETOM VBCJFN
	MOVE 1,.JBFF
CORUP:	MOVEI 2,777(1)		;GET US ONE MORE PAGE THAN WE WILL NEED
	CORE 2,
	JRST [	OUTSTR[ASCIZ/CORE UUO FAILURE AT DPYREL.
CONTINUE TO TRY AGAIN.
/]
		EXIT 1,
		JRST CORUP]
	MOVEI 5,-1(1)
	ANDCMI 5,777
	MOVEI 4,1000(5)
LOPPAG:	MOVE 6,4
	HRL 6,5
	BLT 6,777(4)
	SETO 1,
	MOVE 2,5
	LSH 2,-9
	HRLI 2,400000
	SETZ 3,
	PMAP			;FLUSH PAGE
	MOVE 6,5
	HRL 6,4
	BLT 6,777(5)
	SUBI 5,1000
	JUMPGE 5,LOPPAG
CORDWN:	MOVEI 1,-1(4)		;LAST ADDRESS WE REALLY WANT
	CORE 1,
	JRST [	OUTSTR[ASCIZ/CORE DOWN FAILURE AT DPYREL.
CONTINUE TO TRY AGAIN.
/]
		EXIT 1,
		JRST CORDWN]
	POP P,6
	POP P,5
	POP P,4
	POP P,3
	POP P,2
	POP P,1
NORJFN:
>;VIROS
>;VB10
GT,<	PUSHJ P,GTRESET		;RESET GT40 NOW
DLX,<	SKIPGE DLXJFN		;DO WE HAVE DL10?
	JRST NORJFN		;NO
DLREL:	PUSH P,1
	MOVE 1,DLXJFN
	CLOSF
	PUSHJ P,JSYSE
	SETOM DLXJFN
	POP P,1
NORJFN:
>;DLX
>;GT
PGP,<	RTNCAL	(PGPSTOP)	>
	SETZM ISDPY
	POPJ P,
;HERE IS THE DISPLAY START/STOP CODE
VB10,<
DSTART:	SKIPGE	GOING
	POPJ	P,
NOVIROS,<
	PUSH	P,TT
LOCKF:	MOVEI	TT,1		;DO LOCK
	LOCK	TT,
	JRST	[CAMN TT,GOING
		JUMPN TT,LOCKW
		MOVEM TT,GOING
		CAIN TT,2
		JRST [	OUTSTR[ASCIZ/
WAITING TO LOCK IN CORE
/]
			JRST LOCKW]
		CAIN TT,3
		JRST [	OUTSTR[ASCIZ/
GET THE OPERATOR TO "SET CORMIN 0"
/]
		LOCKW:	MOVEI TT,5
			SLEEP TT,	;SLEEP
			JRST LOCKF]
		OUTSTR	[ASCIZ/
?CAN'T LOCK IN CORE/]
		SETZM	GOING
		PUSHJ	P,TODDT
		JRST	LOCKF]
	POP	P,TT		;RESTORE TT
	OUTPUT DISCHN,FBUF
>;NOVIROS
VIROS,<	SKIPGE VBCJFN
	JRST NOVJFN
	PUSH P,1
	PUSH P,2
	PUSH P,3
	MOVE 3,FBUF
	MOVEI 2,VBSTRT
	MOVE 1,VBCJFN
	MTOPR
	 ERCAL JSYSE
	POP P,3
	POP P,2
	POP P,1
NOVJFN:
>;VIROS
	SETOM	GOING
	POPJ P,

DSTOP:	SKIPL GOING
	POPJ P,
VIROS,<	SKIPGE VBCJFN
	JRST NOSJFN
	PUSH P,1
	PUSH P,2
	MOVE 1,VBCJFN
	MOVEI 2,VBSTOP
	MTOPR			;STOP DISPLAY
	 ERCAL JSYSE
	POP P,2
	POP P,1
NOSJFN:
>;VIROS
NOVIROS,<
	CLOSE DISCHN,
 	PUSH	P,0		;SAVE 0
UNLOK1:	HRRZI	0,1		;UNLOCK LOW SEGMENT
	UNLOK.			;UNLOCK
	JRST	[OUTSTR	[ASCIZ/
?UNLOCK UUO FAILED/]
		PUSHJ	P,TODDT
		JRST	UNLOK1]
	POP	P,0		;RESTORE 0.
>;NOVIROS
	SETZM GOING
	POPJ	P,

>;VB10
PGP,<
DSTART:	SKIPGE	GOING
	POPJ	P,
	SETZM	SAVWRD					;INIT CURSOR LOC
	SETZM	LOCAT					;INIT LOCAT POSITION
	RTNCAL	(ERRACK)				;JUST IN CASE
	RTNCAL	(GETNI,[PLIT NILEV])
	SOS	NILEV
	RTNCAL	(STPIC)
	RTNCAL	(MRU,<[0],[1],[-2]>)			;10-MIL UNITS
	RTNCAL	(WINDO,<[-1000],[-1000],[1000],[1000]>)	;FULL SCREEN
	RTNCAL	(OSEG,[=100])				;ROOT
	SETZM	PGPBRI+1				;INIT PARAMS
	MOVE	T,[XWD PGPBRI+1,PGPBRI+2]
	BLT	T,PGPBRI+5
	MOVE	T,NILEV					;SET FOLLOW BRIGHTNESS
	MOVEM	T,PGPBRI
	RTNCAL	(PARAMS,[PLIT PGPBRI])
	RTNCAL	(AMOV2,<[=113],[0],[0]>)		;DUMMY FOLLOW 1
	RTNCAL	(ALIN2,<[=113],[0],[0]>)
	RTNCAL	(AMOV2,<[=114],[0],[0]>)		;DUMMY FOLLOW 2
	RTNCAL	(ALIN2,<[=114],[0],[0]>)
	RTNCAL	(CSEG,[=100])
	RTNCAL	(MRU,<[0],[1],[-2]>)			;10-MIL UNITS
	RTNCAL	(WINDO,<[-1000],[-1000],[1000],[1000]>)	;FULL SCREEN
	RTNCAL	(REFPT,<[0],[SCRTOP-TITBIG*CHGHT]>)	;INFO LINE Y
	MOVEI	T,TITBRT				;TITLE BRIGHTNESS
	PUSHJ	P,MAKBRI
	RTNCAL	(PARAMS,[PLIT PGPBRI])
	RTNCAL	(OSEG,[=200])
	RTNCAL	(REFPT,<[%LEFT+5*CWIDTH*TITBIG],[0]>)		;MODE
	RTNCAL	(OSEG,[=201])
	MOVNI	B,5*CWIDTH*TITBIG
	MOVEI	A,[ASCIZ /MODE=/]
	PUSHJ	P,DRWDE0
	MOVE	A,[XWD =101,MODWRD]
	PUSHJ	P,DRWDEM
	RTNCAL	(CSEG,[=201])
	RTNCAL	(REFPT,<[%LEFT+14*CWIDTH*TITBIG],[0]>)		;SCALE
	RTNCAL	(OSEG,[=202])
	MOVNI	B,4*CWIDTH*TITBIG
	MOVEI	A,[ASCIZ /SCL=/]
	PUSHJ	P,DRWDE0
	MOVE	A,[XWD =102,SCLWRD]
	PUSHJ	P,DRWDEM
	RTNCAL	(CSEG,[=202])
	RTNCAL	(REFPT,<[%LEFT+24*CWIDTH*TITBIG],[0]>)		;MACRO LEVEL
	RTNCAL	(OSEG,[=203])
	MOVNI	B,4*CWIDTH*TITBIG
	MOVEI	A,[ASCIZ /LVL=/]
	PUSHJ	P,DRWDE0
	MOVE	A,[XWD =103,LVLWRD]
	PUSHJ	P,DRWDEM
	RTNCAL	(CSEG,[=203])
	RTNCAL	(REFPT,<[%LEFT+31*CWIDTH*TITBIG],[0]>)		;FILE
	RTNCAL	(OSEG,[=204])
	MOVNI	B,2*CWIDTH*TITBIG
	MOVEI	A,[ASCIZ /=/]
	PUSHJ	P,DRWDE0
	MOVE	A,[XWD =104,FILWRD]
	PUSHJ	P,DRWDEM
	RTNCAL	(CSEG,[=204])
	RTNCAL	(REFPT,<[%RIGHT-30],[-20]>)			;READY
	RTNCAL	(OSEG,[=205])
	MOVE	A,[XWD =105,[ASCIZ /*/]]
	PUSHJ	P,DRWDEM
	RTNCAL	(CSEG,[=205])
	RTNCAL	(CSEG,[=200])
	RTNCAL	(MRU,<[0],[1],[-2]>)			;10-MIL UNITS
	RTNCAL	(WINDO,<[-1000],[-1000],[1000],[1000]>)	;FULL SCREEN
	MOVE	T,FBRT					;CURSOR BRIGHTNESS
	PUSHJ	P,MAKBRI
	RTNCAL	(PARAMS,[PLIT PGPBRI])			;CURSOR BRIGHTNESS
	RTNCAL	(OSEG,[=300])				;CURSOR STUFF
	RTNCAL	(AMOV2,<[=110],[14],[14]>)		;CURSOR ITSELF
	RTNCAL	(ALIN2,<[=110],[-14],[-14]>)
	RTNCAL	(AMOV2,<[=110],[14],[-14]>)
	RTNCAL	(ALIN2,<[=110],[-14],[14]>)
	MOVEI	T,2					;DOTTED LINE
	MOVEM	T,PGPBRI+1
	RTNCAL	(PARAMS,[PLIT PGPBRI])
	RTNCAL	(OSEG,[=301])				;CLOCATE
	RTNCAL	(AMOV2,<[=111],[-1000],[0]>)
	RTNCAL	(ALIN2,<[=111],[1000],[0]>)
	RTNCAL	(AMOV2,<[=112],[0],[-1000]>)
	RTNCAL	(ALIN2,<[=112],[0],[1000]>)
	RTNCAL	(CSEG,[=301])
	SOS	PGPBRI+1				;DASHED LINES
	RTNCAL	(PARAMS,[PLIT PGPBRI])
	RTNCAL	(OSEG,[=302])				;LOCATE
	RTNCAL	(AMOV2,<[=115],[-1000],[0]>)
	RTNCAL	(ALIN2,<[=115],[1000],[0]>)
	RTNCAL	(AMOV2,<[=116],[0],[-1000]>)
	RTNCAL	(ALIN2,<[=116],[0],[1000]>)
	RTNCAL	(CSEG,[=302])				;WILL BE BLANKED
	RTNCAL	(CSEG,[=300])
	SETZM	PGPBRI+1
	RTNCAL	(ENDPIC)
	RTNCAL	(TSROOT,[=100])
	RTNCAL	(INTERA,<[PLIT BEGPRG],[PLIT %CLOC]>)
	SETOM	GOING
	PUSHJ	P,CHCINT
	JRST	CURSO1				;SET CURSOR TRACKING
MAKBRI:	MUL	T,NILEV			;SCALE BY PGP CAPABILITY
	DIVI	T,7
	CAIL	TT,4			;ROUND
	AOS	T
	MOVEM	T,PGPBRI
	POPJ	P,

	EBEGPG-.-1
BEGPRG:	ASCIZ	!BEGIN
	ON HCA
	 '113'=0;
	 '114'=0;
	 '301'=$0;
	 '302'=0;
	 [2]='110';
	 [3]='111';
	 [4]='112';
	 [5]='113'\1\;
	 [6]='113'\2\;
	 [7]='114'\1\;
	 [8]='114'\2\;
	 [9]='115';
	 [10]='116';
	END,
	ON TSA
	 XY[2,6,8]=TSXY;
	 X[4]=TSX;
	 Y[3]=TSY;
	END,
	END!
	1
	EBEGPG__.
>;PGP
;APR AND CTRL C TRAPS
DECAPR:	MOVEM	P,DECSVP#
	MOVE	P,.JBCNI	;TYPE LOSSAGE
	TRNE	P,200000
	OUTSTR	[ASCIZ /PDL OVERFLOW /]
	TRNE	P,20000
	OUTSTR	[ASCIZ /ILL MEM REF /]
	OUTSTR	[ASCIZ /APR TRAP
/]
	MOVE	P,[IOWD SPPDSZ,SPPDL]	;BECAUSE PDL OVFL MAYBE
	PUSHJ	P,TODDT
	MOVE	P,DECSVP
	JRST	2,@.JBTPC

CTRLCX:	MOVE P,CCSAVP
	PUSH P,T
VB10,<	SETZ
	SETUWP
	JFCL
>;VB10
	PUSHJ P,DECGO
	POP P,INTBLK+2
	JRST CTRLCY

CTRLCS:	POP P,INTBLK+2		;THIS IS WHERE TO RETURN TO
CTRLCI:	MOVEM	P,DESVP2#
	MOVE	P,[IOWD SPD2SZ,SPPDL2]
	PUSHJ P,PUSHIT
	RELEAS	ODSK,
	SETZM	DSKOPN
	PUSHJ P,DPYREL		;LET GO OF DISPLAY
	PUSH P,0
	PUSH P,M
	MOVEM P,CCSAVP#		;SAVE STACK POINTER IN CASE THIS IS SAVE
	SETZM .JBINT		;DISABLE ^C INTS HERE
VIROS,<	OUTSTR[ASCIZ/^C/]	>
	EXIT	1,
CTRLCY:	MOVE P,CCSAVP
	POP P,M
	POP P,0
	PUSHJ P,DCLAIM		;GET DISPLAY AGAIN
	PUSH	P,FILNAM
	PUSH	P,FILNAM+1
	PUSH	P,FILNAM+2
	PUSH	P,FILNAM+3
	PUSHJ P,LOGINI
	POP	P,FILNAM+3
	POP	P,FILNAM+2
	POP	P,FILNAM+1
	POP	P,FILNAM
	PUSHJ P,POPIT
	MOVEI P,INTBLK
	MOVEM P,.JBINT		;TURN ^C INTERCEPT BACK ON
	HRRZS	P,INTBLK+2
	CAILE	P,DCHR2	;NOW OUTPUTTING TO LOG FILE?
	CAILE	P,DCHR4
	SKIPA			;NO
	MOVEI	P,DCHR2	;YES, RESTART
	CAILE	P,LOGINI	;NOW INITING LOG FILE?
	CAILE	P,LOGIN5
	SKIPA			;NO
	MOVEI	P,CPOPJ		;YES, IGNORE IT
	EXCH P,DESVP2
	SETZM INTBLK+2
	JRST @DESVP2
;INTIALIZE LOG FILE
LOGINI:	SKIPN	DSKOPN
	SKIPN	ISDPY
	POPJ	P,		;NO LOG IF NO DPY OR ALREADY OUTPUTING
	INIT	ODSK,0
	'DSK   '
	DSKOHD,,IOHD
	JRST	[OUTSTR [ASCIZ /
CAN'T INIT DSK. NO LOG FILE BEING WRITTEN!
/]
		POPJ	P,]
	MOVE	T,['DRAW  ']
	MOVEM	T,FILNAM	;SET UP LOG FILE NAME
	MOVSI	T,'LOG'
	MOVEM	T,FILNAM+1
	SETZM	FILNAM+2
	GETPPN	T,		;GET OUR OWN PPN
	MOVEM	T,FILNAM+3
	MOVEM T,1(P)
	LOOKUP	ODSK,FILNAM	;ALREADY EXISTS?
	JRST	LOGINN		;NO, NO HACK TO PERFORM
	MOVE TTT,[3,,T]
	MOVEI T,ODSK
	PATH TTT,		;GET REAL PPN
	MOVE TTT,1(P)		;NO PATH UUO, MAKE IT LOOK OK
	CAME TTT,1(P)
	JRST LOGINN
	HLRE	TT,FILNAM+3	;CALC LAST BLOCK NUMBER
	JUMPE TT,LOGINN		;DON'T HACK 0 LENGTH FILES
	JUMPG	TT,LOGIN3	;MOBY FILES HAVE +BLOCK COUNT
	MOVN	TT,TT
	ADDI	TT,177		;ROUND UP
	LSH	TT,-7		;ASSUME 200 WORDS/BLOCK
	JRST LOGIN3

LOGINN:	SETOM DSKOPN
	CLOSE ODSK,
LOGIN3:	HLLZS	FILNAM+1	;RE-INIT FILE NAME
	SETZM	FILNAM+2
	MOVE T,1(P)		;GET BACK PPN
	MOVEM	T,FILNAM+3
	ENTER	ODSK,FILNAM	;UPDATE MODE FOR EXISTING LOG FILE
	JRST	LOGIN4
	MOVEI	T,DSKOBF
	EXCH	T,.JBFF		;SET UP OUTPUT BUFFER
	OUTBUF	ODSK,1
	MOVEM	T,.JBFF
	SKIPE	DSKOPN		;APPENDING?
	POPJ	P,		;NO, DONE
	USETI	ODSK,(TT)	;GET COPY OF LAST BLOCK
	MOVEI	T,IOBUF		;INPUT LAST BLOCK
	EXCH	T,.JBFF
	INBUF	ODSK,1
	MOVEM	T,.JBFF
	IN	ODSK,
	SOSA	DSKOPN
	JRST	LOGIN6
	USETO	ODSK,(TT)
LOGIN1:	ILDB	C,IOHD+1
	JUMPE	C,LOGIN2
	PUSHJ	P,DCHR2
	SOSLE	IOHD+2
	JRST	LOGIN1
LOGIN2:	CLOSE	ODSK,1		;CLOSE INPUT ONLY
	MOVEI	C,LAMBDA
	JRST	DCHR2

LOGIN6:	OUTSTR [ASCIZ /
LOG FILE INPUT ERROR. NO LOG FILE BEING WRITTEN!
/]
	RELEAS	ODSK,
	POPJ	P,

LOGIN4:	RELEAS	ODSK,0
	SETZM	DSKOPN
	MOVEI	A,FILNAM
	MOVE	C,FPRINT
	JSR	FPRINT
	MOVEM	C,FPRINT
	OUTSTR [ASCIZ /, ENTER FAILED!
/]
LOGIN5:	POPJ	P,
TODDT:	RELEAS	ODSK,0
	SETZM	DSKOPN
	SKIPN	.JBDDT	;IS DDT LOADED
	JRST	[OUTSTR	[ASCIZ/
NO DDT!
/]
		PUSH P,[10000,,CPOPJ]
		POP P,INTBLK+2
		JRST CTRLCI]
	OUTSTR	[ASCIZ/
DDT
/]
	PUSH P,[10000,,CPOPJ]
	POP P,.JBOPC
	SETZM .JBINT
	PUSH P,[10000,,TODDT1]
	PUSH P,.JBDDT
	POPJ P,

TODDT1:	PUSH P,[INTBLK]
	POP P,.JBINT
	POPJ	P,

VB10,<
MAKWRD:	ROT	TTT,=11
	DPB	TTT,[POINT 11,TTT,28]
	LSH	TTT,-7
	TRZ	TTT,776000
	TLZ	TTT,776000
	ADD	TTT,[XWD 220000,160000]
	TDC	TTT,[XWD 1000,1000]
	POPJ	P,
SAVWR2:	0
;VB10C INSTRUCTION COMPILER

CMPVB5:	PUSHJ	P,@(A) [CPOPJ
				INIPNT
				COMERR
				INICHR
				INIVEC
				COMERR
				INIINC
				COMERR]
	POP	P,B
	MOVEM	A,VBMODE
CMPVB:	CAMN	A,VBMODE
	JRST	@(A) [COMPAR
			COMPNT
			COMERR
			COMCHR
			COMVEC
			COMERR
			COMINC
			COMERR]
	JUMPL	A,COMERR
	CAILE	A,7
	JRST	COMERR
	PUSH	P,B
	MOVE	B,VBMODE
	PUSHJ	P,@(B)[	CMPVB1
			CMPVB1
			COMERR
			CMPVB2
			CMPVB3
			COMERR
IFNDEF	ILOSE<		CMPVB4>
IFDEF	ILOSE<		CMPVB1>
			COMERR]
	JRST	CMPVB5
COMPAR:	PUSHJ	P,STASH
	MOVE	A,B
	TRNN	A,10
	JRST	COMPA1
	ANDI	A,7
	MOVEM	A,VBBRIT
COMPA1:	TRNN	B,100
	POPJ	P,
	ANDI	B,60
	LSH	B,-4
	MOVEM	B,VBSIZE
	POPJ	P,

INIPNT:	SETZM	PNTFLG
	POPJ	P,

INICHR:	PUSHJ	P,CHKPR0
	JRST	INICH1
CHKPR0:	MOVE	C,IISIZE
	SOSA C
INIVEC:	MOVEI C,0
	CAMN	C,VBSIZE
	JRST	CHKPR2
CHKPR4:	LDB	B,COMPTR
	SKIPE	VBMODE
	JRST	CHKPR3
CHKPR5:	DPB	C,[POINT 2,B,31]
	MOVEM	C,VBSIZE
	MOVE	C,IIBRIT
	TRZ	B,17
	IORI	B,110(C)
	MOVEM	C,VBBRIT
	DPB	B,COMPTR
	POPJ	P,

CHKPR2:	MOVE	B,IIBRIT
	CAMN	B,VBBRIT
	POPJ	P,
	JRST	CHKPR4
CHKPR3:	PUSH	P,B
	TRZ	B,160000
	DPB	B,COMPTR
	POP	P,B
	ANDI	B,160000
	PUSHJ	P,STASH
	SETZM	VBMODE
	JRST	CHKPR5

INIINC:	PUSHJ	P,CHKPR0
IFNDEF	ILOSE<
	JRST	INIIN1>
IFDEF	ILOSE<
	JRST	INIPNT>

CMPVB1:	LDB	B,COMPTR
	DPB	A,[POINT 3,B,22]
	DPB	B,COMPTR
	POPJ	P,

CMPVB3:	LDB	B,COMPTR
	TRO	B,400000
	DPB	B,COMPTR
CMPVB6:	JUMPE	A,CPOPJ
	MOVE	B,A
	LSH	B,15
	MOVE	C,IIBRIT
	MOVEM	C,VBBRIT
	ADDI	B,10(C)
	SETZM	VBMODE
	JRST	STASH

IFNDEF ILOSE<
CMPVB4:	MOVE	B,TMPDAT
	TRNN	B,177777
	JRST	CMPVB3
	TROA	B,400000
>;-ILOSE
CMPVB2:	MOVE	B,TMPDAT
	PUSHJ	P,STASH
	JRST	CMPVB6
COMCHR:	SKIPE	SHFTIN
	JRST	COMCH1
	TRNN	B,200
	JRST	COMCH2
COMCH3:	ANDI	B,77
	SKIPE	SHFTIN
	CAIGE	B,72
	CAIG	B,37
	CAIGE	B,34
	SKIPA
	PUSHJ	P,COMERR
	MOVE	G,VBSIZE
	MOVEI	A,1
	LSH	A,(G)
	IMULI	A,6
	CAIN	B,33
	JRST	COMCH6
	ADD	A,VBX
	CAILE	A,1777
	POPJ	P,
	MOVEM	A,VBX
COMCH4:	IDPB	B,TMPPTR
	MOVE	B,TMPPTR
	TLNE	B,760000
	POPJ	P,
	MOVE	B,TMPDAT
	PUSHJ	P,STASH
INICH1:	MOVE	B,[POINT 6,TMPDAT,17]
	MOVEM	B,TMPPTR
	MOVEI	B,373737
	MOVEM	B,TMPDAT
	POPJ	P,

COMCH1:	SKIPL	SHFTIN
	JRST	COMCH7
	TRNE	B,100
	JRST	COMCH3
COMCH8:	PUSH	P,B
	MOVEI	B,35
COMCH5:	SETCMM	SHFTIN
	PUSHJ	P,COMCH4
	POP	P,B
	JRST	COMCH3

COMCH7:	SETOM	SHFTIN
	TRNE	B,200
	JRST	COMCH8
	SETZM	SHFTIN
COMCH2:	PUSH	P,B
	MOVEI	B,36
	JRST	COMCH5

COMCH6:	SUB	A,VBY
	JUMPG	A,CPOPJ
	MOVNM	A,VBY
	JRST	COMCH4

COMINC:	MOVE	G,VBSIZE
	MOVEI	A,0
	TRNN	B,10
	JRST	COMIN1
	TRNN	B,4
	AOSA	A
	SOS	A
	ASH	A,(G)
COMIN1:	ADDB	A,VBX
	SKIPL	A		;X OFF SCREEN?
	CAILE	A,1777
	TRZ	B,34		;YES, BEAM TRACKS Y INVISIBLY
	MOVEI	A,0
	TRNN	B,2
	JRST	COMIN2
	TRNN	B,1
	AOSA	A
	SOS	A
	ASH	A,(G)
COMIN2:	ADDB	A,VBY
	SKIPL	A		;Y OFF SCREEN?
	CAILE	A,1777
	TRZ	B,23		;YES, BEAM TRACKS X INVISIBLY
	TRNN	B,17		;NO MOVEMENT?
	POPJ	P,		;NONE, SO RETURN
IFNDEF	ILOSE<
	SKIPN	VISIB
	JRST	COMIN3>
	TRNN	B,20
IFNDEF	ILOSE<
	JRST	COMIN4
COMIN5:	IDPB	B,TMPPTR
	MOVE	B,TMPPTR
	TLNE	B,760000
	POPJ	P,
COMIN6:	MOVE	B,TMPDAT
	TRNE	B,177777
	PUSHJ	P,STASH
INIIN1:	MOVE	B,[POINT 4,TMPDAT,19]
	MOVEM	B,TMPPTR
	SKIPE	B,VISIB
	MOVEI	B,200000
	MOVEM	B,TMPDAT
	POPJ	P,

COMIN3:	TRNN	B,20
	JRST	COMIN5
COMIN4:	PUSH	P,B
	SETCMM	VISIB
	PUSHJ	P,COMIN6
	POP	P,B
	JRST	COMIN5
>	;-ILOSE
IFDEF	ILOSE<
	TDZA	B,B
	MOVEI	B,2000
	ADD	B,VBX
	HRL	B,VBY
	LDB	A,COMPTR
	TRZ	A,140000
	TRO	A,20000
	DPB	A,COMPTR
	SETOM	VBX
	SETOM	VBY>
COMPNT:	MOVS	A,B
	XOR	A,VBY
	TRNE	A,1777
	JRST	COMPN1
	TRNE	B,2000
	JRST	COMPN4
	MOVE	A,B
	XOR	A,VBX
	TRNN	A,1777
	JRST	[MOVN	A,PNTFLG
		MOVEM	A,VBMODE
		JUMPN	A,CPOPJ
		LDB	A,COMPTR
		TRZ	A,160000
		DPB	A,COMPTR
		POPJ	P,]
COMPN4:	TRZ	B,774000
	TRO	B,20000
	MOVE	A,B
	ANDI	A,1777
	MOVEM	A,VBX
	SETOM	PNTFLG
	JRST	STASH
COMPN1:	TRNN	B,2000
	JRST	COMPN3
	MOVE	A,B
	XOR	A,VBX
	TRNE	A,1777
	JRST	COMPN3
COMPN2:	MOVSS	B
	TRZ	B,776000
	HRRZM	B,VBY
	TLNE	B,2000
	TROA	B,222000
	TRO	B,220000
	SETOM	PNTFLG
	JRST	STASH

COMPN3:	PUSH	P,B
	TRZ	B,2000
	PUSHJ	P,COMPN2
	POP	P,B
	JRST	COMPN4

COMVEC:	LDB	A,[POINT 8,B,27]
	TRZE	A,200
	MOVNS	A
	ADDM	A,VBY
	MOVE	A,B
	ANDI	A,377
	TRZE	A,200
	MOVNS	A
	ADDM	A,VBX
	TRZ	B,400000
	TRO	B,200000
	JRST	STASH

STORAGE(IMPURE)
PNTFLG:	0			;0=LAST VB 1/2 WORD=PARAM MODE, -1=PNT
SHFTIN:	0			;0=SHIFT IN, -1= SHIFT OUT, +1= NOT SURE
VBMODE:	0			;VB MODE
VBX:	0			;X COORD
VBY:	0			;Y COORD
TMPDAT:	0			;TMP FOR INCREMENTS AND CHRS
TMPPTR:	0			;BYTE PTR FOR TMPDAT
COMCNT:	0			;COUNT OF III COMMAND WORDS
COMIDX:	0			;PTR TO III COMMAND LIST
COMCTR:	0			;COUNT OF VB10 COMMAND BYTES
COMPTR:	0			;PTR TO VB COMMAND LIST
IFNDEF	ILOSE<
VISIB:	0			;VISIBILITY FLAG FOR INCREMENTS
>
VBSIZE:	0			;CURRENT SCALE
VBBRIT:	0			;CURRENT BRITNESS
STOPCD:	0			;PTR TO LAST STOP INTERRUPT

CHFLG:	0
SIMPTR:	0
IIBRIT:	0
IISIZE:	0
IIX:	0
IIY:	0
STORAGE(PURE)

COMERR:	OUTSTR	[ASCIZ/
?BUG IN VB DATA
/]
	JRST	TODDT		;I.E. TO DDT

STASH:	SOSG	COMCTR
	JRST	TOOBIG
STASH1:	IDPB	B,COMPTR
	POPJ	P,

TOOBIG:
NOVIROS,<
	PUSH	P,B
	PUSHJ	P,DSTOP
	MOVEI	B,4000
	ADDM	B,COMCTR
CNTEXP:	HRRZ	B,.JBREL
	ADDI	B,2000
	CORE	B,
	JRST	[OUTSTR[ASCIZ/
CAN'T EXPAND LOW SEGMENT
/]
		PUSHJ	P,TODDT
		JRST CNTEXP]
	PUSHJ	P,DSTART
	POP	P,B
	JRST	STASH1
>;NOVIROS
VIROS,<
	SKIPN COMCTR			;FIRST TIME OUT?
	OUTSTR[ASCIZ/
SORRY, RAN OUT OF SYSTEM BUFFER SPACE.
WILL TRY TO LIMP ALONG.
/]
	POPJ P,
>;VIROS
>;VB10

NOGT,<
DPOUT:	SKIPN ISDPY
	POPJ P,
	LDB	T,[POINT 4,A,12]
	JUMPE	T,DSTART
	HRRZ	B,1(A)
	MOVEM	B,COMCNT
VB10,<	CAILE	T,4
	JRST	DPOUT3
>;VB10
	PUSHJ	P,PGFLSH
	SKIPN	COMCNT
VB10,<	JRST	DPOUT5	>
PGP,<	POPJ	P,	>
	PUSH	P,T
	SKIPL	GOING
	PUSHJ	P,DISERR
>;NOGT
VB10,<	MOVSI	C,-4
	MOVE	D,FBUF
	AOS	D
	HRRZ	B,PGTBL(C)
	CAIL	B,(D)
	MOVE	D,PGTBL(C)
	AOBJN	C,.-3
	HLRZ	TT,D
	ADDI	TT,(D)
	MOVEM	TT,STOPCD
	AOS	TT
	HRRZM	TT,PGTBL-1(T)
	JRST	DPOUT4

DPOUT3:	JUMPE	B,CPOPJ
	MOVEI	T,4
	PUSH	P,T
	SKIPN	B,PGTBL+3
	PUSHJ	P,DISERR
	MOVSI	C,-3
	HRRZ	D,PGTBL(C)
	CAIL	D,(B)
	PUSHJ	P,DISERR
	AOBJN	C,.-3
	HLRZ	TT,B
	ADDI	TT,(B)
	MOVEM	TT,STOPCD
	AOS	TT
DPOUT4:	TLO	TT,442200
	MOVEM	TT,COMPTR
	HRRZ	B,.JBREL
	SUBI	B,(TT)
	ADDI	B,2(B)
	MOVEM	B,COMCTR
	MOVEI	B,0
	PUSHJ	P,STASH
	SETOM	VBX
	SETOM	VBY
	SETOM	VBSIZE
	SETOM	VBBRIT
	SETZM	CHFLG
	SETZM	VBMODE
	MOVEI	B,1
	MOVEM	B,SHFTIN
>;VB10
PGP,<	SETOM	PGPBRI		;FORCE PARAM OUT
	MOVN	T,BLNKIT	;SET BLINK STATE
	MOVEM	T,PGPBRI+2
	SETZM	PGPBRI+1	;SOLID LINES
	SETZM	BLNKIT		;RESET BLINK FLAG
	SETZM	PSEGN		;PRIMITIVES TO SEGMENT 0
	MOVEI	T,1B18		;PHONEY X COORD TO FORCE A MOVE
	MOVEM	T,PGPX
	RTNCAL	(MRU,<[0],[1],[-2]>)			;10-MIL UNITS
	RTNCAL	(WINDO,<[-1000],[-1000],[1000],[1000]>)	;FULL SCREEN
	RTNCAL	(OSEG)			;USES ARG ALREADY ON THE STACK
>;PGP
NOGT,<	HRRZ	B,(A)
	MOVEM	B,COMIDX
	HRRZ	B,1(A)
	MOVEM	B,COMCNT
GETII1:	AOS	COMIDX
	SOSG	COMCNT			;END TEST
	JRST	DPOUT1
GETIII:	MOVE	A,@COMIDX
	TRZE	A,1
	JRST	DISCHR
VB10,<	SETZM	CHFLG	>
	TRNE	A,10
	PUSHJ	P,DISERR
	MOVE	B,A
	LSH	B,-1
	ANDI	B,3
	PUSHJ	P,@(B)[DISHLT
			DISVCT
			DISERR
			DISPNT]
	JRST	GETII1
>;NOGT

VB10,<
DPOUT1:	SETZB	A,B
	SKIPE	VBMODE		;ALREADY HAVE PARAM WORD?
	PUSHJ	P,CMPVB		;NO, SO MAKE ONE
	MOVE	C,COMPTR	;INSERT JMP FBUF+2
	MOVEI	B,160000
	TLNE	C,20000		;JMP WORD MUST BE LEFT 1/2
	PUSHJ	P,STASH
	DPB	B,COMPTR
	PUSHJ	P,STASH		;MAKE SURE WE HAVE ONE FREE WORD
	MOVEI	B,FBUF+2
	MOVEM	B,@COMPTR
	MOVE	B,[XWD 400000,NULLO]
	MOVEM	B,@STOPCD	;REMOVE OLD JMP FBUF+2
	HRRZ	B,COMPTR
	POP	P,T
	SUB	B,PGTBL-1(T)
	HRLM	B,PGTBL-1(T)
	HRRZ	B,COMPTR
DPOUT5:	JUMPE	B,CPOPJ
	PUSHJ	P,REDUCE
	JRST DSTART
>;VB10
PGP,<
DPOUT1:	POP	P,T
	MOVEI	TT,1
	LSH	TT,(T)
	IORM	TT,PGBITS
	RTNCAL	(CSEG,T)
	RTNCAL	(ENDPIC)
	POPJ	P,
>;PGP

DISERR:	OUTSTR	[ASCIZ /BUG IN DISPLAY DATA
/]
	JRST	TODDT

VB10,<
PGFLSH:	SKIPN	B,PGTBL-1(T)
	POPJ	P,
	MOVSI	C,-4
	HLRZ	F,B
	SETCM	F,F
	SETZM	PGTBL-1(T)
	MOVE	D,FBUF
	AOS	D

PGFLS2:	MOVE	E,PGTBL(C)
	HRRZ	H,E
	CAILE	H,(B)
	ADDM	F,PGTBL(C)
	CAILE	H,(D)
	MOVE	D,E
	AOBJN	C,PGFLS2
	HRRZ	C,D
	CAIG	C,(B)
	JRST	PGFLS1
	HLRZ	E,D
	ADD	C,E
	ADD	C,F
	HRRZ	E,B
	MOVEI	D,-1(E)
	SUB	E,F
	HRL	B,E
	MOVEI	E,FBUF+2
	MOVEM	E,(D)
	BLT	B,(C)
	MOVE	E,[XWD 400000,NULLO]
	MOVEM	E,(D)
	HRRZ	B,C
	JRST DSTART

PGFLS1:	HLRZ	B,D
	ADDI	B,(D)
	MOVEI	C,FBUF+2
	MOVEM	C,(B)
	JRST DSTART

DISCH2:	MOVEI	A,3
	PUSHJ	P,CMPVB
DISCH1:	POP	P,A
DISCHR:	JUMPE	A,GETII1
	MOVEI	B,0
	ROTC	A,7
	JUMPE	B,DISCHR
	PUSH	P,A
	ROTC	A,-2
	SKIPGE	A
	SKIPA	B,CHRTBL(B)
	MOVS	B,CHRTBL(B)
	TLNN	A,200000
	LSH	B,-=9
	ANDI	B,777
	MOVE	C,IISIZE
	MOVE	C,WDTBL-1(C)
	MOVE	D,IIX
	ADDM	C,IIX
	CAMGE	D,[-1000]
	JRST	DISCH1
	ADD	D,C
	CAILE	D,777
	JRST	DISCH3
	SKIPN	CHFLG
	JRST	DISCH4
DISCH5:	TRZN	B,400
	JRST	DISCH2
	ADD	B,[POINT 5,TALPHA]
	MOVEM	B,SIMPTR
DISSIM:	ILDB	B,SIMPTR
	JUMPE	B,DISCH1
	MOVEI	A,6
	PUSHJ	P,CMPVB
	JRST	DISSIM
DISCH3:	MOVEM	D,IIX
	JRST	DISCH1

WDTBL:	CWIDTH
	2*CWIDTH
	4*CWIDTH
	8*CWIDTH

DISCH6:	POP	P,A
	JRST	GETII1

DISCH4:	MOVE	D,IIY
	CAMGE	D,[-1000]
	JRST	DISCH6
	ADD	D,C
	ADD	D,C
	CAILE	D,777
	JRST	DISCH6
	SETOM	CHFLG
	PUSH	P,B
	MOVEI	A,0
	MOVE	B,IISIZE
	MOVE	B,WDTBL-1(B)
	LSH	B,-1
	EXCH	C,B
	MOVNS	B
	ADDI	B,2(C)		;UNDO LOSING III OFFSET
	ADD	B,IIX
	ADD	C,IIY
	PUSHJ	P,MAKPNT
	POP	P,B
	JRST	DISCH5

TALPHA:
PHASE	400
ALF::	BYTE (5) 12,12,12,30,37,36,34
	BYTE (5) 37,23,33,30,32,33,10
	BYTE (5) 10,0
BET::	BYTE (5) 14,30,32,22,30,36,22
	BYTE (5) 30,36,22,30,33,23,33
	BYTE (5) 37,13,13,10,0
NAY::	BYTE (5) 02,02,30,30,30,30,30
	BYTE (5) 23,23,10,13,0
EPS::	BYTE (5) 30,30,30,16,22,34,37
	BYTE (5) 22,22,32,30,30,13,13
	BYTE (5) 03,03,0
PIE::	BYTE (5) 30,22,22,22,36,30,30
	BYTE (5) 30,30,37,23,23,23,10
	BYTE (5) 10,10,0
LAM::	BYTE (5) 32,32,36,36,03,03,03
	BYTE (5) 23,12,10,30,33,10,10
	BYTE (5) 0
INF::	BYTE (5) 22,22,22,30,33,23,37
	BYTE (5) 34,12,12,32,30,23,23
	BYTE (5) 37,30,10,10,0
DEL::	BYTE (5) 30,36,22,32,30,30,33
	BYTE (5) 22,22,36,36,34,13,13
	BYTE (5) 13,03,23,37,34,10,10
	BYTE (5) 10,10,0
CAP::	BYTE (5) 22,22,22,22,32,30,30
	BYTE (5) 33,23,23,23,13,10,0
ALL::	BYTE (5) 32,36,22,22,02,22,23
	BYTE (5) 33,30,30,30,22,22,03
	BYTE (5) 03,23,23,37,37,10,10
	BYTE (5) 10,10,0
EXI::	BYTE (5) 14,30,30,30,30,30,22
	BYTE (5) 22,22,22,22,22,34,34
	BYTE (5) 34,34,03,03,33,30,30
	BYTE (5) 13,13,13,0
IFF::	BYTE (5) 22,30,30,30,23,32,36
	BYTE (5) 14,36,36,32,23,30,30
	BYTE (5) 30,13,13,03,03,0
NEQ::	BYTE (5) 02,02,02,22,30,33,22
	BYTE (5) 30,30,36,32,17,17,17
	BYTE (5) 37,30,23,37,12,32,30
	BYTE (5) 30,13,13,0
LEQ::	BYTE (5) 12,10,32,34,34,34,32
	BYTE (5) 32,32,17,17,03,03,37
	BYTE (5) 30,30,30,10,10,10,0
GEQ::	BYTE (5) 02,22,30,30,30,36,36
	BYTE (5) 36,03,03,03,03,23,30
	BYTE (5) 30,30,10,10,10,0
IDN::	BYTE (5) 22,30,30,30,30,02,22
	BYTE (5) 34,34,34,34,02,22,30
	BYTE (5) 30,30,30,13,13,03,03
	BYTE (5) 0
CUP::	BYTE (5) 32,36,22,22,22,10,10
	BYTE (5) 10,30,23,23,23,37,34
	BYTE (5) 13,10,10,10,0
ATS::	BYTE (5) 30,36,22,22,22,22,32
	BYTE (5) 30,30,33,23,34,34,23
	BYTE (5) 23,30,32,23,17,37,30
	BYTE (5) 10,10,10,0
GAM::	BYTE (5) 02,02,02,22,32,33,33
	BYTE (5) 33,23,37,36,22,12,32
	BYTE (5) 13,13,03,03,0
SIG::	BYTE (5) 22,22,22,32,32,22,30
	BYTE (5) 30,17,37,30,33,23,17
	BYTE (5) 17,34,30,30,32,13,10
	BYTE (5) 0
OHM::	BYTE (5) 30,34,32,36,22,32,30
	BYTE (5) 30,33,23,37,23,30,10
	BYTE (5) 10,0
INT::	BYTE (5) 22,33,32,22,22,22,22
	BYTE (5) 32,33,13,13,03,03,03
	BYTE (5) 0
PLM::	BYTE (5) 22,30,30,22,22,22,34
	BYTE (5) 34,12,32,23,33,30,17
	BYTE (5) 03,23,30,13,10,0
MU::	BYTE (5) 22,23,23,23,12,12,22
	BYTE (5) 34,36,22,22,10,10,30
	BYTE (5) 23,23,33,13,10,0
DEPHASE
CHRTBL:
BYTE (9) 100,150,ALF,BET	;NUL	DWNARO	ALF	BET
BYTE (9) 141,NAY,EPS,PIE	;AND	BAR	RNDE	PI
BYTE (9) LAM,GAM,SIG,INT	;LAMBDA	GAMMA	SIGMA	INTEGRATE
BYTE (9) PLM,200,INF,DEL	;PLSMNS	CRCPLS	INFINTY	DELTA
BYTE (9) 145,144,CAP,CUP	;LEFTU	RGHTU	DOWNU	UPU
BYTE (9) ALL,EXI, MU,IFF	;UPA	BAKE	MICRO	DUBLARO
BYTE (9) OHM,147,143,NEQ	;OMEGA	RITEARO	SQG	SLSHEQ
BYTE (9) LEQ,GEQ,IDN,142	;LESBAR	MOREBAR	EQUBAR	OR
BYTE (9) 340,241,242,243	;SP	!	"	#
BYTE (9) 244,245,246,247	;$	%	&	'
BYTE (9) 250,251,252,253	;(	)	*	+
BYTE (9) 254,255,256,257	;,	-	.	/
BYTE (9) 260,261,262,263	;0	1	2	3
BYTE (9) 264,265,266,267	;4	5	6	7
BYTE (9) 270,271,272,273	;8	9	:	;
BYTE (9) 274,275,276,277	;<	=	>	?
BYTE (9) ATS,201,202,203	;@	A	B	C
BYTE (9) 204,205,206,207	;D	E	F	G
BYTE (9) 210,211,212,213	;H	I	J	K
BYTE (9) 214,215,216,217	;L	M	N	O	
BYTE (9) 220,221,222,223	;P	Q	R	S
BYTE (9) 224,225,226,227	;T	U	V	W
BYTE (9) 230,231,232,153	;X	Y	Z	[
BYTE (9) 152,154,146,151	;\	]	^	_
BYTE (9) 166,101,102,103	;'	a	b	c
BYTE (9) 104,105,106,107	;d	e	f	g
BYTE (9) 110,111,112,113	;h	i	j	k
BYTE (9) 114,115,116,117	;l	m	n	o
BYTE (9) 120,121,122,123	;p	q	r	s
BYTE (9) 124,125,126,127	;t	u	v	w
BYTE (9) 130,131,132,153	;x	y	z	{
BYTE (9) 162,167,154,152	;LINE	ROOF	~	DEL
DISPNT:	TRNE	A,34000			;
	JRST	DISBRT			;
DISPN1:	TRNE	A,3400			;
	JRST	DISSIZ			;
DISPN2:	LDB	B,[POINT 11,A,10]	;X
	LDB	C,[POINT 11,A,21]	;Y
	TRNE	B,2000			;
	ORCMI	B,1777			;
	TRNE	C,2000			;
	ORCMI	C,1777			;
	TRNE	A,100			;
	JRST	DISPN3			;
DISPN0:	ADD	B,IIX			;
	ADD	C,IIY			;
DISPN3:	TRNE	A,40			;
	JRST	DISPN4			;
	TRNN	A,20			;
	JRST	DISPN5			;
	MOVEM	B,IIX			;POINT
	MOVEM	C,IIY			;
	MOVEI	A,2000			;FALL INTO MAKPNT
MAKPNT:	ANDI	B,3777			;
	ANDI	C,3777			;
	TRC	B,2000			;
	TRC	C,2000			;
	SUBI	B,1000			;
	SUBI	C,1000			;
	TRNN	B,2000			;
	TRNE	C,2000			;
	POPJ	P,			;
	HRL	B,C			;
	IOR	B,A			;
	MOVEI	A,1			;
	JRST	CMPVB			;
DISPN4:	MOVEM	B,IIX			;INVIS POINT
	MOVEM	C,IIY			;
	POPJ	P,			;

DISPN5:	MOVE	D,B			;LONG VECTOR
	MOVE	E,C			;
	EXCH	B,IIX			;BC=XY1 ,DE=XY2
	EXCH	C,IIY			;
	MOVE	A,D			;
	SUB	A,B			;DX
	MOVE	F,E			;
	SUB	F,C			;DY
	CAIG	B,777			;
	CAMGE	B,[-1000]		;
	JRST	P1OFF			;
	CAIG	C,777			;
	CAMGE	C,[-1000]		;
	JRST	P1OFF			;
DISPN6:	CAIG	D,777			;
	CAMGE	D,[-1000]		;
	JRST	P2OFF			;
	CAIG	E,777			;
	CAMGE	E,[-1000]		;
	JRST	P2OFF			;
DISPN7:	SUB	D,B			;
	SUB	E,C			;
	PUSH	P,D			;
	PUSH	P,E			;
	MOVEI	A,0			;
	PUSHJ	P,MAKPNT		;
DISPN9:	POP	P,C			;
	POP	P,A			;
	CAIG	A,177			;
	CAMGE	A,[-177]		;
	JRST	SPLIT			;
	CAIG	C,177			;
	CAMGE	C,[-177]		;
	JRST	SPLIT			;
DISPN8:	MOVEI	B,200000		;
	SKIPGE	A			;
	TRO	B,200			;
	SKIPGE	C			;
	TRO	B,100000		;
	MOVMS	A			;
	MOVMS	C			;
	IOR	B,A			;
	DPB	C,[POINT 7,B,27]	;
	MOVEI	A,4			;
	JRST	CMPVB			;
SPLIT:	MOVM	B,A			;
	MOVM	D,C			;
	CAMGE	D,B			;
	MOVE	D,B			;
	ADDI	D,176			;
	IDIVI	D,177			;
	PUSH	P,A			;
	PUSH	P,C			;
	IDIV	A,D			;
	IDIV	C,D			;
	MOVN	D,A			;
	ADDM	D,-1(P)			;
	MOVN	D,C			;
	ADDM	D,(P)			;
	PUSHJ	P,DISPN8		;
	JRST	DISPN9			;
P1OFF:	PUSHJ	P,PXOFFF		;
	 POPJ	P,			;ALL OFF
	MOVE	A,D			;
	SUB	A,B			;
	MOVE	F,E			;
	SUB	F,C			;
	JRST	DISPN6			;

P2OFF:	EXCH	B,D			;
	EXCH	C,E			;
	PUSHJ	P,PXOFFF		;
	 PUSHJ	P,DISERR		;
	EXCH	B,D			;
	EXCH	C,E			;
	JRST	DISPN7			;

PXOFFF:	JUMPE	F,PXOFFE		;
	CAMGE	C,E			;
	SKIPA	T,[-1000]		;
	MOVEI	T,777			;
	CAMN	E,T			;
	JRST	PXOFF2			;
	CAMG	E,T			;
	JRST	PXOFF1			;
	CAMLE	C,T			;
	JRST	PXOFFE			;
PXOFF2:	SUB	T,E			;X=(Y-Y2)*DX/DY+X2
	MUL	T,A			;
	DIV	T,F			;
	ADD	T,D			;
	CAILE	T,777			;
	JRST	PXOFFR			;
	CAMGE	T,[-1000]		;
	JRST	PXOFFL			;
	CAMGE	C,E			;
	SKIPA	C,[-1000]		;
	MOVEI	C,777			;
	MOVE	B,T			;
	JRST	CPOPJ1			;

PXOFF1:	CAML	C,T			;
	JRST	PXOFF2			;
PXOFFE:	CAMGE	B,D			;
PXOFFL:	SKIPA	T,[-1000]		;
PXOFFR:	MOVEI	T,777			;
	JUMPE	A,CPOPJ			;
	CAMN	D,T
	JRST	PXOFF3
	CAMG	D,T
	JRST	PXOFF4
	CAMLE	B,T
	POPJ	P,
PXOFF3:	MOVE	B,T			;Y=(X-X2)*DY/DX+Y2
	SUB	T,D			;
	MUL	T,F			;
	DIV	T,A			;
	ADD	T,E			;
	CAIG	T,777			;
	CAMGE	T,[-1000]		;
	POPJ	P,			;
	MOVE	C,T			;
	JRST	CPOPJ1			;

PXOFF4:	CAML	B,T
	JRST	PXOFF3
	POPJ	P,

DISBRT:	LDB	B,[POINT 3,A,24]	;
	MOVEM	B,IIBRIT		;
	JRST	DISPN1			;

DISSIZ:	LDB	B,[POINT 3,A,27]	;
	MOVEM	B,IISIZE		;
	JRST	DISPN2			;

DISHLT:	TRNE	A,20			;
	PUSHJ	P,DISERR		;
	MOVEI	A,0			;
	MOVEI	B,3000			;HALT
	SETZM	COMCNT			;
	JRST	CMPVB			;
>;VB10

NOGT,<
DISVCT:	PUSH	P,A			;
	PUSHJ	P,DISVC1		;
	POP	P,A			;
	DPB	A,[POINT 20,A,19]	;
DISVC1:	LDB	B,[POINT 7,A,6]		;
	LDB	C,[POINT 7,A,13]	;
	TRNE	B,100			;
	ORCMI	B,77			;
	TRNE	C,100			;
	ORCMI	C,77			;
	LSH	A,=16			;
	JRST	DISPN0			;
>;NOGT

VB10,<
%DPCLR:	SKIPN ISDPY
	POPJ P,
	PUSHJ	P,DSTOP
	SETZM	PGTBL
	SETZM	PGTBL+1
	SETZM	PGTBL+2
	SETZM	PGTBL+3
	MOVEI	C,FBUF+2
	MOVE	B,FBUF
	AOS	B
	MOVEM	C,(B)
REDUCE:
NOVIROS,<
	TRO	B,1777
	CAML	B,.JBREL
	POPJ	P,
	PUSHJ	P,DSTOP
	CORE	B,
	JFCL
>;NOVIROS		CAN'T GIVE IT BACK HERE ON VIROS
	POPJ	P,
>;VB10					;;JB END OF VB10C STUFF.
GT,<					;;JB IF GT40, ASSEMBLE IN THE FOLLOWING.
DPOUT:	SKIPN ISDPY
	POPJ P,
	PUSHJ	P,SAVER			;;JB SAVE ALL MAJOR REGISTERS NOW.
	LDB	14,[POINT 4,A,12]	;;JB GET THE BUFFER NUMBER=PICT. #
	JUMPE	14,RESTRE		;;JB 0=NOTHING. RESTORE AND RETURN.
	HRRZ	15,1(A)			;;JB PICK UP THE COUNT OF "III" VECTORS.
	HRRZ	16,0(A)			;;JB AND THE STARTING ADDRESS.
	PUSHJ	P,TRANS8		;;JB TRANSLATE THEM AND SEND THEM OUT.
	JRST	RESTRE			;;JB RESTORE THE REGISTERS AND RETURN.

%DPCLR:	SKIPN ISDPY
	POPJ P,
	JRST	CLEARS			;;JB ON A CLEAR, SIMPLY CALL THE CLEAR ROUTINE.
>;GT					;;JB END OF OUR STUFF.
PGP,<				;PGP CODE
PGFLSH:	MOVEI	TT,1		;FIND RIGHT BIT
	LSH	TT,(T)
	TDNN	TT,PGBITS	;THIS PG IN USE?
	POPJ	P,		;NO
	ANDCAM	TT,PGBITS	;YES, CLR THE BIT
	MOVEM	T,OUTBLK	;FLUSH THE PG IN THE PGP
	RTNCAL	(INTERA,<[PLIT PUTPRG],[PLIT [PLIT OUTBLK]]>)
	JRST	CHCINT		;MAKE IT HAPPEN AND RETURN

DISPNT:	TRNE	A,34000		;BRIGHTNESS CHANGING?
	JRST	DISBRT		;YES, DO IT
DISPN1:	TRNE	A,3400		;CHR SIZ CHANGING?
	JRST	DISSIZ		;YES, DO IT
DISPN2:	LDB	B,[POINT 11,A,10] ;GET X
	LDB	C,[POINT 11,A,21] ;GET Y
	TRNE	B,2000		;SIGN EXTEND X
	ORCMI	B,1777
	TRNE	C,2000		;SIGN EXTEND Y
	ORCMI	C,1777
	TRNE	A,100		;ABSOLUTE?
	JRST	DISPN3		;YES
DISPN0:	ADD	B,IIX		;NO, MAKE ABSOLUTE
	ADD	C,IIY
DISPN3:	TRNE	A,40		;VISIBLE?
	JRST	DISPN4		;NO
	TRNN	A,20		;VECTOR?
	JRST	DISPN5		;YES
	MOVEM	B,IIX		;NO, POINT, SET XY
	MOVEM	C,IIY
	CAMN	B,PGPX		;AT RIGHT X?
	CAME	C,PGPY		;YES, AND AT RIGHT Y?
	PUSHJ	P,DISPN8	;NO, MOVE THERE
DISPN7:	RTNCAL	(ILIN2,<PSEGN,[0],[0]>) ;ZERO LENGTH VECTOR = POINT
	POPJ	P,

DISPN8:	MOVEM	B,PGPX		;SET PGP XY
	MOVEM	C,PGPY
DISPN9:	RTNCAL	(AMOV2,<PSEGN,B,C>) ;GET PGP TO RIGHT SPOT
	POPJ	P,

DISPN5:	PUSH	P,B		;SAVE XY
	PUSH	P,C
	MOVE	B,IIX		;PGP AT RIGHT XY?
	MOVE	C,IIY
	CAMN	B,PGPX
	CAME	C,PGPY
	PUSHJ	P,DISPN9	;NO, GET IT THERE
	POP	P,C		;RESTORE XY
	POP	P,B
	MOVEM	B,IIX		;SET X-Y
	MOVEM	C,IIY
	MOVEM	B,PGPX		;SET PGP XY
	MOVEM	C,PGPY
	RTNCAL	(ALIN2,<PSEGN,B,C>) ;MAKE ABSOLUTE VECTOR
	POPJ	P,

DISPN4:	MOVEM	B,IIX		;SET X-Y
	MOVEM	C,IIY
	POPJ	P,

DISBRT:	LDB	B,[POINT 3,A,24]	;GET III BRIGHTNESS
	MOVEM	B,IIBRIT
	MUL	B,NILEV			;SCALE TO PGP BRIGHTNESS
	DIVI	B,7
	CAIL	C,4			;ROUND
	AOS	B
	CAMN	B,PGPBRI		;NEED TO CHANGE?
	JRST	DISPN1			;NO
	MOVEM	B,PGPBRI		;YES, REMEMBER NEW BRIGHTNESS
	PUSH	P,A			;SAVE AC
	RTNCAL	(PARAMS,[PLIT PGPBRI])	;SET PARAMS
	POP	P,A			;RESTORE AC
	JRST	DISPN1			;DO REST OF VECTOR WORD

DISSIZ:	LDB	B,[POINT 3,A,27]	;GET III CHR SIZ
	SUBI	B,1
	MOVEM	B,IISIZE		;JUST SAVE
	JRST	DISPN2			;DO REST OF VECTOR WORD

DISCHR:	JUMPE	A,GETII1		;ALL CHRS DONE?
	SETZ	B,			;NO, GET NEXT CHR
	ROTC	A,7
	JUMPE	B,DISCHR		;NULL CHR?
	PUSH	P,A			;NO, SAVE REMAINING CHRS
	PUSHJ	P,CHRDRW		;DRAW THIS CHR
	POP	P,A			;RESTORE CHRS
	JRST	DISCHR			;DO THE REMAINING ONES

CHRDRW:	PUSH	P,IIX			;SAVE CHR START POINT
	PUSH	P,IIY
	PUSH	P,CHRTAB(B)		;GET PTR TO STROKE TABLE
	MOVEI	C,CWIDTH		;***UNDO LOSING III OFFSET
	ASH	C,@IISIZE
	MOVEI	B,(C)
	LSH	C,-1
	SUBI	B,(C)
	ADDI	B,2
	ADDM	B,IIX
	ADDM	C,IIY			;***
CHRDR1:	ILDB	A,(P)			;GET NEXT STROKE
	JUMPE	A,CHRDR4		;LAST STROKE?
	LDB	B,[POINT 4,A,31]	;NO, EXTRACT X
	LDB	C,[POINT 4,A,35]	;EXTRACT Y
	SUBI	B,10			;REMOVE OFFSET
	SUBI	C,10
	ASH	B,@IISIZE		;SCALE BY CHR SIZ
	ASH	C,@IISIZE
	TRNE	A,1B27			;VISIBLE STROKE?
	JRST	CHRDR2			;YES
	ADDM	B,IIX			;NO, JUST UPDATE COORDS
	ADDM	C,IIY
	JRST	CHRDR1			;TO NEXT STROKE

CHRDR2:	MOVE	D,IIX			;PGP AT RIGHT SPOT?
	CAME	D,PGPX
	JRST	CHRDR5			;NO
	MOVE	D,IIY
	CAME	D,PGPY
	JRST	CHRDR5			;NO
CHRDR3:	ADDB	B,IIX			;YES, UPDATE NEW III COORDS
	ADDB	C,IIY
	MOVEM	B,PGPX			;AND UPDATE PGP COORDS
	MOVEM	C,PGPY
	RTNCAL	(ALIN2,<PSEGN,B,C>)	;DRAW THE STROKE
	JRST	CHRDR1			;NEXT STROKE

CHRDR4:	POP	P,(P)			;FLUSH BYTE PTR
	POP	P,IIY			;RESTORE ORIGINAL Y
	POP	P,IIX			;UPDATE X BY 1 CHR WIDTH
	MOVEI	A,CWIDTH
	ASH	A,@IISIZE		;SCALED BY CHR SIZE
	ADDM	A,IIX
	POPJ	P,			;DONE WITH CHR

CHRDR5:	PUSH	P,B			;SAVE DESIRED COORDS
	PUSH	P,C
	RTNCAL	(AMOV2,<PSEGN,IIX,IIY>)	;INVISIBLE MOVE TO DESIRED SPOT
	POP	P,C			;RESTORE COORDS
	POP	P,B
	JRST	CHRDR3			;DRAW THE STROKE

DISHLT:	TRNE	A,20			;UNKNOWN FUNCTION?
	PUSHJ	P,DISERR		;YES, COMPLAIN
	SETZM	COMCNT			;NO, SIMULATE HALT
	RTNCAL	(CSEG,SEGN)
	RTNCAL	(ENDPIC)
	POPJ	P,

DRWDEM:	SETZ	B,			;DRW CHRS AT REFPT
DRWDE0:	MOVEM	B,IIX			;DRW CHRS AT SELECTED OFFSET
	SETZM	IIY
	HLRZM	A,PSEGN			;SEGN TO USE
	HRLI	A,440700		;MAKE CHR BYTE PTR
	PUSH	P,A			;SAVE FOR GETTING CHRS
	MOVSI	A,1B18			;FORCE PGP MOVE COMMAND
	MOVEM	B,PGPX
	MOVEI	A,TITBIG-1		;SET UP CHR SIZE
	MOVEM	A,IISIZE
DRWDE1:	ILDB	B,(P)			;GET NEXT CHR
	JUMPE	B,DRWDE2		;END OF STRING?
	PUSHJ	P,CHRDRW		;NO, DRAW IT
	JRST	DRWDE1			;DO NEXT CHR

DRWDE2:	POP	P,(P)			;FIX UP STACK
	POPJ	P,

PGPERR:	OUTSTR	[ASCIZ /PICTURE TOO BIG FOR PGP
/]
	RTNCAL	(ERRACK)		;RESET PGP
	SETZM	$VAL			;REINIT ERROR CELL
	POPJ	P,

%DPCLR:	RTNCAL	(STPIC)			;START NEW PICTURE
	RTNCAL	(OSEG,[0])		;GET AROUND PGP BUG
	RTNCAL	(CSEG,[0])		;***
	RTNCAL	(ENDPIC)		;IMMEDIATE STOP
	RTNCAL	(INTERA,<[PLIT %CLPRG],[PLIT NULARG]>)
	SETZM	GOING
	JRST	CHCINT

	E%CLPG-.-1
%CLPRG:	ASCIZ	!BEGIN
	ON HCA
	 TSA=0;
	END,
	END!
	0
	E%CLPG__.

STORAGE(IMPURE)
COMCNT:	0
COMIDX:	0
IIBRIT:	0
IISIZE:	0
IIX:	0
IIY:	0
PGPX:	0
PGPY:	0
PGPJBF:	0
	6
PGPBRI:	BLOCK	6
STORAGE(PURE)
>;PGP
;COME HERE TO PUT DEFAULT PPN IN AC OF THE UUO
%DSKPN:	MOVEI	B,C
	MOVEI	C,-1
	SETZ E,
	PATH	B,		;PATH UUO
	GETPPN	E,		;IF NOT IMPLEMENTED USE GETPPN
	ROT	A,=13		;GET AC FIELD OF UUO
	ANDI	A,17
	ADD	A,P
	MOVEM	E,-20(A)	;PUT PPN IN SAVED AC
	POPJ	P,

STORAGE(PURE)
>;DEC
 