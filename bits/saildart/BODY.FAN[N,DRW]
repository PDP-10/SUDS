VERSION(BODY,5)
;PIN SWAPPING
PSWAPA:
MD,<	TRZA TFLG
PSWAPB:	TRO TFLG		;PIN NUMBER SWAP ONLY
>;MD
	PUSHJ P,PUSHM		;SET DISPLAY MODE
	PUSHJ P,GETCLS
	JRST POPME
	TLNN M,DSKACT!MACACT
MD,<	OUTSTR[ASCIZ/FIRST PIN ID?/]	>
MPC,<	OUTSTR[ASCIZ/FIRST PIN NAME?/]	>
	PUSHJ P,READP
	JRST POPM		;ALTMODE
	JRST POPME		;ERROR
	JUMPE T,POPM		;LET HIM OUT ON 0
	MOVEM T,N1
	TLNN M,DSKACT!MACACT
MD,<	OUTSTR[ASCIZ/SECOND PIN ID?/]	>
MPC,<	OUTSTR[ASCIZ/SECOND PIN NAME?/]	>
	PUSHJ P,READP
	JRST POPM		;ALTMODE
	JRST POPME		;ERROR
	PUSHJ P,POPM
	JUMPE T,CPOPJ		;LET HIM OUT ON 0
	MOVEM T,N2
	SETZM L1
	SETZM L2
	MOVEM A,CURBOD		;STO BODY POINTER HERE FOR NOW
	HLRZ B,(A)
	JRST FNDPN2

FNDPN1:	HLRZ B,(A)
	HRRZ T,1(B)
	HRRZ T,(T)
	HLRZ T,(T)
MD,<	HRRZ T,(T)	>
	CAME T,N1
	JRST NOTN1
MPC,<	SKIPE L1
	JRST FNDPN3
>;MPC
	MOVEM A,L1
MPC,<	JRST FNDPN2

FNDPN3:	HRLM A,L1
>;MPC
	SKIPN TT,L2
	JRST FNDPN2
MPC,<	TLNE TT,-1
	TLNN TT,-1
	JRST FNDPN2
>;MPC
	JRST GOTBOT
NOTN1:	CAME T,N2
	JRST FNDPN2
MPC,<	SKIPE L2
	JRST FNDPN4
>;MPC
	MOVEM A,L2
MPC,<	JRST FNDPN2

FNDPN4:	HRLM A,L2
>;MPC
	SKIPN TT,L1
	JRST FNDPN2
MPC,<	TLNE TT,-1
	TLNN TT,-1
	JRST FNDPN2
>;MPC
	JRST GOTBOT
FNDPN2:	HRRZ A,(B)
	JUMPN A,FNDPN1
	OUTSTR[ASCIZ/CAN'T FIND BOTH PINS ON THIS BODY!
/]
	POPJ P,

GOTBOT:
MPC,<	HRRZ T,L1
	HLRZ T,(T)
	HRRZ T,1(T)
	MOVE T,1(T)
	HRRZ TT,L1
	HLRZ TT,(TT)
	HRRZ TT,1(TT)
	MOVE TT,1(TT)
	EQV TT,T
	SKIPL TT		;IF NOT ON SAME SIDE
	MOVSS L1		;MAKE THEM SUCH
	PUSHJ P,SWPPIN
	MOVSS L1
	MOVSS L2
	PUSHJ P,SWPPIN
	MOVE A,CURBOD
	PUSHJ P,BODFIX		;FIX BODY PINS
	TRO MCHG!NEEDCL
	POPJ P,
>;MPC
SWPPIN:	MOVE T,L1		;FIRST POINT
	HLRZ T,(T)
	HRRZ T,1(T)
	MOVE TTT,L2		;SECOND POINT
	HLRZ TTT,(TTT)
	HRRZ TTT,1(TTT)
	HRRZ A,1(TTT)		;SECOND PIN #
	HRRZ TT,1(T)		;FIRST PIN #
MD,<	TRNE TFLG		;JUST CHANGING NUMBERS?
	JRST PNCHNG
>;MD
	HRRM A,1(T)
	HRRM TT,1(TTT)		;PIN #'S STAY WITH ID'S IN CASE BUSSED THROUGH
	HRRZ TT,(T)		;FIRST PIN TYPE POINTER AND TEXT
	HRRZ A,(TTT)		;SECOND PIN TYPE POINTER AND TEXT
	HRRM A,(T)		;EXCHANGE WITH FIRST
	HRRM TT,(TTT)		;AND USE FIRST FOR SECOND
MPC,<	POPJ P,	>
MD,<	MOVE A,CURBOD
	PUSHJ P,BODFIX		;FIX BODY PINS
	MOVE A,L1		;AND MOVE RESULTS
	MOVE TT,1(A)
	PUSHJ P,PMOVX
	PUSHJ P,PMOVY
	MOVE A,L2
	MOVE TT,1(A)
	PUSHJ P,PMOVX
	PUSHJ P,PMOVY
	TRO MCHG!NEEDCL
	POPJ P,
>;MD

MD,<
PNCHNG:	PUSH P,TT
	PUSH P,TTT
	MOVE D,T		;D GETS DATA BLOCK POINTER
	MOVE T,A		;T GETS PIN #
	MOVE B,CURBOD
	PUSHJ P,STPNN1		;SPREAD PIN# OVER NEW ID (SECOND)
	POP P,D
	POP P,T
	MOVE B,CURBOD
	TRO MCHG
	JRST STPNN1		;AND FIRST ONE
>;MD

PUSHM:	MOVE H,M		;SAVE COPY OF LH M
	HRR H,0			;AND RH 0
MD,<	TLZE M,PINIDS!PLOCS		;TURN OFF PINS
	TRO MCHG
	TLON M,RPINID
	TRO MCHG
>;MD
MPC,<	TLON M,PLOCS		;TURN ON PINS
	TRO MCHG
>;MD
	POPJ P,

POPME:	PUSHJ P,POPM
	JRST PERRET

POPM:
MD,<	TRNN H,TFLG
	TRZA TFLG
	TRO TFLG
	TLNE H,PINIDS
	TLOA M,PINIDS
	CAIA
	TRO MCHG
	TLNE H,PLOCS
	TLOA M,PLOCS
	CAIA
	TRO MCHG
	TLNN H,RPINID
	TLZA M,RPINID
>;MD
MPC,<	TLNN H,PLOCS
	TLZA M,PLOCS
>;MPC
	POPJ P,
	TRO MCHG
	POPJ P,

READP:
MD,<	PUSHJ P,READN	>
MPC,<	PUSHJ P,RPNAM
	JRST CPOPJ1
>;MPC
	CAIE C,12
	JRST SCARF
	MOVE B,T
	JRST CPOPJ2
;PLACE A BODY
BODPLC:	TRNE INMOV
	JRST PERRET
MD,<	MOVEI T,[ASCIZ/TYPE BODY NAME
/]	>
	PUSHJ P,BODYGT	;GET BODY NAME & POINTER
	POPJ P,		;ALTMODE
	POPJ P,		;NULL
	JRST OOPS1	;NX
	TRZ INMOV
	MOVEM A,CURBOD	;SAVE POINTER TO TYPE
	SETZM CURORT	;ZERO ORIENTATION
	PUSHJ P,BPYES	;PLANT BODY
	MOVE T,LSTBOD
	PUSHJ P,SCLOSE
	MOVE A,CLOSES
NOCMU,<	JRST BMOVEP	>	;START MOVING NEW BODY
CMU,<	POPJ P,		>	;AED IF YOUR BODIES ARE LAYED OUT NICELY,
				;    YOU DON'T NEED TO MOVE THEM.

BPYESF:	AOSA HSHFLG
BPYES:	SETZM HSHFLG
	MOVE A,CURBOD	;GET POINTER TO TYPE
	MOVEI T,BODM
	PUSHJ P,CHNGMD	;GO BACK TO BODY MODE
	TRO MCHG
	GETFS(B)
	GETFS(C)
	MOVEM B,LSTBOD		;SAVE POINTER
	HRLZM C,(B)		;DEPOSIT POINTER TO DATA BLOCK
	AOS F,BID		;GET A UNIQUE BODY ID
	SKIPE HSHFLG
	JRST BPYES1
	MOVEI D,DBODPN
	HRLM D,LSTBOD		;FOR CONSISTANCY SAKE
	MOVE D,DBODPN	;GET BODY LIST POINTER
	HRRM D,(B)	;PUT  NEW ONE IN THE LIST
	MOVEM B,DBODPN	;...
BPYES1:	MOVE T,CURSE	;GET CURSOR POSITION
	TDZ T,[1,,1]	;FOO ON INPUT!
	MOVEM T,1(B)	;DEPOSIT AS CENTER OF BODY
	GETFS(E)	;GET DIP NUMBER BLOCK
	HRLZM F,(E)
	SETZM 1(E)
	HRL A,E
	MOVEM A,1(C)	;DEPOSIT POINTER TO TYPE DEFINITION
	MOVE F,CURORT	;GET ORIENTAION
MD,<	ANDI F,7	>
MPC,<	ANDI F,3	>
	HRLZM F,(C)	;STORE ORIENTATION
MD,<
	HLRZ A,1(A)	;GET DEFINITION DATA BLOCK POINTER
	HRRZ A,(A)	;GET POINTER TO PINS
	JUMPE A,CPOPJ
	HRLI B,ISPIN
BLOPP1:	MOVE T,1(A)
	PUSHJ P,ORIENT
	ADJUST(ADD,T,CURSE)	;TO BODY CENTER
	PUSH P,T
	PUSHJ P,PUTPNT	;CREATE THE POINT
	POP P,1(D)	;SET X,Y
BLOPP2:	HRRM D,(C)	;LINK IN WITH OTHER PINS
	MOVE C,TTT
	HRRZ A,(A)	;GET TO NEXT PIN
	JUMPN A,BLOPP1	;LOOP  IF SOME LEFT
	POPJ P,
>;MD
MPC,<
	HRRZ A,1(A)	;GET POINTER TO PINS
	PUSH P,A
	PUSHJ P,BLOPP2
	SWITCH
	POP P,A
	PUSHJ P,BLOPP2
	SWITCH
	MOVEI T,ANGLPG
	JRST HYDPOG

BLOPP2:	JUMPE A,CPOPJ	;NONE?
	HRLI B,ISPIN
BLOPP1:	MOVE T,1(A)
	PUSHJ P,ORIENT
	ADJUST(ADD,T,CURSE)	;TO BODY CENTER
	PUSH P,T
	PUSHJ P,PUTPNT	;CREATE THE POINT
	POP P,1(D)	;SET X,Y
	HLRZ TT,(A)
	CAIE TT,1	;PIN 1?
	JRST NPIN1
	AOS 1(T)
	AOS 1(T)	;MAKE IT END UP PAD TYPE 3 (SQUARE)
NPIN1:	AOS 1(T)	;INITIALLY USE NORMAL PAD FOR PIN!
	HRRM D,(C)	;LINK IN WITH OTHER PINS
	MOVE C,TTT
	HRRZ A,(A)	;GET TO NEXT PIN
	JUMPN A,BLOPP1	;LOOP  IF SOME LEFT
	POPJ P,
>;MPC
;BODY AND DIP NAME STUFF SUBRS
MD,<
STODIP:	PUSHJ P,GETCLS
	JRST PERRET
	PUSHJ P,FNDDIP
	JRST [	PUSHJ P,SETTT
		JRST ITSTUF]
	HLRZ T,(T)
	JRST STODEF

STONAM:	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ T,(A)
	HRRZ T,1(T)
STODEF:	HRRZ T,(T)
>;MD
MPC,<
STODIP:	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ T,(A)
	HLRZ T,1(T)
	HRRZ T,1(T)		;DIP TYPE POINTER
>;MPC
	PUSHJ P,SETTT
	JUMPE T,ITSTUF
	JRST STOTX0

MPC,<
STONAM:	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ D,(A)
	HRRZ D,1(D)
	PUSHJ P,SETTT
	PUSHJ P,STFNAM
	JRST ITSTUF

STFNAM:	HLRZ B,(D)
	PUSHJ P,PUTTTN
	HLRZ T,(D)
	CAIE T,2
	POPJ P,
	PUTBYT 12
	HRRZ T,1(D)
	HRRE B,1(T)
	HRRZ T,(T)
	HRRE C,1(T)
	SUB B,C
	MOVM B,B
	IMULI B,5
	ASH B,-1
	JRST PUTTTN
>;MPC
;COPY PINIDS TO PIN #'S -- TRANSPOSE -- BROT -- BODFIX
MD,<
BPINS:	PUSHJ P,GETCLS
	JRST PERRET
BPINS0:	HLRZ A,(A)
	TLNE M,PLOCS
	TRO MCHG
BPINS1:	HRRZ A,(A)
	JUMPE A,CPOPJ
	HLRZ A,(A)
	HRRZ B,1(A)
	HRRZ T,(B)
	HLRZ T,(T)
	HRRZ T,1(T)		;DEFAULT PIN NAME
	HRRM T,1(B)		;USE HERE
	JRST BPINS1

BPINSA:	SKIPN C,DBODPN
	JRST PERRET
BPNSA1:	MOVE A,C
	PUSHJ P,BPINS0
	HRRZ C,(C)
	JUMPN C,BPNSA1
	POPJ P,

;CLEAR ALL DIP PIN NUMBERS
PINZ:	SKIPN A,PONPNT
	POPJ P,
	TRO MCHG
PINZ1:	HLRZ T,(A)
	HRRZ T,1(T)
	MOVE TT,1(T)
	TLNE TT,ISPIN		;PIN?
	HLLZM TT,1(T)		;YES, FLUSH PIN #
	HRRZ A,(A)
	JUMPN A,PINZ1
	POPJ P,

;TRANSPOSE PIN NUMBERS FROM 14 PIN DIP TO 16 PIN SOCKET
;FOR "L" 12,1415	FOR "R" 11,1416
TRANSPOSE:
	PUSHJ P,GETCLS
	JRST PERRET
	PUSHJ P,GETLR
	JRST PERRET
GOTPOF:	HLRZ B,(A)
	HLRZ B,1(B)
	MOVE T,1(B)
	TLZ T,L1416!R1416
	TDO T,C
	MOVEM T,1(B)
	TRO MCHG
	POPJ P,

GETLR:	TLNN M,DSKACT!MACACT
	OUTSTR[ASCIZ/L, R, OR <CR>?/]
	PUSHJ P,GETCHR
	TLNN M,DSKACT!MACACT
	OUTSTR[ASCIZ/
/]
	CAIE C,"L"
	JRST CKR
	MOVSI C,L1416
	JRST CPOPJ1

CKR:	CAIE C,"R"
	JRST CHKCR
	MOVSI C,R1416
	JRST CPOPJ1

CHKCR:	CAIE C,12
	POPJ P,
	SETZ C,			;LET HIM CLEAR BITS
	JRST CPOPJ1

;TRANSPOSE ALL BODIES OF A CERTAIN NAME
TRANALL:
	MOVEI T,[ASCIZ/NAME OF BODY TO TRANSPOSE?/]
	PUSHJ P,BODYGT
	POPJ P,		;ALTMODE
	POPJ P,		;NULL
	JRST OOPS1
	PUSHJ P,GETLR
	JRST PERRET
	MOVEM A,DY1	;STUFF AWAY HERE FOR NOW
	SKIPN A,DBODPN
	POPJ P,		;NOTHING TO DO
TRANA1:	HLRZ T,(A)
	HRRZ T,1(T)
	CAMN T,DY1	;SAME BODY?
	PUSHJ P,GOTPOF	;YES
	HRRZ A,(A)
	JUMPN A,TRANA1
	POPJ P,
>;MD

BROT:	TRNE INMOV
	JRST [	MOVE A,CLOSES
		JRST BROTA]
	PUSHJ P,GETCLS
	JRST PERRET
BROTA:	HLRZ B,(A)
	HLRZ T,(B)
	ADDI T,1
MD,<	ANDI T,7	>
MPC,<	ANDI T,3	>
	HRLM T,(B)	;DON'T CLOBBER OTHER HALFWORD
	TRO MCHG
MD,<	HLRZ B,1(B)
	HRRZ B,(B)
	JUMPE B,BROTB
	MOVE F,BLCROT(T)	;GET PROPER ROTATION NUMBER FROM TABLE
	MOVE T,1(B)
	PUSHJ P,ORIENT
	MOVEM T,1(B)
BROTB:
>;MD
	PUSHJ P,BODFIX
MD,<	JRST STRAIGHTEN	;GO FIX THE WORLD NOW>
MPC,<	POPJ P,>

MD,<
BLCROT:	7	;7 - 0
	1	;0 - 1
	1	;1 - 2
	1	;2 - 3
	7	;3 - 4
	1	;4 - 5
	1	;5 - 6
	1	;6 - 7
>;MD

;CALL WITH POINTER TO BODY IN A
BODFIX:	MOVE D,1(A)
	HLRZ A,(A)
	HLRZ F,(A)
	JRST BODFX1

BODFX2:	HLRZ A,(B)
	HRRZ T,1(A)
	HRRZ T,(T)
	MOVE T,1(T)
	PUSHJ P,ORIENT
	ADJUST(ADD,T,D)
MPC,<	MOVEM T,1(B)	>
MD,<	PUSH P,A
	PUSH P,F
	MOVE A,B		;POINTER TO POINT MUST BE IN A
	PUSHJ P,PMOVRL
	POP P,F
	POP P,A
>;MD
BODFX1:	HRRZ B,(A)
	JUMPN B,BODFX2
	POPJ P,
;GET PIN #'S FROM DIP DEF FILE
MD,<
SETSEC:	PUSHJ P,GETCLS
	JRST PERRET
	PUSHJ P,GETDEF		;GET DEFINITION FROM DIPS.DIP
	POPJ P,			;LOSE
SECAGN:	TLNE M,DSKACT!MACACT
	JRST SETSCP
	OUTSTR[ASCIZ/SECTION # (0-/]
	HLRZ T,(H)		;GET # OF SECTIONS
	PUSHJ P,DECOUT
	OUTSTR[ASCIZ/)?/]
SETSCP:	PUSHJ P,READN
	CAIN C,ALTMOD
	POPJ P,			;LET HIM OUT ON ALTMODE
	CAIE C,12
	JRST [	PUSHJ P,INNERR
		JRST SECAGN]
;ENTER HERE WITH SEC# IN T AFTER HAVING CALLED GETDEF
SETSCN:	HLRZ TT,(H)
	CAMLE T,TT
	JRST [	OUTSTR[ASCIZ/SECTION # TOO LARGE!
/]
		JRST SECAGN]
	MOVE B,T		;SAVE SEC #
	MOVE A,TYPE
	JRST SETSC4

SETSC7:	HLRZ C,(A)
	HRRZ C,1(C)
	HRRZ T,(C)		;PIN TYPE BLOCK
	HLRZ T,(T)		;PIN ID
	HRRZ T,1(T)
	CAMLE T,1(H)		;NUMBER OF PINS ON DIP
	JRST [	OUTSTR[ASCIZ/PIN ID /]
		PUSHJ P,DECOUT
		OUTSTR[ASCIZ/ TOO LARGE FOR THIS DIP!
/]
		JRST SETSC4]
	HRRZ TTT,H		;PREPARE TO SEARCH DEF LIST
	MOVE TT,T
STSC10:	HRRZ TTT,(TTT)		;DEFINITION MAKER MADE SURE THERE WERE ENOUGH PINS
	SKIPN TTT
	PUSHJ P,FUCKUP
	SOJG TT,STSC10
	MOVE TTT,1(TTT)
	JUMPE TTT,[HRRM T,1(C)
		TRO MCHG
		TLNE M,DSKACT!MACACT
		JRST SETSC4
		OUTSTR[ASCIZ/PIN ID /]
		PUSHJ P,DECOUT
		OUTSTR[ASCIZ/, NO SECTION INFO, USING AS PIN #.
/]
		JRST SETSC4]
	MOVE T,TTT
	SETZ D,
	HRRZ E,(H)
SETSC5:	ADDI D,1
	CAME T,1(E)		;SAME PIN SECT #?
	JRST SETSC6		;NO
	MOVN TTT,B		;GET NEG OF DESIRED SECTION
	MOVSI TT,400000		;GET BIT FOR SECTION 0
	LSH TT,(TTT)		;POSITION TO CORRECT SECTION
	TDNE TT,(E)		;TEST FOR THAT SECTION ON THIS PIN
	JRST [	HRRM D,1(C)	;YES, STORE THIS PIN #
		TRO MCHG	;THIS CHANGES THINGS
		JRST SETSC4]	;TRY ANOTHER PIN
SETSC6:	HRRZ E,(E)
	JUMPN E,SETSC5
	OUTSTR[ASCIZ/PIN ID /]
	HRRZ T,(C)
	HLRZ T,(T)
	HRRZ T,1(T)
	PUSHJ P,DECOUT
	OUTSTR[ASCIZ/, NOT IN THIS SECTION.
/]
SETSC4:	HLRZ A,(A)
	HRRZ A,(A)
	JUMPN A,SETSC7
	POPJ P,

SKPBDY:	PUSHJ P,SKPBD2		;SKIP PROPERTIES
SKPBD1:	PUSHJ P,SKPSOM		;SKIP REG STUFF
	PUSHJ P,WORDIN		;SKIP SECTS,,SECT PIN #
	SOJG D,SKPBD1		;SKIP THEM ALL
	JRST SETSC1

SKPBD2:	PUSHJ P,SKPSTR		;SKIP A PROPERTY NAME
	CAIA
	JRST SKPBD2
	MOVEI A,1
SKPTRE:	PUSHJ P,SKPSTR
	JRST [	SOJG A,SKPTRE
		POPJ P,]
	PUSHJ P,WORDIN		;SKIP VALUE BITS
	AOJA A,SKPTRE

SKPSOM:	PUSHJ P,WORDIN		;BITS,,PS#
	PUSHJ P,WORDIN		;HI,,LOW LOADING
	JRST WORDIN		;USE

;CALL WITH BODY POINTER IN A
;SETS UP DIP DEF TABLE, SKIP RETURNS IF ALL OK
GETDEF:	MOVEM A,TYPE		;STORE BODY POINTER HERE
	PUSHJ P,FNDDIP
	JRST [	OUTSTR[ASCIZ/SORRY, NO DIP TYPE FOR THIS BODY!
/]
		POPJ P,]
	HLRZ A,(T)
	HRRZ T,(A)
	MOVEM T,TYPNAM		;SAVE NAME
	HLRZ A,(A)		;PROPERTY NAME
	HLRZ H,(A)		;DIP DEF LIST
	JUMPN H,CPOPJ1		;DEF ALREADY IN?
	MOVE H,A		;SAVE POINTER HERE
	MOVEM P,PERRSAV		;RETURN UP FROM HERE
	INIT DAT,10
	'DSK   '
	IOHD
	JRST [	OUTSTR [ASCIZ/CAN'T GET DISK!
/]
		JRST SECLEV]
	MOVEI T,IOBUF		;USE COMPILED IN BUFFER
	EXCH T,.JBFF
	INBUF DAT,2
	MOVEM T,.JBFF
	MOVE T,['DIPS  ']
	MOVEM T,FILNAM
	MOVSI T,EXTDIP
	MOVEM T,FILEXT
	SETZB T,FILDAT
NODEC,<
NOSTAN,<
	DSKPPN T,		;TRY HIS PPN FIRST
	TLOA A,400000
>;NOSTAN
>;NODEC
DIPRD2:	MOVE T,LIBPPN
	MOVEM T,FILPPN
DIPRD:	TLNE M,DSKACT!MACACT
	JRST DIPRD1
	OUTSTR [ASCIZ/READING /]
	HRRI A,FILNAM
	JSR FPRINT
	OUTSTR[ASCIZ/
/]
DIPRD1:	MOVE T,FILPPN
	LOOKUP DAT,FILNAM
	JRST [	PUSHJ P,LOOKER
NODEC,<		TLZE A,400000		;WAS THIS LIBRARY?
		JRST DIPRD2		;NO, TRY LIBRARY
>;NODEC
		OUTSTR[ASCIZ/TRY ANOTHER DIP /]
		MOVSI T,EXTDIP
		PUSHJ P,SETNAM
		JRST SECLEV
		SETZ A,
		JRST DIPRD]
DEC,<	JSR DAT,LOOKCK	>
	MOVEM T,FILPPN
	PUSHJ P,WORDIN
	MOVN TTT,TTT
	CAIE TTT,DIPVER		;CORRECT VERSION?
	JRST [	OUTSTR[ASCIZ/WRONG VERSION DIP DEFINITION FILE.
/]
		JRST SECLEV]
SETSC1:	PUSHJ P,WORDIN
	JUMPE TTT,[OUTSTR[ASCIZ/NO SUCH DIP IN DEFINITION FILE!
/]
		JRST SECLEV]
	MOVE D,TTT		;SAVE # OF PINS HERE
	PUSHJ P,RSTR
	HRLM T,(P)
	MOVE A,T
	MOVE B,TYPNAM
	PUSHJ P,TXTMAT
	JRST SKPBDY		;NOT THE SAME SKIP THIS ONE
	GETFS(T)
	HRLM T,(H)
	SETZM (T)
	MOVEM D,1(T)
	MOVE H,T
	MOVE E,H
	PUSHJ P,SKPBD2
SETSC2:	PUSHJ P,SKPSOM		;SKIP BORING STUFF
	PUSHJ P,WORDIN
	GETFS(T)
	HRRM T,(E)
	MOVE E,T
	HRRZM TTT,1(E)		;STORE SECTION PIN # HERE
	HLLZM TTT,(E)		;STORE SECTION BITS HERE
	HLLZS TT,TTT
	SUBI TT,1
	XOR TT,TTT
	JFFO TT,SETSC8		;THIS FINDS RIGHTMOST BIT FROM TTT
	JRST SETSC3		;NO BITS

SETSC8:	HLRZ TT,(H)
	CAMLE TTT,TT
	HRLM TTT,(H)		;STORE MAX SO FAR!
SETSC3:	SOJG D,SETSC2
	RELEASE DAT,		;RELEASE DEF FILE
	JRST CPOPJ1		;GIVE WIN RETURN

SECLEV:	RELEASE DAT,
	POPJ P,
>;MD
;SET BODY LOCATION
BNUMS:	PUSHJ P,GETCLS
	JRST PERRET
MD,<	HRLM A,(P) >		;SAVE BODY POINTER HERE FOR GETDEF
	HLRZ A,(A)
	HLRZ A,1(A)		;POINTER TO DIP NUMBER BLOCK
	MOVE T,[PUSHJ P,GETLCH]
	MOVEM T,GTCHRX
	TLNN M,DSKACT!MACACT
	OUTSTR @BODCUE
	PUSHJ P,GTSLTL
	JRST INNERR
	JRST [	CAIE C,12
		JRST INNERR
MPC,<		HLLZS (A)	;CLEAR THE LOC
		TRO MCHG
		POPJ P,	]
>;MPC
MD,<		HRRZ B,(A)		;GET OLD LOC BLOCK POINTER
		JUMPE B,CPOPJ
		HLLZS (A)
		MOVSI T,FIXLOC!FIXBLO
		ANDCAM T,1(A)
		TLNE M,BLOCS
		TRO MCHG
		HLRZ A,(B)
		FSTRET (A)
		FSTRET (B)
		TRNE TMOVE!LMOVE	;IF WE WERE MOVING OFFSET,
		TRZN INMOV		;THEN STOP AND FIND CLOSEST AGAIN
		POPJ P,
		TRO NEEDCL
		POPJ P,	]
MD,<	JFCL	>		;WE DON'T CARE IF THERE WAS A BRS OR NOT
	SETO T,			;ASSUME NO SEC STUFF
	CAIE C,"-"		;SETTING SECTION #?
	JRST SECNUM
	PUSHJ P,GETLIN		;YES, GET IT
	CAIL C,"A"
	CAILE C,"Z"
	JRST [	CAIL C,"0"	;ACCEPT NUMERIC SECTIONS TOO!
		CAILE C,"9"
		JRST INNERR
		PUSHJ P,CREADN
		JRST SECNUM ]
	MOVEI T,-"A"(C)
	PUSHJ P,GETLIN
SECNUM:	MOVEM T,NUMBER		;SAVE SECTION # HERE
	MOVE T,1(A)		;GET CURRENT BITS
	TLZ T,L1416!R1416	;TURN OFF THE OLD BITS
	CAIN C,"L"		;LEFT?
	TLO T,L1416		;YES, TURN ON BIT
	CAIN C,"R"		;RIGHT?
	TLO T,R1416		;YES, TURN ON BIT
	CAIE C,"*"		;NONE?
	TLNE T,L1416!R1416	;ANY BITS CHANGED?
	PUSHJ P,[MOVEM T,1(A)	;WE GOT A CHANGE: STORE IT
		JRST GETLIN]	;AND GET NEXT CHAR
>;MD
	CAIE C,12		;NOW IT MUST BE A LF
	JRST INNERR
MD,<	MOVE TT,LETTER
	TLNE TT,-1
	SKIPN T,CRDLOC
	JRST NOGLOB
	XOR T,TT
	TLNE T,-1
	JRST [	OUTSTR[ASCIZ/SORRY, CAN'T CHANGE CARD LOC WHILE GLOBAL CARD LOC IS IN FORCE!
/]
		JRST CHKSCN]	;GO CHECK SECTION ANYWAY
	HRRZS LETTER
NOGLOB:
>;MD
	MOVE T,LETTER
MPC,<	HRRM T,(A)		;STORE IT>
MD,<	HRRZ B,(A)
	JUMPN B,GTNMBK		;DO WE HAVE A BLOCK ALREADY?
	GETFS(B)
	GETFS(TT)
	HRLZM TT,(B)
	SETZM 1(TT)
	HRRM B,(A)		;LINK IN
DEC,<	MOVSI TT,FIXBLO
	IORM TT,1(A)
>;DEC
	HLRZ TT,(P)		;BODY POINTER
	HLRZ TT,(TT)		;BODY DATA BLOCK
	HLRZ F,(TT)		;ORIENTATION
	HRRZ TT,1(TT)		;TYPE POINTER
	PUSH P,T
	PUSHJ P,STLCOF
	POP P,T
GTNMBK:	HLRZ B,(B)
	MOVEM T,(B)
	HLRZ T,(P)		;SETUP T FOR OFFBLO
	PUSHJ P,OFFBLO		;CHECK FOR RECALC CHAR OFFSET
>;MD
	TLNE M,BLOCS
	TRO MCHG
MPC,<	POPJ P,	>
MD,<
CHKSCN:	SKIPGE NUMBER		;ANY SECTION #?
	POPJ P,
	HLRZ A,(P)		;GET BODY POINTER
	PUSHJ P,GETDEF
	POPJ P,			;LOSE
	MOVE T,NUMBER
	JRST SETSCN		;TRY TO SET SECTION!

OFFLOC:	SKIPN H,DBODPN
	POPJ P,
OFFLC1:	HLRZ A,(H)
	HRRZ TT,1(A)		;TYPE POINTER
	HLRZ F,(A)		;ORIENTATION
	HLRZ A,1(A)		;SECOND DATA BLOCK
	HRRZ B,(A)		;LOC BLOCK POINTER
	JUMPE B,OFFLC2		;ANY?
	PUSHJ P,STLCOF		;YES, SET TO FOLLOW DEFINITION
	MOVE T,H
	PUSHJ P,OFFBLO
OFFLC2:	HRRZ H,(H)
	JUMPN H,OFFLC1
	TLNE M,BLOCS
	TRO MCHG
	POPJ P,

;RESET LOCATION OFFSET OF CLOSEST BODY TO DEFAULT
BLCOFF:	PUSHJ P,GETCLS
	JRST PERRET
	HRLM A,(P)		;SAVE BODY HERE FOR OFFBLO
	HLRZ A,(A)
	HRRZ TT,1(A)		;TYPE POINTER
	HLRZ F,(A)		;ORIENTATION
	HLRZ A,1(A)		;SECOND DATA BLOCK
	HRRZ B,(A)		;LOC BLOCK POINTER
	JUMPE B,CPOPJ		;LEAVE IF NONE
	TLNE M,BLOCS
	TRO MCHG
	PUSHJ P,STLCOF		;SET OFFSET
	HLRZ T,(P)
	JRST OFFBLO

;CALL WITH -- TT:TYPE POINTER  A:BODY BIT BLOCK  B:LOC BLOCK F:BODY ORIENTATION
STLCOF:	HLRZ TT,1(TT)		;TYPE DATA BLOCK
	HLRZ TT,(TT)		;OFFSET BLOCK
	MOVE T,1(TT)		;DEFAULT OFFSET FROM DEF
	PUSHJ P,ORIENT		;ROTATE IT
	MOVEM T,1(B)		;SET IT
	MOVSI T,FIXLOC		;CONTINUE FIXING LOC OFFSET
	IORM T,1(A)
	POPJ P,
>;MD

STOBLC:	PUSHJ P,GETCLS
	JRST PERRET
	HLRZ D,(A)
	PUSHJ P,SETTT
	HLRZ D,1(D)
MD,<	HRRZ D,(D)
	JUMPE D,ITSTUF
	HLRZ D,(D)
>;MD
MPC,<	HRRZ T,(D)
	JUMPE T,ITSTUF
>;MPC
	PUSHJ P,STFBLC
	JRST ITSTUF

STFBLC:	PUSH P,A
	MOVS A,(D)
	PUSHJ P,SLTLPN
	POP P,A
	POPJ P,

MD,<
;RESET LOCATION OFFSET OF CLOSEST BODY TO DEFAULT
BLOOFF:	PUSHJ P,GETCLS
	JRST PERRET
	MOVE T,A
	HLRZ A,(A)
	HLRZ A,1(A)		;SECOND DATA BLOCK
	HRRZ B,(A)		;LOC BLOCK POINTER
	JUMPE B,CPOPJ		;LEAVE IF NONE
	MOVSI TT,FIXBLO
	IORM TT,1(A)
;CALL WITH T:POINTER TO BODY
OFFBLO:	HLRZ A,(T)
	HLRZ A,1(A)
	HRRZ B,(A)
	HLRZ B,(B)
	HLL T,1(A)
	TLNN T,FIXBLO
	POPJ P,			;NOT BEING FIXED
	TLNE M,BLOCS
	TRO MCHG
	TLNN T,FIXLOC		;DON'T FOLLOW BODY DEF OFFSET UNLESS FOLLOWING BODY DEF LOC
	JRST OFFBL1
	HLRZ T,(T)
	HRRZ T,1(T)
	HLRZ T,1(T)
	HLRZ T,(T)
	HRRZ T,(T)
	JUMPE T,OFFBL1		;CHAR OFFSET IN DEF?
	MOVE T,1(T)		;YES, USE IT
	MOVEM T,1(B)
	POPJ P,

OFFBL1:	SETZM CHRCNT
	PUSH P,PUTCHR
	MOVE TTT,[AOS CHRCNT]
	MOVEM TTT,PUTCHR
	MOVS A,(B)
	PUSHJ P,SLTLPN
	POP P,PUTCHR
	MOVN A,CHRCNT
	IMULI A,CWIDTH
	IMUL A,CMUL+STDBIG
	ASH A,-1
	HRLZM A,1(B)		;X PART OF OFFSET
	MOVNI A,CHGHT
	IMUL A,CMUL+STDBIG
	ASH A,-1
	HRRM A,1(B)		;Y PART
	POPJ P,
>;MD
;DELETE BODY
C2BDEL:	SETOM PINLEV
	PUSHJ P,GETCLS
	POPJ P,
	MOVE B,CLAST
	TRO NEEDCL
	JRST BCLR1

BODDEL:	PUSHJ P,GETCLS	;ANY TO DELETE?
	JRST PERRET	;NO
	MOVE B,CLAST
	TRO NEEDCL
BCLEAR:	SETZM PINLEV
BCLR1:	PUSH P,B	;SAVE LAST
	TRZE INMOV	;TURN OFF MOVING
	TRO NEEDCL
ROUTE,<MPC,<TLZ M,%ROUTE>>;MAKE HIM ROUTE AGAIN
	PUSHJ P,REMBOD	;REMOVE BODY FROM ANY SETS
	TRO TFLG!MCHG	;DELETE PINS
	PUSH P,A	;SAVE THIS
	HLRZ B,(A)
	HRRZ B,(B)
	SKIPN PINLEV	;LEAVING PINS AS POINTS?
	JRST BODDLD	;NO, DELETING
	JRST BODDL1

BODDL2:	HLRZ A,(B)
	HRRZ B,(A)
	AOS T,PID
	MOVEM T,(A)	;GET A PIN ID
	HRRZ T,1(A)
	HRLOI TT,MPC,<PLANES!>ISPIN
	ANDCAM TT,1(T)	;CLEAR ISPIN AND PADTYPE OR PIN#
	HLLZS (T)	;CLEAR TYPE BLOCK POINTER
BODDL1:	JUMPN B,BODDL2
BODDLE:	POP P,A		;HERE WE GIVE BACK THE BODY
	HRRZ F,(A)	;GET POINTER TO NEXT BODY
	POP P,B		;RESTORE LAST POINTER
	HRRM F,(B)	;LINK AROUND
	HLRZ B,(A)	;GET DATA BLOCK POINTER
	HLRZ C,1(B)	;BID BLOCK
	FSTRET (A)
	FSTRET (B)
MD,<	HRRZ D,(C)	;GET LOC POINTER(IF ANY)
	JUMPE D,NOLXY
	HLRZ B,(D)
	FSTRET (B)
	FSTRET (D)
NOLXY:	PUSHJ P,PRPRET
>;MD
	FSTRET (C)
	POPJ P,

BODDLD:	MOVEI B,PONPNT
	PUSHJ P,BODDLP	;DELETE ALL PINS WHICH POINT TO THIS BODY
MPC,<	MOVEI B,PONPN2
	PUSHJ P,BODDLP
>;MPC
	JRST BODDLE	;NOW GIVE BACK BODY

BODDLQ:	HLRZ T,(B)
	HLRZ T,(T)	;BODY POINTER
	CAME T,-1(P)	;THIS IS WHERE BODY POINTER WAS STORED
	JRST BODDLP	;TRY ANOTHER
	PUSH P,A	;SAVE LAST POINTER
	TRO TFLG	;ALLOW DELETE PIN
	PUSHJ P,DELPNT	;DELETE (CURRENT AND LAST ALREADY SETUP)
	POP P,B
BODDLP:	MOVE A,B	;SAVE LAST
	HRRZ B,(B)
	JUMPN B,BODDLQ
	POPJ P,

;CALL TO RETURN PROPERTY/TEXT LIST,
;3RD BODY CELL IN C

PRPRET:	HRRZ A,1(C)
	JUMPE A,CPOPJ
PRPR1:	HLRZ B,(A)
	JUMPE B,PRPR2
	HLRZ D,(B)
	PUSHJ P,PUTFS
	SKIPE B,D
	PUSHJ P,PUTFS
PRPR2:	HRRZ A,(A)
	JUMPN A,PRPR1
	HRRZ B,1(C)
	HLLZS 1(C)
	JRST PUTFS
;BODREN
MD,<
BODREN:	MOVEI T,[ASCIZ/TYPE BODY NAME.
/]
	PUSHJ P,BODYGT
	POPJ P,			;ALTMODE
	POPJ P,			;NULL
	JRST OOPS1		;NX
	SKIPE MODLIB		;ALLOW MODIFICATION?
	JRST RENOK
	HLRZ T,(A)
	JUMPE T,RENOK
	OUTSTR[ASCIZ/CAN'T RENAME LIBRARY BODY!
/]
	POPJ P,

RENOK:	MOVEI T,[ASCIZ/TYPE NEW BODY NAME.
/]
	PUSH P,A
	PUSHJ P,BODYGT
	JRST RENOKB		;ALTMODE
	JRST RENOKB		;NULL
	JRST RENOKA		;NX
	OUTSTR[ASCIZ/NAME ALREADY IN USE!!!
/]
RENOKB:	POP P,(P)
	POPJ P,

RENOKA:	POP P,C
	MOVE D,B
	HRRZ B,(C)
	HLRZ T,(B)		;COPY DIPTYPE POINTER
	HRLM T,(D)
	PUSHJ P,PUTFS
	HRRM D,(C)
	TLNE M,%IDENT		;DISPLAYING NAMES?
	TRO MCHG		;YES, REFRESH
	POPJ P,
;GET BODY
BODYGT:	TLNN M,DSKACT!MACACT
	OUTSTR (T)
	SETZ A,		;IN CASE NO NAME
	PUSHJ P,TREADU	;READ IN THE TEXT FOR THE BODY NAME
	POPJ P,		;ALTMODE
	JRST CPOPJ1	;NULL STRING
	AOS (P)
	AOS (P)		;AT LEAST 2 SKIPS
	MOVEI A,BODPNT-1;GET POINTER TO THE STRING OF BODIES
	JRST BLOP2

BLOP1:	PUSH P,A	;SAVE A
	PUSH P,B	;SAVE B
	HRRZ A,(A)	;GET POINTER TO STRING
	PUSHJ P,TXTMAT	;CHECK FOR TEXT MATCH
	JRST BLOP3	;NO MATCH
	POP P,B		;MATCH, RESTORE B
	POP P,A		;RESTORE A
	PUSHJ P,PUTFS	;RETURN STRING
	HLRZ T,1(A)
	JUMPE T,BDYGET	;GET BODY FROM LIBRARY IF NOT ALL IN
	HRRZ A,A	;CLEAR PREVIOUS LINK
	JRST CPOPJ1	;FOUND

BLOP3:	POP P,B		;YES, MATCH, RESTORE B
	POP P,A		;RESTORE A, THE POINTER TO THE FOUND BODY
BLOP2:	HRL A,A
	HRR A,1(A)	;GO TO NEXT BODY
	TRNE A,-1
	JRST BLOP1	;LOOP IF ANY LEFT TO COMPARE WITH
	POPJ P,		;ELSE LEAVE
>;MD
MPC,<
BODYGT:	TLNN M,DSKACT!MACACT
	OUTSTR [ASCIZ /NO. OF PINS?
/]
	SETZ A,		;THIS IS "NO" ANSWER
	PUSHJ P,READN	;READ IN THE TEXT FOR THE BODY NAME
	CAIN C,ALTMOD
	POPJ P,
	JUMPE T,[	CAIN C,12		;JUST BLANK?
			JRST CPOPJ1		;LET HIM OUT
			CAIN C,"R"
			MOVEI T,=400/5
			CAIN C,"C"
			MOVEI T,=300/5
			CAIN C,"T"
			MOVEI T,3
			PUSHJ P,GETLIN
			CAIE C,12
			JRST INNERR
			JUMPE T,INNERR
			CAIE T,3		;3 PIN DIP?
			JRST IS2PIN		;NO, 2 PIN AND WE HAVE SEPERATION
			JRST BLOP0]
	CAIE C,12
	JRST INNERR
	CAIN T,2	;2 PIN DIP?
	JRST ASKWID
BLOP0:	MOVE A,BODPNT	;GET POINTER TO THE STRING OF BODIES
	AOS (P)
	AOS (P)
BLOP1:	JUMPE A,CPOPJ	;DOESN'T EXIST
	HLRZ TT,(A)
	CAIN TT,(T)
	JRST CPOPJ1	;EXISTS
	HRRZ A,(A)
	JRST BLOP1

ASKWID:	TLNN M,DSKACT!MACACT
	OUTSTR[ASCIZ/PIN SEPERATION IN MILS (DIVISIBLE BY 10)?/]
	PUSHJ P,READNC
	IDIVI T,=10
	JUMPE T,INNERR
	JUMPN TT,INNERR
	ASH T,1
IS2PIN:	AOS (P)
	AOS (P)
	AOS (P)		;ALWAYS EXISTS
G2PIN:	SKIPN A,BODPNT
	JRST MAKE2D
B2LOP:	HLRZ TT,(A)
	CAIE TT,2
	JRST B2LOP1
	HRRZ TT,1(A)
	HRRE TT,1(TT)
	CAIN TT,(T)
	POPJ P,
B2LOP1:	HRRZ A,(A)
	JUMPN A,B2LOP
MAKE2D:	GETFS(A)
	MOVSI TT,2
	HRR TT,BODPNT
	MOVEM TT,(A)
	MOVEM A,BODPNT
	GETFS(TT)
	HRRZM T,1(TT)
	HRRZM TT,1(A)
	GETFS(TTT)
	HRLI TTT,1
	MOVEM TTT,(TT)
	MOVSI TT,2
	MOVEM TT,(TTT)
	MOVN T,T
	HRRZM T,1(TTT)
	POPJ P,

;SET DIP TYPE
SETDIP:	PUSHJ P,GETCLS
	JRST PERRET
	TLNN M,DSKACT!MACACT
	OUTSTR[ASCIZ/TYPE DIP TYPE
/]
	PUSHJ P,TREADU
	POPJ P,			;ALTMODE
	SETZ B,			;NULL
	TLNE M,%IDENT
	TRO MCHG
	HLRZ T,(A)
	HLRZ T,1(T)
	MOVE TT,B
	HRRZ B,1(T)		;PICK UP OLD
	HRRM TT,1(T)		;STORE NEW
	JUMPN B,PUTFS
	POPJ P,
>;MPC

OOPS1:	OUTSTR[ASCIZ/NO SUCH BODY, CHARLY
/]
MD,<	JRST PUTFS	;PUT NON-EX NAME BACK IN FREE STORAGE	>
MPC,<	POPJ P,							>
;ASSOCIATIVE BODY SET
ASSET:	PUSHJ P,GETCLS
	JRST PERRET
	TRZE INMOV
	TRO NEEDCL
	GETFS(T)		;MAKE A NEW SET
	HRLZM A,1(T)		;STARTING WITH THIS BODY
	SETZM (T)
	GETFS(TT)
	HRLM T,(TT)
	SETZM 1(TT)
	EXCH TT,SETPNT
	HRRM TT,@SETPNT
	MOVE H,T
	HLRZ A,(A)
	JRST ASSET1

ASSET2:	HLRZ A,(A)
	HLRZ B,1(A)
MD,<	HLRZ C,(B)
	PUSHJ P,ASSPUT
	HRRZ C,(B)
	PUSHJ P,ASSPUT
	HLRZ C,1(B)
	PUSHJ P,ASSPUT
	HRRZ C,1(B)
	PUSHJ P,ASSPUT
>;MD
MPC,<	JUMPE B,ASSET1
ASSET3:	MOVEI D,2
ASSET4:	XCT (D)[HLRZ C,(B)
		HRRZ C,1(B)
		HLRZ C,1(B)]
	PUSHJ P,ASSPUT
	SOJGE D,ASSET4
	HRRZ B,(B)
	JUMPN B,ASSET3
>;MPC
ASSET1:	HRRZ A,(A)
	JUMPN A,ASSET2
	MOVEI T,SETM
	PUSHJ P,CHNGMD		;GO INTO SET MODE
	MOVE A,SETPNT
	PUSHJ P,RECNTR		;CALC CENTER
	MOVE A,SETPNT
	MOVE T,1(A)		;LOC OF CENTER
	JRST CHKON

ASSPUT:	JUMPE C,CPOPJ
	HLRZ T,(C)
	HRRZ T,1(T)
	MOVE T,1(T)
	TLNE T,MPC,<CPIN!>ISPIN
	POPJ P,
	MOVE T,H
ASSPT1:	HRRZ TT,1(T)
	JUMPE TT,ASSPT2
	CAMN TT,C
	POPJ P,			;ALREADY IN, SKIP IT
	MOVE TT,T
	HRRZ T,(T)
	JUMPN T,ASSPT1
	GETFS(T)
	HRRM T,(TT)
	SETZM (T)
	SETZM 1(T)
ASSPT2:	HRRM C,1(T)
	POPJ P,
